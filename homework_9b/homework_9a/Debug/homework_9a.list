
homework_9a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003410  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003618  08003618  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000007c  0800369c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  0800369c  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c14a  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ab3  00000000  00000000  0002c239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000920  00000000  00000000  0002e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000157c1  00000000  00000000  0002f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cba5  00000000  00000000  00044971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b42b  00000000  00000000  00051516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003630  00000000  00000000  000dc944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000dff74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003598 	.word	0x08003598

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08003598 	.word	0x08003598

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d101      	bne.n	8000590 <HAL_TIM_PeriodElapsedCallback+0x14>
		scanColumn();
 800058c:	f000 f806 	bl	800059c <scanColumn>
	}
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000098 	.word	0x20000098

0800059c <scanColumn>:

void scanColumn(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	// Scan the rows for the currently active column
	for(int r=0; r<DIM_ROWS; r++){
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e044      	b.n	8000632 <scanColumn+0x96>
		// Read the row
		buttonState = HAL_GPIO_ReadPin(GPIOC, rows[r]);
 80005a8:	4a36      	ldr	r2, [pc, #216]	; (8000684 <scanColumn+0xe8>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	4834      	ldr	r0, [pc, #208]	; (8000688 <scanColumn+0xec>)
 80005b6:	f000 fe65 	bl	8001284 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <scanColumn+0xf0>)
 80005c0:	801a      	strh	r2, [r3, #0]

		// Update history
		if(buttonState==GPIO_PIN_RESET){
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <scanColumn+0xf0>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10f      	bne.n	80005ea <scanColumn+0x4e>
			history[buttonValueFromRowColumn(r, currentColumn)]++;
 80005ca:	4b31      	ldr	r3, [pc, #196]	; (8000690 <scanColumn+0xf4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f863 	bl	800069c <buttonValueFromRowColumn>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a2e      	ldr	r2, [pc, #184]	; (8000694 <scanColumn+0xf8>)
 80005da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005de:	3201      	adds	r2, #1
 80005e0:	b291      	uxth	r1, r2
 80005e2:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <scanColumn+0xf8>)
 80005e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005e8:	e00a      	b.n	8000600 <scanColumn+0x64>
		} else {
			history[buttonValueFromRowColumn(r, currentColumn)] = 0;
 80005ea:	4b29      	ldr	r3, [pc, #164]	; (8000690 <scanColumn+0xf4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f853 	bl	800069c <buttonValueFromRowColumn>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a26      	ldr	r2, [pc, #152]	; (8000694 <scanColumn+0xf8>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		// If button pressing history reached the DEBOUNCING_THRESHOLD, print its value
		if(history[buttonValueFromRowColumn(r, currentColumn)]==DEBOUNCING_THRESHOLD) {
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <scanColumn+0xf4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f848 	bl	800069c <buttonValueFromRowColumn>
 800060c:	4603      	mov	r3, r0
 800060e:	4a21      	ldr	r2, [pc, #132]	; (8000694 <scanColumn+0xf8>)
 8000610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000614:	2b05      	cmp	r3, #5
 8000616:	d109      	bne.n	800062c <scanColumn+0x90>
			printButtonNumber(buttonValueFromRowColumn(r, currentColumn));
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <scanColumn+0xf4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f83c 	bl	800069c <buttonValueFromRowColumn>
 8000624:	4603      	mov	r3, r0
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f848 	bl	80006bc <printButtonNumber>
	for(int r=0; r<DIM_ROWS; r++){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b03      	cmp	r3, #3
 8000636:	ddb7      	ble.n	80005a8 <scanColumn+0xc>
		}
	}
	// Now turn down the currently active column
	HAL_GPIO_WritePin(GPIOC, cols[currentColumn], GPIO_PIN_RESET);
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <scanColumn+0xf4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a16      	ldr	r2, [pc, #88]	; (8000698 <scanColumn+0xfc>)
 800063e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000642:	b29b      	uxth	r3, r3
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	480f      	ldr	r0, [pc, #60]	; (8000688 <scanColumn+0xec>)
 800064a:	f000 fe33 	bl	80012b4 <HAL_GPIO_WritePin>
	// Pass to the next column
	currentColumn=(currentColumn+1)%DIM_COLS;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <scanColumn+0xf4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	425a      	negs	r2, r3
 8000656:	f003 0303 	and.w	r3, r3, #3
 800065a:	f002 0203 	and.w	r2, r2, #3
 800065e:	bf58      	it	pl
 8000660:	4253      	negpl	r3, r2
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <scanColumn+0xf4>)
 8000664:	6013      	str	r3, [r2, #0]
	// Turn on the next column so that at the next interrupt it is ready for the rows scan
	HAL_GPIO_WritePin(GPIOC, cols[currentColumn], GPIO_PIN_SET);
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <scanColumn+0xf4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <scanColumn+0xfc>)
 800066c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000670:	b29b      	uxth	r3, r3
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <scanColumn+0xec>)
 8000678:	f000 fe1c 	bl	80012b4 <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	40020800 	.word	0x40020800
 800068c:	200001b0 	.word	0x200001b0
 8000690:	200001ac 	.word	0x200001ac
 8000694:	2000018c 	.word	0x2000018c
 8000698:	20000010 	.word	0x20000010

0800069c <buttonValueFromRowColumn>:


int buttonValueFromRowColumn(int row, int column) {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	return row*DIM_COLS+column;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	009a      	lsls	r2, r3, #2
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	4413      	add	r3, r2
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <printButtonNumber>:

void printButtonNumber(int number){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	// to print from 0 to F I print 0-15 in hex
	str_buffer_len = snprintf(str_buffer, DIM_STRING, "Button %X pressed\n\r", number);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <printButtonNumber+0x34>)
 80006c8:	2164      	movs	r1, #100	; 0x64
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <printButtonNumber+0x38>)
 80006cc:	f002 faac 	bl	8002c28 <sniprintf>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <printButtonNumber+0x3c>)
 80006d4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, str_buffer, str_buffer_len, 50);
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <printButtonNumber+0x3c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	2332      	movs	r3, #50	; 0x32
 80006de:	4905      	ldr	r1, [pc, #20]	; (80006f4 <printButtonNumber+0x38>)
 80006e0:	4806      	ldr	r0, [pc, #24]	; (80006fc <printButtonNumber+0x40>)
 80006e2:	f001 ff2c 	bl	800253e <HAL_UART_Transmit>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	080035b0 	.word	0x080035b0
 80006f4:	20000124 	.word	0x20000124
 80006f8:	20000188 	.word	0x20000188
 80006fc:	200000e0 	.word	0x200000e0

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fab6 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f80c 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f8ee 	bl	80008ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000710:	f000 f8c2 	bl	8000898 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000714:	f000 f872 	bl	80007fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000718:	4801      	ldr	r0, [pc, #4]	; (8000720 <main+0x20>)
 800071a:	f001 facd 	bl	8001cb8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071e:	e7fe      	b.n	800071e <main+0x1e>
 8000720:	20000098 	.word	0x20000098

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f002 faac 	bl	8002c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd4>)
 8000772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000798:	2310      	movs	r3, #16
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800079c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fd9a 	bl	80012e8 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ba:	f000 f919 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fffc 	bl	80017d8 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007e6:	f000 f903 	bl	80009f0 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_TIM2_Init+0x98>)
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_TIM2_Init+0x98>)
 8000822:	f240 3247 	movw	r2, #839	; 0x347
 8000826:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_TIM2_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_TIM2_Init+0x98>)
 8000830:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000834:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_TIM2_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM2_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000842:	4814      	ldr	r0, [pc, #80]	; (8000894 <MX_TIM2_Init+0x98>)
 8000844:	f001 f9e8 	bl	8001c18 <HAL_TIM_Base_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800084e:	f000 f8cf 	bl	80009f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_TIM2_Init+0x98>)
 8000860:	f001 fb94 	bl	8001f8c <HAL_TIM_ConfigClockSource>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800086a:	f000 f8c1 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <MX_TIM2_Init+0x98>)
 800087c:	f001 fd90 	bl	80023a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000886:	f000 f8b3 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000098 	.word	0x20000098

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART2_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f001 fde8 	bl	80024a4 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f889 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000e0 	.word	0x200000e0
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a36      	ldr	r2, [pc, #216]	; (80009e4 <MX_GPIO_Init+0xf8>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0xf8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_GPIO_Init+0xf8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_GPIO_Init+0xf8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_GPIO_Init+0xfc>)
 8000978:	f000 fc9c 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000982:	481a      	ldr	r0, [pc, #104]	; (80009ec <MX_GPIO_Init+0x100>)
 8000984:	f000 fc96 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8000988:	f243 030c 	movw	r3, #12300	; 0x300c
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_GPIO_Init+0x100>)
 800099e:	f000 faed 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a2:	2320      	movs	r3, #32
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0xfc>)
 80009ba:	f000 fadf 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009be:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_GPIO_Init+0x100>)
 80009d8:	f000 fad0 	bl	8000f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020800 	.word	0x40020800

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a3a:	2007      	movs	r0, #7
 8000a3c:	f000 fa5c 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a5c:	d115      	bne.n	8000a8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_TIM_Base_MspInit+0x48>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <HAL_TIM_Base_MspInit+0x48>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_TIM_Base_MspInit+0x48>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	201c      	movs	r0, #28
 8000a80:	f000 fa45 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a84:	201c      	movs	r0, #28
 8000a86:	f000 fa5e 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_UART_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12b      	bne.n	8000b12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_UART_MspInit+0x88>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_UART_MspInit+0x88>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_UART_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_UART_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <HAL_UART_MspInit+0x88>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_UART_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af2:	230c      	movs	r3, #12
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b02:	2307      	movs	r3, #7
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_UART_MspInit+0x8c>)
 8000b0e:	f000 fa35 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f8d0 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM2_IRQHandler+0x10>)
 8000b82:	f001 f8fb 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000098 	.word	0x20000098

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f002 f86e 	bl	8002ca0 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20018000 	.word	0x20018000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	200001b4 	.word	0x200001b4
 8000bf8:	20000308 	.word	0x20000308

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 f82d 	bl	8002cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fd55 	bl	8000700 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c64:	08003620 	.word	0x08003620
  ldr r2, =_sbss
 8000c68:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c6c:	20000304 	.word	0x20000304

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f92b 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fea8 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f943 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf4:	f000 f90b 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000020 	.word	0x20000020
 8000d10:	20000028 	.word	0x20000028
 8000d14:	20000024 	.word	0x20000024

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000028 	.word	0x20000028
 8000d3c:	200001b8 	.word	0x200001b8

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200001b8 	.word	0x200001b8

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff29 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff3e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff31 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e159      	b.n	800124c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8148 	bne.w	8001246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d130      	bne.n	8001030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	f003 0201 	and.w	r2, r3, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b03      	cmp	r3, #3
 800103a:	d017      	beq.n	800106c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d123      	bne.n	80010c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	08da      	lsrs	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3208      	adds	r2, #8
 80010ba:	69b9      	ldr	r1, [r7, #24]
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0203 	and.w	r2, r3, #3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a2 	beq.w	8001246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b57      	ldr	r3, [pc, #348]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a56      	ldr	r2, [pc, #344]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b54      	ldr	r3, [pc, #336]	; (8001264 <HAL_GPIO_Init+0x2e8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800111e:	4a52      	ldr	r2, [pc, #328]	; (8001268 <HAL_GPIO_Init+0x2ec>)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a49      	ldr	r2, [pc, #292]	; (800126c <HAL_GPIO_Init+0x2f0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d019      	beq.n	800117e <HAL_GPIO_Init+0x202>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a48      	ldr	r2, [pc, #288]	; (8001270 <HAL_GPIO_Init+0x2f4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0x1fe>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a47      	ldr	r2, [pc, #284]	; (8001274 <HAL_GPIO_Init+0x2f8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00d      	beq.n	8001176 <HAL_GPIO_Init+0x1fa>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a46      	ldr	r2, [pc, #280]	; (8001278 <HAL_GPIO_Init+0x2fc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_Init+0x1f6>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a45      	ldr	r2, [pc, #276]	; (800127c <HAL_GPIO_Init+0x300>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_GPIO_Init+0x1f2>
 800116a:	2304      	movs	r3, #4
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x204>
 800116e:	2307      	movs	r3, #7
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x204>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x204>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x204>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x204>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	; (8001268 <HAL_GPIO_Init+0x2ec>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b38      	ldr	r3, [pc, #224]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a2f      	ldr	r2, [pc, #188]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_GPIO_Init+0x304>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001216:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <HAL_GPIO_Init+0x304>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_GPIO_Init+0x304>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_GPIO_Init+0x304>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f aea2 	bls.w	8000f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e001      	b.n	80012a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e267      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d075      	beq.n	80013f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001306:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b04      	cmp	r3, #4
 8001310:	d00c      	beq.n	800132c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001312:	4b85      	ldr	r3, [pc, #532]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800131a:	2b08      	cmp	r3, #8
 800131c:	d112      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4b82      	ldr	r3, [pc, #520]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800132a:	d10b      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4b7e      	ldr	r3, [pc, #504]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d05b      	beq.n	80013f0 <HAL_RCC_OscConfig+0x108>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d157      	bne.n	80013f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e242      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d106      	bne.n	800135c <HAL_RCC_OscConfig+0x74>
 800134e:	4b76      	ldr	r3, [pc, #472]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a75      	ldr	r2, [pc, #468]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x98>
 8001366:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a6f      	ldr	r2, [pc, #444]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 8001380:	4b69      	ldr	r3, [pc, #420]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a68      	ldr	r2, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcce 	bl	8000d40 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fcca 	bl	8000d40 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e207      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b5b      	ldr	r3, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0xc0>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fcba 	bl	8000d40 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fcb6 	bl	8000d40 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1f3      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	4b51      	ldr	r3, [pc, #324]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0xe8>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d063      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fe:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001412:	2b08      	cmp	r3, #8
 8001414:	d11c      	bne.n	8001450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d116      	bne.n	8001450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_RCC_OscConfig+0x152>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1c7      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4937      	ldr	r1, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	e03a      	b.n	80014c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	4b34      	ldr	r3, [pc, #208]	; (800152c <HAL_RCC_OscConfig+0x244>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff fc6f 	bl	8000d40 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fc6b 	bl	8000d40 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1a8      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4925      	ldr	r1, [pc, #148]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x244>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc4e 	bl	8000d40 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc4a 	bl	8000d40 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e187      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d036      	beq.n	8001540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d016      	beq.n	8001508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x248>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fc2e 	bl	8000d40 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc2a 	bl	8000d40 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e167      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80014fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x200>
 8001506:	e01b      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_RCC_OscConfig+0x248>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc17 	bl	8000d40 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	e00e      	b.n	8001534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fc13 	bl	8000d40 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d907      	bls.n	8001534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e150      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
 8001528:	40023800 	.word	0x40023800
 800152c:	42470000 	.word	0x42470000
 8001530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ea      	bne.n	8001516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8097 	beq.w	800167c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10f      	bne.n	800157e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a7c      	ldr	r2, [pc, #496]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b7a      	ldr	r3, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4b77      	ldr	r3, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x474>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d118      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158a:	4b74      	ldr	r3, [pc, #464]	; (800175c <HAL_RCC_OscConfig+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a73      	ldr	r2, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x474>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001596:	f7ff fbd3 	bl	8000d40 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159e:	f7ff fbcf 	bl	8000d40 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e10c      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x474>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x2ea>
 80015c4:	4b64      	ldr	r3, [pc, #400]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a63      	ldr	r2, [pc, #396]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	e01c      	b.n	800160c <HAL_RCC_OscConfig+0x324>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x30c>
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a5e      	ldr	r2, [pc, #376]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
 80015e6:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a5b      	ldr	r2, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x324>
 80015f4:	4b58      	ldr	r3, [pc, #352]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a57      	ldr	r2, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 0304 	bic.w	r3, r3, #4
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d015      	beq.n	8001640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fb94 	bl	8000d40 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fb90 	bl	8000d40 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0cb      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0ee      	beq.n	800161c <HAL_RCC_OscConfig+0x334>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fb7e 	bl	8000d40 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fb7a 	bl	8000d40 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0b5      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ee      	bne.n	8001648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001670:	4b39      	ldr	r3, [pc, #228]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a38      	ldr	r2, [pc, #224]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a1 	beq.w	80017c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d05c      	beq.n	800174c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d141      	bne.n	800171e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb4e 	bl	8000d40 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fb4a 	bl	8000d40 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e087      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	491b      	ldr	r1, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fb23 	bl	8000d40 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fb1f 	bl	8000d40 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e05c      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x416>
 800171c:	e054      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb0c 	bl	8000d40 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fb08 	bl	8000d40 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e045      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x444>
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e038      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000
 8001760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x4ec>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d028      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d121      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d11a      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001794:	4013      	ands	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800179a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800179c:	4293      	cmp	r3, r2
 800179e:	d111      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	3b01      	subs	r3, #1
 80017ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0cc      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d90c      	bls.n	8001814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b65      	ldr	r3, [pc, #404]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d044      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d119      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d003      	beq.n	8001896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	2b03      	cmp	r3, #3
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e067      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4934      	ldr	r1, [pc, #208]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c8:	f7ff fa3a 	bl	8000d40 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff fa36 	bl	8000d40 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e04f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d20c      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f821 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f99a 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
 8001998:	080035c4 	.word	0x080035c4
 800199c:	20000020 	.word	0x20000020
 80019a0:	20000024 	.word	0x20000024

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b094      	sub	sp, #80	; 0x50
 80019aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	647b      	str	r3, [r7, #68]	; 0x44
 80019b0:	2300      	movs	r3, #0
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b4:	2300      	movs	r3, #0
 80019b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019bc:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d00d      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x40>
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	f200 80e1 	bhi.w	8001b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x34>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x3a>
 80019d6:	e0db      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b73      	ldr	r3, [pc, #460]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019dc:	e0db      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <HAL_RCC_GetSysClockFreq+0x208>)
 80019e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019e2:	e0d8      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	2200      	movs	r2, #0
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
 8001a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a16:	4622      	mov	r2, r4
 8001a18:	462b      	mov	r3, r5
 8001a1a:	f04f 0000 	mov.w	r0, #0
 8001a1e:	f04f 0100 	mov.w	r1, #0
 8001a22:	0159      	lsls	r1, r3, #5
 8001a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a28:	0150      	lsls	r0, r2, #5
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4621      	mov	r1, r4
 8001a30:	1a51      	subs	r1, r2, r1
 8001a32:	6139      	str	r1, [r7, #16]
 8001a34:	4629      	mov	r1, r5
 8001a36:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a48:	4659      	mov	r1, fp
 8001a4a:	018b      	lsls	r3, r1, #6
 8001a4c:	4651      	mov	r1, sl
 8001a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a52:	4651      	mov	r1, sl
 8001a54:	018a      	lsls	r2, r1, #6
 8001a56:	4651      	mov	r1, sl
 8001a58:	ebb2 0801 	subs.w	r8, r2, r1
 8001a5c:	4659      	mov	r1, fp
 8001a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a76:	4690      	mov	r8, r2
 8001a78:	4699      	mov	r9, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	eb18 0303 	adds.w	r3, r8, r3
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	462b      	mov	r3, r5
 8001a84:	eb49 0303 	adc.w	r3, r9, r3
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a96:	4629      	mov	r1, r5
 8001a98:	024b      	lsls	r3, r1, #9
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	024a      	lsls	r2, r1, #9
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aaa:	2200      	movs	r2, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ab4:	f7fe fbe4 	bl	8000280 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ac0:	e058      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	4611      	mov	r1, r2
 8001ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ad2:	623b      	str	r3, [r7, #32]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001adc:	4642      	mov	r2, r8
 8001ade:	464b      	mov	r3, r9
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	0159      	lsls	r1, r3, #5
 8001aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aee:	0150      	lsls	r0, r2, #5
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4641      	mov	r1, r8
 8001af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001afa:	4649      	mov	r1, r9
 8001afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b14:	ebb2 040a 	subs.w	r4, r2, sl
 8001b18:	eb63 050b 	sbc.w	r5, r3, fp
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	00eb      	lsls	r3, r5, #3
 8001b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b2a:	00e2      	lsls	r2, r4, #3
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	461d      	mov	r5, r3
 8001b30:	4643      	mov	r3, r8
 8001b32:	18e3      	adds	r3, r4, r3
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	464b      	mov	r3, r9
 8001b38:	eb45 0303 	adc.w	r3, r5, r3
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	028b      	lsls	r3, r1, #10
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b54:	4621      	mov	r1, r4
 8001b56:	028a      	lsls	r2, r1, #10
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	61fa      	str	r2, [r7, #28]
 8001b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b68:	f7fe fb8a 	bl	8000280 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3750      	adds	r7, #80	; 0x50
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000020 	.word	0x20000020

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a9b      	lsrs	r3, r3, #10
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	080035d4 	.word	0x080035d4

08001bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bf4:	f7ff ffdc 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0b5b      	lsrs	r3, r3, #13
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	080035d4 	.word	0x080035d4

08001c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e041      	b.n	8001cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7fe ff04 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f000 fa88 	bl	800216c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d001      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e044      	b.n	8001d5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d018      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d013      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <HAL_TIM_Base_Start_IT+0xb4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00e      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d004      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x6c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d111      	bne.n	8001d48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d010      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	e007      	b.n	8001d58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	40014000 	.word	0x40014000

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f9b5 	bl	800212e <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f9a7 	bl	800211a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f9b8 	bl	8002142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f98b 	bl	800212e <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f97d 	bl	800211a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f98e 	bl	8002142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0208 	mvn.w	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f961 	bl	800212e <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f953 	bl	800211a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f964 	bl	8002142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0210 	mvn.w	r2, #16
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f937 	bl	800212e <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f929 	bl	800211a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f93a 	bl	8002142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0201 	mvn.w	r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fb3e 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fab2 	bl	8002490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8ff 	bl	8002156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0220 	mvn.w	r2, #32
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fa7c 	bl	800247c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0b4      	b.n	8002112 <HAL_TIM_ConfigClockSource+0x186>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe0:	d03e      	beq.n	8002060 <HAL_TIM_ConfigClockSource+0xd4>
 8001fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe6:	f200 8087 	bhi.w	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fee:	f000 8086 	beq.w	80020fe <HAL_TIM_ConfigClockSource+0x172>
 8001ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff6:	d87f      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ff8:	2b70      	cmp	r3, #112	; 0x70
 8001ffa:	d01a      	beq.n	8002032 <HAL_TIM_ConfigClockSource+0xa6>
 8001ffc:	2b70      	cmp	r3, #112	; 0x70
 8001ffe:	d87b      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002000:	2b60      	cmp	r3, #96	; 0x60
 8002002:	d050      	beq.n	80020a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002004:	2b60      	cmp	r3, #96	; 0x60
 8002006:	d877      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002008:	2b50      	cmp	r3, #80	; 0x50
 800200a:	d03c      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0xfa>
 800200c:	2b50      	cmp	r3, #80	; 0x50
 800200e:	d873      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d058      	beq.n	80020c6 <HAL_TIM_ConfigClockSource+0x13a>
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d86f      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002018:	2b30      	cmp	r3, #48	; 0x30
 800201a:	d064      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x15a>
 800201c:	2b30      	cmp	r3, #48	; 0x30
 800201e:	d86b      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002020:	2b20      	cmp	r3, #32
 8002022:	d060      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002024:	2b20      	cmp	r3, #32
 8002026:	d867      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d05c      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x15a>
 800202c:	2b10      	cmp	r3, #16
 800202e:	d05a      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002030:	e062      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f000 f98d 	bl	8002360 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	609a      	str	r2, [r3, #8]
      break;
 800205e:	e04f      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f000 f976 	bl	8002360 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002082:	609a      	str	r2, [r3, #8]
      break;
 8002084:	e03c      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	461a      	mov	r2, r3
 8002094:	f000 f8ea 	bl	800226c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2150      	movs	r1, #80	; 0x50
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f943 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 80020a4:	e02c      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6859      	ldr	r1, [r3, #4]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f000 f909 	bl	80022ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2160      	movs	r1, #96	; 0x60
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f933 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 80020c4:	e01c      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f000 f8ca 	bl	800226c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2140      	movs	r1, #64	; 0x40
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f923 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 80020e4:	e00c      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f000 f91a 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 80020f6:	e003      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      break;
 80020fc:	e000      	b.n	8002100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a34      	ldr	r2, [pc, #208]	; (8002250 <TIM_Base_SetConfig+0xe4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00f      	beq.n	80021a4 <TIM_Base_SetConfig+0x38>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218a:	d00b      	beq.n	80021a4 <TIM_Base_SetConfig+0x38>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <TIM_Base_SetConfig+0xe8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <TIM_Base_SetConfig+0x38>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a30      	ldr	r2, [pc, #192]	; (8002258 <TIM_Base_SetConfig+0xec>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0x38>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a2f      	ldr	r2, [pc, #188]	; (800225c <TIM_Base_SetConfig+0xf0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d108      	bne.n	80021b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a25      	ldr	r2, [pc, #148]	; (8002250 <TIM_Base_SetConfig+0xe4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01b      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d017      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a22      	ldr	r2, [pc, #136]	; (8002254 <TIM_Base_SetConfig+0xe8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a21      	ldr	r2, [pc, #132]	; (8002258 <TIM_Base_SetConfig+0xec>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00f      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a20      	ldr	r2, [pc, #128]	; (800225c <TIM_Base_SetConfig+0xf0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <TIM_Base_SetConfig+0xf4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <TIM_Base_SetConfig+0xf8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <TIM_Base_SetConfig+0xfc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d108      	bne.n	8002208 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <TIM_Base_SetConfig+0xe4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d103      	bne.n	800223c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	615a      	str	r2, [r3, #20]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	40000400 	.word	0x40000400
 8002258:	40000800 	.word	0x40000800
 800225c:	40000c00 	.word	0x40000c00
 8002260:	40014000 	.word	0x40014000
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800

0800226c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	f023 0201 	bic.w	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f023 030a 	bic.w	r3, r3, #10
 80022a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	621a      	str	r2, [r3, #32]
}
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b087      	sub	sp, #28
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f023 0210 	bic.w	r2, r3, #16
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	031b      	lsls	r3, r3, #12
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	621a      	str	r2, [r3, #32]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	f043 0307 	orr.w	r3, r3, #7
 800234c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	609a      	str	r2, [r3, #8]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800237a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	021a      	lsls	r2, r3, #8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	431a      	orrs	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	609a      	str	r2, [r3, #8]
}
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e050      	b.n	800245a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d018      	beq.n	800242e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002404:	d013      	beq.n	800242e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a16      	ldr	r2, [pc, #88]	; (8002470 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a15      	ldr	r2, [pc, #84]	; (8002474 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10c      	bne.n	8002448 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4313      	orrs	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40010000 	.word	0x40010000
 800246c:	40000400 	.word	0x40000400
 8002470:	40000800 	.word	0x40000800
 8002474:	40000c00 	.word	0x40000c00
 8002478:	40014000 	.word	0x40014000

0800247c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e03f      	b.n	8002536 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fae4 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f929 	bl	8002740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800251c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b08a      	sub	sp, #40	; 0x28
 8002542:	af02      	add	r7, sp, #8
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	d17c      	bne.n	8002658 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_Transmit+0x2c>
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e075      	b.n	800265a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_UART_Transmit+0x3e>
 8002578:	2302      	movs	r3, #2
 800257a:	e06e      	b.n	800265a <HAL_UART_Transmit+0x11c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2221      	movs	r2, #33	; 0x21
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002592:	f7fe fbd5 	bl	8000d40 <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	88fa      	ldrh	r2, [r7, #6]
 800259c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ac:	d108      	bne.n	80025c0 <HAL_UART_Transmit+0x82>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	e003      	b.n	80025c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025d0:	e02a      	b.n	8002628 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f840 	bl	8002662 <UART_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e036      	b.n	800265a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10b      	bne.n	800260a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3302      	adds	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e007      	b.n	800261a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3301      	adds	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1cf      	bne.n	80025d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2200      	movs	r2, #0
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f810 	bl	8002662 <UART_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e006      	b.n	800265a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b090      	sub	sp, #64	; 0x40
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002672:	e050      	b.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800267a:	d04c      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800267c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <UART_WaitOnFlagUntilTimeout+0x30>
 8002682:	f7fe fb5d 	bl	8000d40 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800268e:	429a      	cmp	r2, r3
 8002690:	d241      	bcs.n	8002716 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	e853 3f00 	ldrex	r3, [r3]
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026b2:	637a      	str	r2, [r7, #52]	; 0x34
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ba:	e841 2300 	strex	r3, r2, [r1]
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1e5      	bne.n	8002692 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3314      	adds	r3, #20
 80026cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	e853 3f00 	ldrex	r3, [r3]
 80026d4:	613b      	str	r3, [r7, #16]
   return(result);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3314      	adds	r3, #20
 80026e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e6:	623a      	str	r2, [r7, #32]
 80026e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ea:	69f9      	ldr	r1, [r7, #28]
 80026ec:	6a3a      	ldr	r2, [r7, #32]
 80026ee:	e841 2300 	strex	r3, r2, [r1]
 80026f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1e5      	bne.n	80026c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e00f      	b.n	8002736 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4013      	ands	r3, r2
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	429a      	cmp	r2, r3
 8002732:	d09f      	beq.n	8002674 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3740      	adds	r7, #64	; 0x40
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002744:	b0c0      	sub	sp, #256	; 0x100
 8002746:	af00      	add	r7, sp, #0
 8002748:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	68d9      	ldr	r1, [r3, #12]
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	ea40 0301 	orr.w	r3, r0, r1
 8002768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	431a      	orrs	r2, r3
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	431a      	orrs	r2, r3
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002798:	f021 010c 	bic.w	r1, r1, #12
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027a6:	430b      	orrs	r3, r1
 80027a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ba:	6999      	ldr	r1, [r3, #24]
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	ea40 0301 	orr.w	r3, r0, r1
 80027c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <UART_SetConfig+0x2cc>)
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d005      	beq.n	80027e0 <UART_SetConfig+0xa0>
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <UART_SetConfig+0x2d0>)
 80027dc:	429a      	cmp	r2, r3
 80027de:	d104      	bne.n	80027ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027e0:	f7ff fa06 	bl	8001bf0 <HAL_RCC_GetPCLK2Freq>
 80027e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027e8:	e003      	b.n	80027f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ea:	f7ff f9ed 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 80027ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fc:	f040 810c 	bne.w	8002a18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002804:	2200      	movs	r2, #0
 8002806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800280a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800280e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	1891      	adds	r1, r2, r2
 8002818:	65b9      	str	r1, [r7, #88]	; 0x58
 800281a:	415b      	adcs	r3, r3
 800281c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800281e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002822:	4621      	mov	r1, r4
 8002824:	eb12 0801 	adds.w	r8, r2, r1
 8002828:	4629      	mov	r1, r5
 800282a:	eb43 0901 	adc.w	r9, r3, r1
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800283a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800283e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002842:	4690      	mov	r8, r2
 8002844:	4699      	mov	r9, r3
 8002846:	4623      	mov	r3, r4
 8002848:	eb18 0303 	adds.w	r3, r8, r3
 800284c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002850:	462b      	mov	r3, r5
 8002852:	eb49 0303 	adc.w	r3, r9, r3
 8002856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002866:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800286a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800286e:	460b      	mov	r3, r1
 8002870:	18db      	adds	r3, r3, r3
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
 8002874:	4613      	mov	r3, r2
 8002876:	eb42 0303 	adc.w	r3, r2, r3
 800287a:	657b      	str	r3, [r7, #84]	; 0x54
 800287c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002880:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002884:	f7fd fcfc 	bl	8000280 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <UART_SetConfig+0x2d4>)
 800288e:	fba3 2302 	umull	r2, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	011c      	lsls	r4, r3, #4
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80028b0:	415b      	adcs	r3, r3
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028b8:	4641      	mov	r1, r8
 80028ba:	eb12 0a01 	adds.w	sl, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb43 0b01 	adc.w	fp, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d8:	4692      	mov	sl, r2
 80028da:	469b      	mov	fp, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	eb1a 0303 	adds.w	r3, sl, r3
 80028e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028e6:	464b      	mov	r3, r9
 80028e8:	eb4b 0303 	adc.w	r3, fp, r3
 80028ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002900:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002904:	460b      	mov	r3, r1
 8002906:	18db      	adds	r3, r3, r3
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
 800290a:	4613      	mov	r3, r2
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	647b      	str	r3, [r7, #68]	; 0x44
 8002912:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002916:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800291a:	f7fd fcb1 	bl	8000280 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4611      	mov	r1, r2
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <UART_SetConfig+0x2d4>)
 8002926:	fba3 2301 	umull	r2, r3, r3, r1
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2264      	movs	r2, #100	; 0x64
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <UART_SetConfig+0x2d4>)
 800293c:	fba3 2302 	umull	r2, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002948:	441c      	add	r4, r3
 800294a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800294e:	2200      	movs	r2, #0
 8002950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002954:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002958:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	63b9      	str	r1, [r7, #56]	; 0x38
 8002964:	415b      	adcs	r3, r3
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800296c:	4641      	mov	r1, r8
 800296e:	1851      	adds	r1, r2, r1
 8002970:	6339      	str	r1, [r7, #48]	; 0x30
 8002972:	4649      	mov	r1, r9
 8002974:	414b      	adcs	r3, r1
 8002976:	637b      	str	r3, [r7, #52]	; 0x34
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002984:	4659      	mov	r1, fp
 8002986:	00cb      	lsls	r3, r1, #3
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298e:	4651      	mov	r1, sl
 8002990:	00ca      	lsls	r2, r1, #3
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	4603      	mov	r3, r0
 8002998:	4642      	mov	r2, r8
 800299a:	189b      	adds	r3, r3, r2
 800299c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029a0:	464b      	mov	r3, r9
 80029a2:	460a      	mov	r2, r1
 80029a4:	eb42 0303 	adc.w	r3, r2, r3
 80029a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029c0:	460b      	mov	r3, r1
 80029c2:	18db      	adds	r3, r3, r3
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c6:	4613      	mov	r3, r2
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029d6:	f7fd fc53 	bl	8000280 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <UART_SetConfig+0x2d4>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	; 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	3332      	adds	r3, #50	; 0x32
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <UART_SetConfig+0x2d4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4422      	add	r2, r4
 8002a06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a08:	e106      	b.n	8002c18 <UART_SetConfig+0x4d8>
 8002a0a:	bf00      	nop
 8002a0c:	40011000 	.word	0x40011000
 8002a10:	40011400 	.word	0x40011400
 8002a14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a2a:	4642      	mov	r2, r8
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	1891      	adds	r1, r2, r2
 8002a30:	6239      	str	r1, [r7, #32]
 8002a32:	415b      	adcs	r3, r3
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	1854      	adds	r4, r2, r1
 8002a3e:	4649      	mov	r1, r9
 8002a40:	eb43 0501 	adc.w	r5, r3, r1
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	00eb      	lsls	r3, r5, #3
 8002a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a52:	00e2      	lsls	r2, r4, #3
 8002a54:	4614      	mov	r4, r2
 8002a56:	461d      	mov	r5, r3
 8002a58:	4643      	mov	r3, r8
 8002a5a:	18e3      	adds	r3, r4, r3
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a60:	464b      	mov	r3, r9
 8002a62:	eb45 0303 	adc.w	r3, r5, r3
 8002a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a86:	4629      	mov	r1, r5
 8002a88:	008b      	lsls	r3, r1, #2
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a90:	4621      	mov	r1, r4
 8002a92:	008a      	lsls	r2, r1, #2
 8002a94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a98:	f7fd fbf2 	bl	8000280 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	011c      	lsls	r4, r3, #4
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ab4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ab8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	61b9      	str	r1, [r7, #24]
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002acc:	4641      	mov	r1, r8
 8002ace:	1851      	adds	r1, r2, r1
 8002ad0:	6139      	str	r1, [r7, #16]
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	414b      	adcs	r3, r1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae4:	4659      	mov	r1, fp
 8002ae6:	00cb      	lsls	r3, r1, #3
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aee:	4651      	mov	r1, sl
 8002af0:	00ca      	lsls	r2, r1, #3
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	4642      	mov	r2, r8
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b00:	464b      	mov	r3, r9
 8002b02:	460a      	mov	r2, r1
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b24:	4649      	mov	r1, r9
 8002b26:	008b      	lsls	r3, r1, #2
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b2e:	4641      	mov	r1, r8
 8002b30:	008a      	lsls	r2, r1, #2
 8002b32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b36:	f7fd fba3 	bl	8000280 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002b42:	fba3 2301 	umull	r2, r3, r3, r1
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2264      	movs	r2, #100	; 0x64
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	1acb      	subs	r3, r1, r3
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	3332      	adds	r3, #50	; 0x32
 8002b54:	4a33      	ldr	r2, [pc, #204]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b60:	441c      	add	r4, r3
 8002b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b66:	2200      	movs	r2, #0
 8002b68:	673b      	str	r3, [r7, #112]	; 0x70
 8002b6a:	677a      	str	r2, [r7, #116]	; 0x74
 8002b6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	1891      	adds	r1, r2, r2
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	415b      	adcs	r3, r3
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b80:	4641      	mov	r1, r8
 8002b82:	1851      	adds	r1, r2, r1
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	4649      	mov	r1, r9
 8002b88:	414b      	adcs	r3, r1
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b98:	4659      	mov	r1, fp
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4642      	mov	r2, r8
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	eb42 0303 	adc.w	r3, r2, r3
 8002bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8002bc6:	667a      	str	r2, [r7, #100]	; 0x64
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bd4:	4649      	mov	r1, r9
 8002bd6:	008b      	lsls	r3, r1, #2
 8002bd8:	4641      	mov	r1, r8
 8002bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bde:	4641      	mov	r1, r8
 8002be0:	008a      	lsls	r2, r1, #2
 8002be2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002be6:	f7fd fb4b 	bl	8000280 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2164      	movs	r1, #100	; 0x64
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	3332      	adds	r3, #50	; 0x32
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <UART_SetConfig+0x4e4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4422      	add	r2, r4
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c24:	51eb851f 	.word	0x51eb851f

08002c28 <sniprintf>:
 8002c28:	b40c      	push	{r2, r3}
 8002c2a:	b530      	push	{r4, r5, lr}
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <sniprintf+0x64>)
 8002c2e:	1e0c      	subs	r4, r1, #0
 8002c30:	681d      	ldr	r5, [r3, #0]
 8002c32:	b09d      	sub	sp, #116	; 0x74
 8002c34:	da08      	bge.n	8002c48 <sniprintf+0x20>
 8002c36:	238b      	movs	r3, #139	; 0x8b
 8002c38:	602b      	str	r3, [r5, #0]
 8002c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c3e:	b01d      	add	sp, #116	; 0x74
 8002c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c44:	b002      	add	sp, #8
 8002c46:	4770      	bx	lr
 8002c48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002c4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002c50:	bf14      	ite	ne
 8002c52:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002c56:	4623      	moveq	r3, r4
 8002c58:	9304      	str	r3, [sp, #16]
 8002c5a:	9307      	str	r3, [sp, #28]
 8002c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c60:	9002      	str	r0, [sp, #8]
 8002c62:	9006      	str	r0, [sp, #24]
 8002c64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002c68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002c6a:	ab21      	add	r3, sp, #132	; 0x84
 8002c6c:	a902      	add	r1, sp, #8
 8002c6e:	4628      	mov	r0, r5
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	f000 f89b 	bl	8002dac <_svfiprintf_r>
 8002c76:	1c43      	adds	r3, r0, #1
 8002c78:	bfbc      	itt	lt
 8002c7a:	238b      	movlt	r3, #139	; 0x8b
 8002c7c:	602b      	strlt	r3, [r5, #0]
 8002c7e:	2c00      	cmp	r4, #0
 8002c80:	d0dd      	beq.n	8002c3e <sniprintf+0x16>
 8002c82:	9b02      	ldr	r3, [sp, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e7d9      	b.n	8002c3e <sniprintf+0x16>
 8002c8a:	bf00      	nop
 8002c8c:	20000078 	.word	0x20000078

08002c90 <memset>:
 8002c90:	4402      	add	r2, r0
 8002c92:	4603      	mov	r3, r0
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d100      	bne.n	8002c9a <memset+0xa>
 8002c98:	4770      	bx	lr
 8002c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9e:	e7f9      	b.n	8002c94 <memset+0x4>

08002ca0 <__errno>:
 8002ca0:	4b01      	ldr	r3, [pc, #4]	; (8002ca8 <__errno+0x8>)
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000078 	.word	0x20000078

08002cac <__libc_init_array>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	4d0d      	ldr	r5, [pc, #52]	; (8002ce4 <__libc_init_array+0x38>)
 8002cb0:	4c0d      	ldr	r4, [pc, #52]	; (8002ce8 <__libc_init_array+0x3c>)
 8002cb2:	1b64      	subs	r4, r4, r5
 8002cb4:	10a4      	asrs	r4, r4, #2
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	42a6      	cmp	r6, r4
 8002cba:	d109      	bne.n	8002cd0 <__libc_init_array+0x24>
 8002cbc:	4d0b      	ldr	r5, [pc, #44]	; (8002cec <__libc_init_array+0x40>)
 8002cbe:	4c0c      	ldr	r4, [pc, #48]	; (8002cf0 <__libc_init_array+0x44>)
 8002cc0:	f000 fc6a 	bl	8003598 <_init>
 8002cc4:	1b64      	subs	r4, r4, r5
 8002cc6:	10a4      	asrs	r4, r4, #2
 8002cc8:	2600      	movs	r6, #0
 8002cca:	42a6      	cmp	r6, r4
 8002ccc:	d105      	bne.n	8002cda <__libc_init_array+0x2e>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd4:	4798      	blx	r3
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	e7ee      	b.n	8002cb8 <__libc_init_array+0xc>
 8002cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cde:	4798      	blx	r3
 8002ce0:	3601      	adds	r6, #1
 8002ce2:	e7f2      	b.n	8002cca <__libc_init_array+0x1e>
 8002ce4:	08003618 	.word	0x08003618
 8002ce8:	08003618 	.word	0x08003618
 8002cec:	08003618 	.word	0x08003618
 8002cf0:	0800361c 	.word	0x0800361c

08002cf4 <__retarget_lock_acquire_recursive>:
 8002cf4:	4770      	bx	lr

08002cf6 <__retarget_lock_release_recursive>:
 8002cf6:	4770      	bx	lr

08002cf8 <__ssputs_r>:
 8002cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	688e      	ldr	r6, [r1, #8]
 8002cfe:	461f      	mov	r7, r3
 8002d00:	42be      	cmp	r6, r7
 8002d02:	680b      	ldr	r3, [r1, #0]
 8002d04:	4682      	mov	sl, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	4690      	mov	r8, r2
 8002d0a:	d82c      	bhi.n	8002d66 <__ssputs_r+0x6e>
 8002d0c:	898a      	ldrh	r2, [r1, #12]
 8002d0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d12:	d026      	beq.n	8002d62 <__ssputs_r+0x6a>
 8002d14:	6965      	ldr	r5, [r4, #20]
 8002d16:	6909      	ldr	r1, [r1, #16]
 8002d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d1c:	eba3 0901 	sub.w	r9, r3, r1
 8002d20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d24:	1c7b      	adds	r3, r7, #1
 8002d26:	444b      	add	r3, r9
 8002d28:	106d      	asrs	r5, r5, #1
 8002d2a:	429d      	cmp	r5, r3
 8002d2c:	bf38      	it	cc
 8002d2e:	461d      	movcc	r5, r3
 8002d30:	0553      	lsls	r3, r2, #21
 8002d32:	d527      	bpl.n	8002d84 <__ssputs_r+0x8c>
 8002d34:	4629      	mov	r1, r5
 8002d36:	f000 f957 	bl	8002fe8 <_malloc_r>
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	b360      	cbz	r0, 8002d98 <__ssputs_r+0xa0>
 8002d3e:	6921      	ldr	r1, [r4, #16]
 8002d40:	464a      	mov	r2, r9
 8002d42:	f000 fbc7 	bl	80034d4 <memcpy>
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d50:	81a3      	strh	r3, [r4, #12]
 8002d52:	6126      	str	r6, [r4, #16]
 8002d54:	6165      	str	r5, [r4, #20]
 8002d56:	444e      	add	r6, r9
 8002d58:	eba5 0509 	sub.w	r5, r5, r9
 8002d5c:	6026      	str	r6, [r4, #0]
 8002d5e:	60a5      	str	r5, [r4, #8]
 8002d60:	463e      	mov	r6, r7
 8002d62:	42be      	cmp	r6, r7
 8002d64:	d900      	bls.n	8002d68 <__ssputs_r+0x70>
 8002d66:	463e      	mov	r6, r7
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	4632      	mov	r2, r6
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	f000 fb86 	bl	800347e <memmove>
 8002d72:	68a3      	ldr	r3, [r4, #8]
 8002d74:	1b9b      	subs	r3, r3, r6
 8002d76:	60a3      	str	r3, [r4, #8]
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	4433      	add	r3, r6
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	2000      	movs	r0, #0
 8002d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d84:	462a      	mov	r2, r5
 8002d86:	f000 fb4b 	bl	8003420 <_realloc_r>
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d1e0      	bne.n	8002d52 <__ssputs_r+0x5a>
 8002d90:	6921      	ldr	r1, [r4, #16]
 8002d92:	4650      	mov	r0, sl
 8002d94:	f000 fbac 	bl	80034f0 <_free_r>
 8002d98:	230c      	movs	r3, #12
 8002d9a:	f8ca 3000 	str.w	r3, [sl]
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002daa:	e7e9      	b.n	8002d80 <__ssputs_r+0x88>

08002dac <_svfiprintf_r>:
 8002dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	4698      	mov	r8, r3
 8002db2:	898b      	ldrh	r3, [r1, #12]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	b09d      	sub	sp, #116	; 0x74
 8002db8:	4607      	mov	r7, r0
 8002dba:	460d      	mov	r5, r1
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	d50e      	bpl.n	8002dde <_svfiprintf_r+0x32>
 8002dc0:	690b      	ldr	r3, [r1, #16]
 8002dc2:	b963      	cbnz	r3, 8002dde <_svfiprintf_r+0x32>
 8002dc4:	2140      	movs	r1, #64	; 0x40
 8002dc6:	f000 f90f 	bl	8002fe8 <_malloc_r>
 8002dca:	6028      	str	r0, [r5, #0]
 8002dcc:	6128      	str	r0, [r5, #16]
 8002dce:	b920      	cbnz	r0, 8002dda <_svfiprintf_r+0x2e>
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd8:	e0d0      	b.n	8002f7c <_svfiprintf_r+0x1d0>
 8002dda:	2340      	movs	r3, #64	; 0x40
 8002ddc:	616b      	str	r3, [r5, #20]
 8002dde:	2300      	movs	r3, #0
 8002de0:	9309      	str	r3, [sp, #36]	; 0x24
 8002de2:	2320      	movs	r3, #32
 8002de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dec:	2330      	movs	r3, #48	; 0x30
 8002dee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f94 <_svfiprintf_r+0x1e8>
 8002df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002df6:	f04f 0901 	mov.w	r9, #1
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	469a      	mov	sl, r3
 8002dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e02:	b10a      	cbz	r2, 8002e08 <_svfiprintf_r+0x5c>
 8002e04:	2a25      	cmp	r2, #37	; 0x25
 8002e06:	d1f9      	bne.n	8002dfc <_svfiprintf_r+0x50>
 8002e08:	ebba 0b04 	subs.w	fp, sl, r4
 8002e0c:	d00b      	beq.n	8002e26 <_svfiprintf_r+0x7a>
 8002e0e:	465b      	mov	r3, fp
 8002e10:	4622      	mov	r2, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	4638      	mov	r0, r7
 8002e16:	f7ff ff6f 	bl	8002cf8 <__ssputs_r>
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	f000 80a9 	beq.w	8002f72 <_svfiprintf_r+0x1c6>
 8002e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e22:	445a      	add	r2, fp
 8002e24:	9209      	str	r2, [sp, #36]	; 0x24
 8002e26:	f89a 3000 	ldrb.w	r3, [sl]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80a1 	beq.w	8002f72 <_svfiprintf_r+0x1c6>
 8002e30:	2300      	movs	r3, #0
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e3a:	f10a 0a01 	add.w	sl, sl, #1
 8002e3e:	9304      	str	r3, [sp, #16]
 8002e40:	9307      	str	r3, [sp, #28]
 8002e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e46:	931a      	str	r3, [sp, #104]	; 0x68
 8002e48:	4654      	mov	r4, sl
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e50:	4850      	ldr	r0, [pc, #320]	; (8002f94 <_svfiprintf_r+0x1e8>)
 8002e52:	f7fd f9c5 	bl	80001e0 <memchr>
 8002e56:	9a04      	ldr	r2, [sp, #16]
 8002e58:	b9d8      	cbnz	r0, 8002e92 <_svfiprintf_r+0xe6>
 8002e5a:	06d0      	lsls	r0, r2, #27
 8002e5c:	bf44      	itt	mi
 8002e5e:	2320      	movmi	r3, #32
 8002e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e64:	0711      	lsls	r1, r2, #28
 8002e66:	bf44      	itt	mi
 8002e68:	232b      	movmi	r3, #43	; 0x2b
 8002e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e72:	2b2a      	cmp	r3, #42	; 0x2a
 8002e74:	d015      	beq.n	8002ea2 <_svfiprintf_r+0xf6>
 8002e76:	9a07      	ldr	r2, [sp, #28]
 8002e78:	4654      	mov	r4, sl
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f04f 0c0a 	mov.w	ip, #10
 8002e80:	4621      	mov	r1, r4
 8002e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e86:	3b30      	subs	r3, #48	; 0x30
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	d94d      	bls.n	8002f28 <_svfiprintf_r+0x17c>
 8002e8c:	b1b0      	cbz	r0, 8002ebc <_svfiprintf_r+0x110>
 8002e8e:	9207      	str	r2, [sp, #28]
 8002e90:	e014      	b.n	8002ebc <_svfiprintf_r+0x110>
 8002e92:	eba0 0308 	sub.w	r3, r0, r8
 8002e96:	fa09 f303 	lsl.w	r3, r9, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	9304      	str	r3, [sp, #16]
 8002e9e:	46a2      	mov	sl, r4
 8002ea0:	e7d2      	b.n	8002e48 <_svfiprintf_r+0x9c>
 8002ea2:	9b03      	ldr	r3, [sp, #12]
 8002ea4:	1d19      	adds	r1, r3, #4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	9103      	str	r1, [sp, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bfbb      	ittet	lt
 8002eae:	425b      	neglt	r3, r3
 8002eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8002eb4:	9307      	strge	r3, [sp, #28]
 8002eb6:	9307      	strlt	r3, [sp, #28]
 8002eb8:	bfb8      	it	lt
 8002eba:	9204      	strlt	r2, [sp, #16]
 8002ebc:	7823      	ldrb	r3, [r4, #0]
 8002ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8002ec0:	d10c      	bne.n	8002edc <_svfiprintf_r+0x130>
 8002ec2:	7863      	ldrb	r3, [r4, #1]
 8002ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec6:	d134      	bne.n	8002f32 <_svfiprintf_r+0x186>
 8002ec8:	9b03      	ldr	r3, [sp, #12]
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	9203      	str	r2, [sp, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bfb8      	it	lt
 8002ed4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ed8:	3402      	adds	r4, #2
 8002eda:	9305      	str	r3, [sp, #20]
 8002edc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002fa4 <_svfiprintf_r+0x1f8>
 8002ee0:	7821      	ldrb	r1, [r4, #0]
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	4650      	mov	r0, sl
 8002ee6:	f7fd f97b 	bl	80001e0 <memchr>
 8002eea:	b138      	cbz	r0, 8002efc <_svfiprintf_r+0x150>
 8002eec:	9b04      	ldr	r3, [sp, #16]
 8002eee:	eba0 000a 	sub.w	r0, r0, sl
 8002ef2:	2240      	movs	r2, #64	; 0x40
 8002ef4:	4082      	lsls	r2, r0
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	3401      	adds	r4, #1
 8002efa:	9304      	str	r3, [sp, #16]
 8002efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f00:	4825      	ldr	r0, [pc, #148]	; (8002f98 <_svfiprintf_r+0x1ec>)
 8002f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f06:	2206      	movs	r2, #6
 8002f08:	f7fd f96a 	bl	80001e0 <memchr>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d038      	beq.n	8002f82 <_svfiprintf_r+0x1d6>
 8002f10:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <_svfiprintf_r+0x1f0>)
 8002f12:	bb1b      	cbnz	r3, 8002f5c <_svfiprintf_r+0x1b0>
 8002f14:	9b03      	ldr	r3, [sp, #12]
 8002f16:	3307      	adds	r3, #7
 8002f18:	f023 0307 	bic.w	r3, r3, #7
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	9303      	str	r3, [sp, #12]
 8002f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f22:	4433      	add	r3, r6
 8002f24:	9309      	str	r3, [sp, #36]	; 0x24
 8002f26:	e768      	b.n	8002dfa <_svfiprintf_r+0x4e>
 8002f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f2c:	460c      	mov	r4, r1
 8002f2e:	2001      	movs	r0, #1
 8002f30:	e7a6      	b.n	8002e80 <_svfiprintf_r+0xd4>
 8002f32:	2300      	movs	r3, #0
 8002f34:	3401      	adds	r4, #1
 8002f36:	9305      	str	r3, [sp, #20]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f04f 0c0a 	mov.w	ip, #10
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f44:	3a30      	subs	r2, #48	; 0x30
 8002f46:	2a09      	cmp	r2, #9
 8002f48:	d903      	bls.n	8002f52 <_svfiprintf_r+0x1a6>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0c6      	beq.n	8002edc <_svfiprintf_r+0x130>
 8002f4e:	9105      	str	r1, [sp, #20]
 8002f50:	e7c4      	b.n	8002edc <_svfiprintf_r+0x130>
 8002f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f56:	4604      	mov	r4, r0
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e7f0      	b.n	8002f3e <_svfiprintf_r+0x192>
 8002f5c:	ab03      	add	r3, sp, #12
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	462a      	mov	r2, r5
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <_svfiprintf_r+0x1f4>)
 8002f64:	a904      	add	r1, sp, #16
 8002f66:	4638      	mov	r0, r7
 8002f68:	f3af 8000 	nop.w
 8002f6c:	1c42      	adds	r2, r0, #1
 8002f6e:	4606      	mov	r6, r0
 8002f70:	d1d6      	bne.n	8002f20 <_svfiprintf_r+0x174>
 8002f72:	89ab      	ldrh	r3, [r5, #12]
 8002f74:	065b      	lsls	r3, r3, #25
 8002f76:	f53f af2d 	bmi.w	8002dd4 <_svfiprintf_r+0x28>
 8002f7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f7c:	b01d      	add	sp, #116	; 0x74
 8002f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f82:	ab03      	add	r3, sp, #12
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	462a      	mov	r2, r5
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <_svfiprintf_r+0x1f4>)
 8002f8a:	a904      	add	r1, sp, #16
 8002f8c:	4638      	mov	r0, r7
 8002f8e:	f000 f919 	bl	80031c4 <_printf_i>
 8002f92:	e7eb      	b.n	8002f6c <_svfiprintf_r+0x1c0>
 8002f94:	080035dc 	.word	0x080035dc
 8002f98:	080035e6 	.word	0x080035e6
 8002f9c:	00000000 	.word	0x00000000
 8002fa0:	08002cf9 	.word	0x08002cf9
 8002fa4:	080035e2 	.word	0x080035e2

08002fa8 <sbrk_aligned>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0e      	ldr	r6, [pc, #56]	; (8002fe4 <sbrk_aligned+0x3c>)
 8002fac:	460c      	mov	r4, r1
 8002fae:	6831      	ldr	r1, [r6, #0]
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	b911      	cbnz	r1, 8002fba <sbrk_aligned+0x12>
 8002fb4:	f000 fa7e 	bl	80034b4 <_sbrk_r>
 8002fb8:	6030      	str	r0, [r6, #0]
 8002fba:	4621      	mov	r1, r4
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 fa79 	bl	80034b4 <_sbrk_r>
 8002fc2:	1c43      	adds	r3, r0, #1
 8002fc4:	d00a      	beq.n	8002fdc <sbrk_aligned+0x34>
 8002fc6:	1cc4      	adds	r4, r0, #3
 8002fc8:	f024 0403 	bic.w	r4, r4, #3
 8002fcc:	42a0      	cmp	r0, r4
 8002fce:	d007      	beq.n	8002fe0 <sbrk_aligned+0x38>
 8002fd0:	1a21      	subs	r1, r4, r0
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 fa6e 	bl	80034b4 <_sbrk_r>
 8002fd8:	3001      	adds	r0, #1
 8002fda:	d101      	bne.n	8002fe0 <sbrk_aligned+0x38>
 8002fdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	200002fc 	.word	0x200002fc

08002fe8 <_malloc_r>:
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fec:	1ccd      	adds	r5, r1, #3
 8002fee:	f025 0503 	bic.w	r5, r5, #3
 8002ff2:	3508      	adds	r5, #8
 8002ff4:	2d0c      	cmp	r5, #12
 8002ff6:	bf38      	it	cc
 8002ff8:	250c      	movcc	r5, #12
 8002ffa:	2d00      	cmp	r5, #0
 8002ffc:	4607      	mov	r7, r0
 8002ffe:	db01      	blt.n	8003004 <_malloc_r+0x1c>
 8003000:	42a9      	cmp	r1, r5
 8003002:	d905      	bls.n	8003010 <_malloc_r+0x28>
 8003004:	230c      	movs	r3, #12
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	2600      	movs	r6, #0
 800300a:	4630      	mov	r0, r6
 800300c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003010:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030e4 <_malloc_r+0xfc>
 8003014:	f000 f9f8 	bl	8003408 <__malloc_lock>
 8003018:	f8d8 3000 	ldr.w	r3, [r8]
 800301c:	461c      	mov	r4, r3
 800301e:	bb5c      	cbnz	r4, 8003078 <_malloc_r+0x90>
 8003020:	4629      	mov	r1, r5
 8003022:	4638      	mov	r0, r7
 8003024:	f7ff ffc0 	bl	8002fa8 <sbrk_aligned>
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	4604      	mov	r4, r0
 800302c:	d155      	bne.n	80030da <_malloc_r+0xf2>
 800302e:	f8d8 4000 	ldr.w	r4, [r8]
 8003032:	4626      	mov	r6, r4
 8003034:	2e00      	cmp	r6, #0
 8003036:	d145      	bne.n	80030c4 <_malloc_r+0xdc>
 8003038:	2c00      	cmp	r4, #0
 800303a:	d048      	beq.n	80030ce <_malloc_r+0xe6>
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	4631      	mov	r1, r6
 8003040:	4638      	mov	r0, r7
 8003042:	eb04 0903 	add.w	r9, r4, r3
 8003046:	f000 fa35 	bl	80034b4 <_sbrk_r>
 800304a:	4581      	cmp	r9, r0
 800304c:	d13f      	bne.n	80030ce <_malloc_r+0xe6>
 800304e:	6821      	ldr	r1, [r4, #0]
 8003050:	1a6d      	subs	r5, r5, r1
 8003052:	4629      	mov	r1, r5
 8003054:	4638      	mov	r0, r7
 8003056:	f7ff ffa7 	bl	8002fa8 <sbrk_aligned>
 800305a:	3001      	adds	r0, #1
 800305c:	d037      	beq.n	80030ce <_malloc_r+0xe6>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	442b      	add	r3, r5
 8003062:	6023      	str	r3, [r4, #0]
 8003064:	f8d8 3000 	ldr.w	r3, [r8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d038      	beq.n	80030de <_malloc_r+0xf6>
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	42a2      	cmp	r2, r4
 8003070:	d12b      	bne.n	80030ca <_malloc_r+0xe2>
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e00f      	b.n	8003098 <_malloc_r+0xb0>
 8003078:	6822      	ldr	r2, [r4, #0]
 800307a:	1b52      	subs	r2, r2, r5
 800307c:	d41f      	bmi.n	80030be <_malloc_r+0xd6>
 800307e:	2a0b      	cmp	r2, #11
 8003080:	d917      	bls.n	80030b2 <_malloc_r+0xca>
 8003082:	1961      	adds	r1, r4, r5
 8003084:	42a3      	cmp	r3, r4
 8003086:	6025      	str	r5, [r4, #0]
 8003088:	bf18      	it	ne
 800308a:	6059      	strne	r1, [r3, #4]
 800308c:	6863      	ldr	r3, [r4, #4]
 800308e:	bf08      	it	eq
 8003090:	f8c8 1000 	streq.w	r1, [r8]
 8003094:	5162      	str	r2, [r4, r5]
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	4638      	mov	r0, r7
 800309a:	f104 060b 	add.w	r6, r4, #11
 800309e:	f000 f9b9 	bl	8003414 <__malloc_unlock>
 80030a2:	f026 0607 	bic.w	r6, r6, #7
 80030a6:	1d23      	adds	r3, r4, #4
 80030a8:	1af2      	subs	r2, r6, r3
 80030aa:	d0ae      	beq.n	800300a <_malloc_r+0x22>
 80030ac:	1b9b      	subs	r3, r3, r6
 80030ae:	50a3      	str	r3, [r4, r2]
 80030b0:	e7ab      	b.n	800300a <_malloc_r+0x22>
 80030b2:	42a3      	cmp	r3, r4
 80030b4:	6862      	ldr	r2, [r4, #4]
 80030b6:	d1dd      	bne.n	8003074 <_malloc_r+0x8c>
 80030b8:	f8c8 2000 	str.w	r2, [r8]
 80030bc:	e7ec      	b.n	8003098 <_malloc_r+0xb0>
 80030be:	4623      	mov	r3, r4
 80030c0:	6864      	ldr	r4, [r4, #4]
 80030c2:	e7ac      	b.n	800301e <_malloc_r+0x36>
 80030c4:	4634      	mov	r4, r6
 80030c6:	6876      	ldr	r6, [r6, #4]
 80030c8:	e7b4      	b.n	8003034 <_malloc_r+0x4c>
 80030ca:	4613      	mov	r3, r2
 80030cc:	e7cc      	b.n	8003068 <_malloc_r+0x80>
 80030ce:	230c      	movs	r3, #12
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4638      	mov	r0, r7
 80030d4:	f000 f99e 	bl	8003414 <__malloc_unlock>
 80030d8:	e797      	b.n	800300a <_malloc_r+0x22>
 80030da:	6025      	str	r5, [r4, #0]
 80030dc:	e7dc      	b.n	8003098 <_malloc_r+0xb0>
 80030de:	605b      	str	r3, [r3, #4]
 80030e0:	deff      	udf	#255	; 0xff
 80030e2:	bf00      	nop
 80030e4:	200002f8 	.word	0x200002f8

080030e8 <_printf_common>:
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	4616      	mov	r6, r2
 80030ee:	4699      	mov	r9, r3
 80030f0:	688a      	ldr	r2, [r1, #8]
 80030f2:	690b      	ldr	r3, [r1, #16]
 80030f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	bfb8      	it	lt
 80030fc:	4613      	movlt	r3, r2
 80030fe:	6033      	str	r3, [r6, #0]
 8003100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003104:	4607      	mov	r7, r0
 8003106:	460c      	mov	r4, r1
 8003108:	b10a      	cbz	r2, 800310e <_printf_common+0x26>
 800310a:	3301      	adds	r3, #1
 800310c:	6033      	str	r3, [r6, #0]
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	0699      	lsls	r1, r3, #26
 8003112:	bf42      	ittt	mi
 8003114:	6833      	ldrmi	r3, [r6, #0]
 8003116:	3302      	addmi	r3, #2
 8003118:	6033      	strmi	r3, [r6, #0]
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	f015 0506 	ands.w	r5, r5, #6
 8003120:	d106      	bne.n	8003130 <_printf_common+0x48>
 8003122:	f104 0a19 	add.w	sl, r4, #25
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	6832      	ldr	r2, [r6, #0]
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	42ab      	cmp	r3, r5
 800312e:	dc26      	bgt.n	800317e <_printf_common+0x96>
 8003130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003134:	1e13      	subs	r3, r2, #0
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	bf18      	it	ne
 800313a:	2301      	movne	r3, #1
 800313c:	0692      	lsls	r2, r2, #26
 800313e:	d42b      	bmi.n	8003198 <_printf_common+0xb0>
 8003140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003144:	4649      	mov	r1, r9
 8003146:	4638      	mov	r0, r7
 8003148:	47c0      	blx	r8
 800314a:	3001      	adds	r0, #1
 800314c:	d01e      	beq.n	800318c <_printf_common+0xa4>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	6922      	ldr	r2, [r4, #16]
 8003152:	f003 0306 	and.w	r3, r3, #6
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf02      	ittt	eq
 800315a:	68e5      	ldreq	r5, [r4, #12]
 800315c:	6833      	ldreq	r3, [r6, #0]
 800315e:	1aed      	subeq	r5, r5, r3
 8003160:	68a3      	ldr	r3, [r4, #8]
 8003162:	bf0c      	ite	eq
 8003164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003168:	2500      	movne	r5, #0
 800316a:	4293      	cmp	r3, r2
 800316c:	bfc4      	itt	gt
 800316e:	1a9b      	subgt	r3, r3, r2
 8003170:	18ed      	addgt	r5, r5, r3
 8003172:	2600      	movs	r6, #0
 8003174:	341a      	adds	r4, #26
 8003176:	42b5      	cmp	r5, r6
 8003178:	d11a      	bne.n	80031b0 <_printf_common+0xc8>
 800317a:	2000      	movs	r0, #0
 800317c:	e008      	b.n	8003190 <_printf_common+0xa8>
 800317e:	2301      	movs	r3, #1
 8003180:	4652      	mov	r2, sl
 8003182:	4649      	mov	r1, r9
 8003184:	4638      	mov	r0, r7
 8003186:	47c0      	blx	r8
 8003188:	3001      	adds	r0, #1
 800318a:	d103      	bne.n	8003194 <_printf_common+0xac>
 800318c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003194:	3501      	adds	r5, #1
 8003196:	e7c6      	b.n	8003126 <_printf_common+0x3e>
 8003198:	18e1      	adds	r1, r4, r3
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	2030      	movs	r0, #48	; 0x30
 800319e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031a2:	4422      	add	r2, r4
 80031a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031ac:	3302      	adds	r3, #2
 80031ae:	e7c7      	b.n	8003140 <_printf_common+0x58>
 80031b0:	2301      	movs	r3, #1
 80031b2:	4622      	mov	r2, r4
 80031b4:	4649      	mov	r1, r9
 80031b6:	4638      	mov	r0, r7
 80031b8:	47c0      	blx	r8
 80031ba:	3001      	adds	r0, #1
 80031bc:	d0e6      	beq.n	800318c <_printf_common+0xa4>
 80031be:	3601      	adds	r6, #1
 80031c0:	e7d9      	b.n	8003176 <_printf_common+0x8e>
	...

080031c4 <_printf_i>:
 80031c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	7e0f      	ldrb	r7, [r1, #24]
 80031ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031cc:	2f78      	cmp	r7, #120	; 0x78
 80031ce:	4691      	mov	r9, r2
 80031d0:	4680      	mov	r8, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	469a      	mov	sl, r3
 80031d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031da:	d807      	bhi.n	80031ec <_printf_i+0x28>
 80031dc:	2f62      	cmp	r7, #98	; 0x62
 80031de:	d80a      	bhi.n	80031f6 <_printf_i+0x32>
 80031e0:	2f00      	cmp	r7, #0
 80031e2:	f000 80d4 	beq.w	800338e <_printf_i+0x1ca>
 80031e6:	2f58      	cmp	r7, #88	; 0x58
 80031e8:	f000 80c0 	beq.w	800336c <_printf_i+0x1a8>
 80031ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031f4:	e03a      	b.n	800326c <_printf_i+0xa8>
 80031f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031fa:	2b15      	cmp	r3, #21
 80031fc:	d8f6      	bhi.n	80031ec <_printf_i+0x28>
 80031fe:	a101      	add	r1, pc, #4	; (adr r1, 8003204 <_printf_i+0x40>)
 8003200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003204:	0800325d 	.word	0x0800325d
 8003208:	08003271 	.word	0x08003271
 800320c:	080031ed 	.word	0x080031ed
 8003210:	080031ed 	.word	0x080031ed
 8003214:	080031ed 	.word	0x080031ed
 8003218:	080031ed 	.word	0x080031ed
 800321c:	08003271 	.word	0x08003271
 8003220:	080031ed 	.word	0x080031ed
 8003224:	080031ed 	.word	0x080031ed
 8003228:	080031ed 	.word	0x080031ed
 800322c:	080031ed 	.word	0x080031ed
 8003230:	08003375 	.word	0x08003375
 8003234:	0800329d 	.word	0x0800329d
 8003238:	0800332f 	.word	0x0800332f
 800323c:	080031ed 	.word	0x080031ed
 8003240:	080031ed 	.word	0x080031ed
 8003244:	08003397 	.word	0x08003397
 8003248:	080031ed 	.word	0x080031ed
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080031ed 	.word	0x080031ed
 8003254:	080031ed 	.word	0x080031ed
 8003258:	08003337 	.word	0x08003337
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	1d1a      	adds	r2, r3, #4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	602a      	str	r2, [r5, #0]
 8003264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800326c:	2301      	movs	r3, #1
 800326e:	e09f      	b.n	80033b0 <_printf_i+0x1ec>
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	682b      	ldr	r3, [r5, #0]
 8003274:	0607      	lsls	r7, r0, #24
 8003276:	f103 0104 	add.w	r1, r3, #4
 800327a:	6029      	str	r1, [r5, #0]
 800327c:	d501      	bpl.n	8003282 <_printf_i+0xbe>
 800327e:	681e      	ldr	r6, [r3, #0]
 8003280:	e003      	b.n	800328a <_printf_i+0xc6>
 8003282:	0646      	lsls	r6, r0, #25
 8003284:	d5fb      	bpl.n	800327e <_printf_i+0xba>
 8003286:	f9b3 6000 	ldrsh.w	r6, [r3]
 800328a:	2e00      	cmp	r6, #0
 800328c:	da03      	bge.n	8003296 <_printf_i+0xd2>
 800328e:	232d      	movs	r3, #45	; 0x2d
 8003290:	4276      	negs	r6, r6
 8003292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003296:	485a      	ldr	r0, [pc, #360]	; (8003400 <_printf_i+0x23c>)
 8003298:	230a      	movs	r3, #10
 800329a:	e012      	b.n	80032c2 <_printf_i+0xfe>
 800329c:	682b      	ldr	r3, [r5, #0]
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	1d19      	adds	r1, r3, #4
 80032a2:	6029      	str	r1, [r5, #0]
 80032a4:	0605      	lsls	r5, r0, #24
 80032a6:	d501      	bpl.n	80032ac <_printf_i+0xe8>
 80032a8:	681e      	ldr	r6, [r3, #0]
 80032aa:	e002      	b.n	80032b2 <_printf_i+0xee>
 80032ac:	0641      	lsls	r1, r0, #25
 80032ae:	d5fb      	bpl.n	80032a8 <_printf_i+0xe4>
 80032b0:	881e      	ldrh	r6, [r3, #0]
 80032b2:	4853      	ldr	r0, [pc, #332]	; (8003400 <_printf_i+0x23c>)
 80032b4:	2f6f      	cmp	r7, #111	; 0x6f
 80032b6:	bf0c      	ite	eq
 80032b8:	2308      	moveq	r3, #8
 80032ba:	230a      	movne	r3, #10
 80032bc:	2100      	movs	r1, #0
 80032be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032c2:	6865      	ldr	r5, [r4, #4]
 80032c4:	60a5      	str	r5, [r4, #8]
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	bfa2      	ittt	ge
 80032ca:	6821      	ldrge	r1, [r4, #0]
 80032cc:	f021 0104 	bicge.w	r1, r1, #4
 80032d0:	6021      	strge	r1, [r4, #0]
 80032d2:	b90e      	cbnz	r6, 80032d8 <_printf_i+0x114>
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	d04b      	beq.n	8003370 <_printf_i+0x1ac>
 80032d8:	4615      	mov	r5, r2
 80032da:	fbb6 f1f3 	udiv	r1, r6, r3
 80032de:	fb03 6711 	mls	r7, r3, r1, r6
 80032e2:	5dc7      	ldrb	r7, [r0, r7]
 80032e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032e8:	4637      	mov	r7, r6
 80032ea:	42bb      	cmp	r3, r7
 80032ec:	460e      	mov	r6, r1
 80032ee:	d9f4      	bls.n	80032da <_printf_i+0x116>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d10b      	bne.n	800330c <_printf_i+0x148>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	07de      	lsls	r6, r3, #31
 80032f8:	d508      	bpl.n	800330c <_printf_i+0x148>
 80032fa:	6923      	ldr	r3, [r4, #16]
 80032fc:	6861      	ldr	r1, [r4, #4]
 80032fe:	4299      	cmp	r1, r3
 8003300:	bfde      	ittt	le
 8003302:	2330      	movle	r3, #48	; 0x30
 8003304:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003308:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800330c:	1b52      	subs	r2, r2, r5
 800330e:	6122      	str	r2, [r4, #16]
 8003310:	f8cd a000 	str.w	sl, [sp]
 8003314:	464b      	mov	r3, r9
 8003316:	aa03      	add	r2, sp, #12
 8003318:	4621      	mov	r1, r4
 800331a:	4640      	mov	r0, r8
 800331c:	f7ff fee4 	bl	80030e8 <_printf_common>
 8003320:	3001      	adds	r0, #1
 8003322:	d14a      	bne.n	80033ba <_printf_i+0x1f6>
 8003324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003328:	b004      	add	sp, #16
 800332a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	f043 0320 	orr.w	r3, r3, #32
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	4833      	ldr	r0, [pc, #204]	; (8003404 <_printf_i+0x240>)
 8003338:	2778      	movs	r7, #120	; 0x78
 800333a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	6829      	ldr	r1, [r5, #0]
 8003342:	061f      	lsls	r7, r3, #24
 8003344:	f851 6b04 	ldr.w	r6, [r1], #4
 8003348:	d402      	bmi.n	8003350 <_printf_i+0x18c>
 800334a:	065f      	lsls	r7, r3, #25
 800334c:	bf48      	it	mi
 800334e:	b2b6      	uxthmi	r6, r6
 8003350:	07df      	lsls	r7, r3, #31
 8003352:	bf48      	it	mi
 8003354:	f043 0320 	orrmi.w	r3, r3, #32
 8003358:	6029      	str	r1, [r5, #0]
 800335a:	bf48      	it	mi
 800335c:	6023      	strmi	r3, [r4, #0]
 800335e:	b91e      	cbnz	r6, 8003368 <_printf_i+0x1a4>
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	f023 0320 	bic.w	r3, r3, #32
 8003366:	6023      	str	r3, [r4, #0]
 8003368:	2310      	movs	r3, #16
 800336a:	e7a7      	b.n	80032bc <_printf_i+0xf8>
 800336c:	4824      	ldr	r0, [pc, #144]	; (8003400 <_printf_i+0x23c>)
 800336e:	e7e4      	b.n	800333a <_printf_i+0x176>
 8003370:	4615      	mov	r5, r2
 8003372:	e7bd      	b.n	80032f0 <_printf_i+0x12c>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	6826      	ldr	r6, [r4, #0]
 8003378:	6961      	ldr	r1, [r4, #20]
 800337a:	1d18      	adds	r0, r3, #4
 800337c:	6028      	str	r0, [r5, #0]
 800337e:	0635      	lsls	r5, r6, #24
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	d501      	bpl.n	8003388 <_printf_i+0x1c4>
 8003384:	6019      	str	r1, [r3, #0]
 8003386:	e002      	b.n	800338e <_printf_i+0x1ca>
 8003388:	0670      	lsls	r0, r6, #25
 800338a:	d5fb      	bpl.n	8003384 <_printf_i+0x1c0>
 800338c:	8019      	strh	r1, [r3, #0]
 800338e:	2300      	movs	r3, #0
 8003390:	6123      	str	r3, [r4, #16]
 8003392:	4615      	mov	r5, r2
 8003394:	e7bc      	b.n	8003310 <_printf_i+0x14c>
 8003396:	682b      	ldr	r3, [r5, #0]
 8003398:	1d1a      	adds	r2, r3, #4
 800339a:	602a      	str	r2, [r5, #0]
 800339c:	681d      	ldr	r5, [r3, #0]
 800339e:	6862      	ldr	r2, [r4, #4]
 80033a0:	2100      	movs	r1, #0
 80033a2:	4628      	mov	r0, r5
 80033a4:	f7fc ff1c 	bl	80001e0 <memchr>
 80033a8:	b108      	cbz	r0, 80033ae <_printf_i+0x1ea>
 80033aa:	1b40      	subs	r0, r0, r5
 80033ac:	6060      	str	r0, [r4, #4]
 80033ae:	6863      	ldr	r3, [r4, #4]
 80033b0:	6123      	str	r3, [r4, #16]
 80033b2:	2300      	movs	r3, #0
 80033b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b8:	e7aa      	b.n	8003310 <_printf_i+0x14c>
 80033ba:	6923      	ldr	r3, [r4, #16]
 80033bc:	462a      	mov	r2, r5
 80033be:	4649      	mov	r1, r9
 80033c0:	4640      	mov	r0, r8
 80033c2:	47d0      	blx	sl
 80033c4:	3001      	adds	r0, #1
 80033c6:	d0ad      	beq.n	8003324 <_printf_i+0x160>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	079b      	lsls	r3, r3, #30
 80033cc:	d413      	bmi.n	80033f6 <_printf_i+0x232>
 80033ce:	68e0      	ldr	r0, [r4, #12]
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	4298      	cmp	r0, r3
 80033d4:	bfb8      	it	lt
 80033d6:	4618      	movlt	r0, r3
 80033d8:	e7a6      	b.n	8003328 <_printf_i+0x164>
 80033da:	2301      	movs	r3, #1
 80033dc:	4632      	mov	r2, r6
 80033de:	4649      	mov	r1, r9
 80033e0:	4640      	mov	r0, r8
 80033e2:	47d0      	blx	sl
 80033e4:	3001      	adds	r0, #1
 80033e6:	d09d      	beq.n	8003324 <_printf_i+0x160>
 80033e8:	3501      	adds	r5, #1
 80033ea:	68e3      	ldr	r3, [r4, #12]
 80033ec:	9903      	ldr	r1, [sp, #12]
 80033ee:	1a5b      	subs	r3, r3, r1
 80033f0:	42ab      	cmp	r3, r5
 80033f2:	dcf2      	bgt.n	80033da <_printf_i+0x216>
 80033f4:	e7eb      	b.n	80033ce <_printf_i+0x20a>
 80033f6:	2500      	movs	r5, #0
 80033f8:	f104 0619 	add.w	r6, r4, #25
 80033fc:	e7f5      	b.n	80033ea <_printf_i+0x226>
 80033fe:	bf00      	nop
 8003400:	080035ed 	.word	0x080035ed
 8003404:	080035fe 	.word	0x080035fe

08003408 <__malloc_lock>:
 8003408:	4801      	ldr	r0, [pc, #4]	; (8003410 <__malloc_lock+0x8>)
 800340a:	f7ff bc73 	b.w	8002cf4 <__retarget_lock_acquire_recursive>
 800340e:	bf00      	nop
 8003410:	200002f4 	.word	0x200002f4

08003414 <__malloc_unlock>:
 8003414:	4801      	ldr	r0, [pc, #4]	; (800341c <__malloc_unlock+0x8>)
 8003416:	f7ff bc6e 	b.w	8002cf6 <__retarget_lock_release_recursive>
 800341a:	bf00      	nop
 800341c:	200002f4 	.word	0x200002f4

08003420 <_realloc_r>:
 8003420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003424:	4680      	mov	r8, r0
 8003426:	4614      	mov	r4, r2
 8003428:	460e      	mov	r6, r1
 800342a:	b921      	cbnz	r1, 8003436 <_realloc_r+0x16>
 800342c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003430:	4611      	mov	r1, r2
 8003432:	f7ff bdd9 	b.w	8002fe8 <_malloc_r>
 8003436:	b92a      	cbnz	r2, 8003444 <_realloc_r+0x24>
 8003438:	f000 f85a 	bl	80034f0 <_free_r>
 800343c:	4625      	mov	r5, r4
 800343e:	4628      	mov	r0, r5
 8003440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003444:	f000 f8a0 	bl	8003588 <_malloc_usable_size_r>
 8003448:	4284      	cmp	r4, r0
 800344a:	4607      	mov	r7, r0
 800344c:	d802      	bhi.n	8003454 <_realloc_r+0x34>
 800344e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003452:	d812      	bhi.n	800347a <_realloc_r+0x5a>
 8003454:	4621      	mov	r1, r4
 8003456:	4640      	mov	r0, r8
 8003458:	f7ff fdc6 	bl	8002fe8 <_malloc_r>
 800345c:	4605      	mov	r5, r0
 800345e:	2800      	cmp	r0, #0
 8003460:	d0ed      	beq.n	800343e <_realloc_r+0x1e>
 8003462:	42bc      	cmp	r4, r7
 8003464:	4622      	mov	r2, r4
 8003466:	4631      	mov	r1, r6
 8003468:	bf28      	it	cs
 800346a:	463a      	movcs	r2, r7
 800346c:	f000 f832 	bl	80034d4 <memcpy>
 8003470:	4631      	mov	r1, r6
 8003472:	4640      	mov	r0, r8
 8003474:	f000 f83c 	bl	80034f0 <_free_r>
 8003478:	e7e1      	b.n	800343e <_realloc_r+0x1e>
 800347a:	4635      	mov	r5, r6
 800347c:	e7df      	b.n	800343e <_realloc_r+0x1e>

0800347e <memmove>:
 800347e:	4288      	cmp	r0, r1
 8003480:	b510      	push	{r4, lr}
 8003482:	eb01 0402 	add.w	r4, r1, r2
 8003486:	d902      	bls.n	800348e <memmove+0x10>
 8003488:	4284      	cmp	r4, r0
 800348a:	4623      	mov	r3, r4
 800348c:	d807      	bhi.n	800349e <memmove+0x20>
 800348e:	1e43      	subs	r3, r0, #1
 8003490:	42a1      	cmp	r1, r4
 8003492:	d008      	beq.n	80034a6 <memmove+0x28>
 8003494:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003498:	f803 2f01 	strb.w	r2, [r3, #1]!
 800349c:	e7f8      	b.n	8003490 <memmove+0x12>
 800349e:	4402      	add	r2, r0
 80034a0:	4601      	mov	r1, r0
 80034a2:	428a      	cmp	r2, r1
 80034a4:	d100      	bne.n	80034a8 <memmove+0x2a>
 80034a6:	bd10      	pop	{r4, pc}
 80034a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034b0:	e7f7      	b.n	80034a2 <memmove+0x24>
	...

080034b4 <_sbrk_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4d06      	ldr	r5, [pc, #24]	; (80034d0 <_sbrk_r+0x1c>)
 80034b8:	2300      	movs	r3, #0
 80034ba:	4604      	mov	r4, r0
 80034bc:	4608      	mov	r0, r1
 80034be:	602b      	str	r3, [r5, #0]
 80034c0:	f7fd fb66 	bl	8000b90 <_sbrk>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d102      	bne.n	80034ce <_sbrk_r+0x1a>
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	b103      	cbz	r3, 80034ce <_sbrk_r+0x1a>
 80034cc:	6023      	str	r3, [r4, #0]
 80034ce:	bd38      	pop	{r3, r4, r5, pc}
 80034d0:	20000300 	.word	0x20000300

080034d4 <memcpy>:
 80034d4:	440a      	add	r2, r1
 80034d6:	4291      	cmp	r1, r2
 80034d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80034dc:	d100      	bne.n	80034e0 <memcpy+0xc>
 80034de:	4770      	bx	lr
 80034e0:	b510      	push	{r4, lr}
 80034e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034ea:	4291      	cmp	r1, r2
 80034ec:	d1f9      	bne.n	80034e2 <memcpy+0xe>
 80034ee:	bd10      	pop	{r4, pc}

080034f0 <_free_r>:
 80034f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034f2:	2900      	cmp	r1, #0
 80034f4:	d044      	beq.n	8003580 <_free_r+0x90>
 80034f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034fa:	9001      	str	r0, [sp, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f1a1 0404 	sub.w	r4, r1, #4
 8003502:	bfb8      	it	lt
 8003504:	18e4      	addlt	r4, r4, r3
 8003506:	f7ff ff7f 	bl	8003408 <__malloc_lock>
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <_free_r+0x94>)
 800350c:	9801      	ldr	r0, [sp, #4]
 800350e:	6813      	ldr	r3, [r2, #0]
 8003510:	b933      	cbnz	r3, 8003520 <_free_r+0x30>
 8003512:	6063      	str	r3, [r4, #4]
 8003514:	6014      	str	r4, [r2, #0]
 8003516:	b003      	add	sp, #12
 8003518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800351c:	f7ff bf7a 	b.w	8003414 <__malloc_unlock>
 8003520:	42a3      	cmp	r3, r4
 8003522:	d908      	bls.n	8003536 <_free_r+0x46>
 8003524:	6825      	ldr	r5, [r4, #0]
 8003526:	1961      	adds	r1, r4, r5
 8003528:	428b      	cmp	r3, r1
 800352a:	bf01      	itttt	eq
 800352c:	6819      	ldreq	r1, [r3, #0]
 800352e:	685b      	ldreq	r3, [r3, #4]
 8003530:	1949      	addeq	r1, r1, r5
 8003532:	6021      	streq	r1, [r4, #0]
 8003534:	e7ed      	b.n	8003512 <_free_r+0x22>
 8003536:	461a      	mov	r2, r3
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	b10b      	cbz	r3, 8003540 <_free_r+0x50>
 800353c:	42a3      	cmp	r3, r4
 800353e:	d9fa      	bls.n	8003536 <_free_r+0x46>
 8003540:	6811      	ldr	r1, [r2, #0]
 8003542:	1855      	adds	r5, r2, r1
 8003544:	42a5      	cmp	r5, r4
 8003546:	d10b      	bne.n	8003560 <_free_r+0x70>
 8003548:	6824      	ldr	r4, [r4, #0]
 800354a:	4421      	add	r1, r4
 800354c:	1854      	adds	r4, r2, r1
 800354e:	42a3      	cmp	r3, r4
 8003550:	6011      	str	r1, [r2, #0]
 8003552:	d1e0      	bne.n	8003516 <_free_r+0x26>
 8003554:	681c      	ldr	r4, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	6053      	str	r3, [r2, #4]
 800355a:	440c      	add	r4, r1
 800355c:	6014      	str	r4, [r2, #0]
 800355e:	e7da      	b.n	8003516 <_free_r+0x26>
 8003560:	d902      	bls.n	8003568 <_free_r+0x78>
 8003562:	230c      	movs	r3, #12
 8003564:	6003      	str	r3, [r0, #0]
 8003566:	e7d6      	b.n	8003516 <_free_r+0x26>
 8003568:	6825      	ldr	r5, [r4, #0]
 800356a:	1961      	adds	r1, r4, r5
 800356c:	428b      	cmp	r3, r1
 800356e:	bf04      	itt	eq
 8003570:	6819      	ldreq	r1, [r3, #0]
 8003572:	685b      	ldreq	r3, [r3, #4]
 8003574:	6063      	str	r3, [r4, #4]
 8003576:	bf04      	itt	eq
 8003578:	1949      	addeq	r1, r1, r5
 800357a:	6021      	streq	r1, [r4, #0]
 800357c:	6054      	str	r4, [r2, #4]
 800357e:	e7ca      	b.n	8003516 <_free_r+0x26>
 8003580:	b003      	add	sp, #12
 8003582:	bd30      	pop	{r4, r5, pc}
 8003584:	200002f8 	.word	0x200002f8

08003588 <_malloc_usable_size_r>:
 8003588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800358c:	1f18      	subs	r0, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	bfbc      	itt	lt
 8003592:	580b      	ldrlt	r3, [r1, r0]
 8003594:	18c0      	addlt	r0, r0, r3
 8003596:	4770      	bx	lr

08003598 <_init>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr

080035a4 <_fini>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	bf00      	nop
 80035a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035aa:	bc08      	pop	{r3}
 80035ac:	469e      	mov	lr, r3
 80035ae:	4770      	bx	lr
