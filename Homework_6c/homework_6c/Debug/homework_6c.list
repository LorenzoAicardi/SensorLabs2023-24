
homework_6c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08009d38  08009d38  00019d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a12c  0800a12c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a134  0800a134  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001e4  0800a320  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  0800a320  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103e6  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219d  00000000  00000000  0003063d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  000327e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c76  00000000  00000000  000337a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017679  00000000  00000000  00034416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012856  00000000  00000000  0004ba8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091721  00000000  00000000  0005e2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005524  00000000  00000000  000efa08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f4f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d20 	.word	0x08009d20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009d20 	.word	0x08009d20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <HAL_TIM_PeriodElapsedCallback>:
void convertAndPrintAccelerometerData();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	// At each timer tick, ask to the sensor to save the x, y, z values
	if(htim==&htim2){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d101      	bne.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0x14>
		askAccelerometerData();
 8000f64:	f000 f806 	bl	8000f74 <askAccelerometerData>
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002b4 	.word	0x200002b4

08000f74 <askAccelerometerData>:

void askAccelerometerData(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af02      	add	r7, sp, #8
	// Set the auto-increment bit to the address of the X register, in order
	// to read starting from the register X, from a progressive register address
	uint8_t OUT_X_ADD_AUTOINCREMENT = OUT_X_ADD | AUTOINCREMENT_ENABLE;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <askAccelerometerData+0x44>)
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <askAccelerometerData+0x48>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	71fb      	strb	r3, [r7, #7]

	// Ask to receive 5 bytes:
	// Registers are arranged in the following way in the address space:
	// x value, blank byte, y value, blank byte, z value, ... other not interesting things
	// so from the x address I read 5 bytes (x,_,y,_,z) in order to read x, y, z
	HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADD, &OUT_X_ADD_AUTOINCREMENT, 1,50);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <askAccelerometerData+0x4c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	1dfa      	adds	r2, r7, #7
 8000f90:	2332      	movs	r3, #50	; 0x32
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <askAccelerometerData+0x50>)
 8000f98:	f001 fdfc 	bl	8002b94 <HAL_I2C_Master_Transmit>
	// Start DMA receive (5 bytes in acc array) from device adding 1 to the address in order to read
	HAL_I2C_Master_Receive_DMA(&hi2c1, ACCEL_ADD+1, (uint8_t*) &acc, 5);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <askAccelerometerData+0x4c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <askAccelerometerData+0x54>)
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <askAccelerometerData+0x50>)
 8000fac:	f001 fef0 	bl	8002d90 <HAL_I2C_Master_Receive_DMA>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000000e 	.word	0x2000000e
 8000fbc:	2000000f 	.word	0x2000000f
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000200 	.word	0x20000200
 8000fc8:	20000404 	.word	0x20000404

08000fcc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	// When DMA receive ended, this callback is called and we can parse the values
	// we received in the buffer, convert them and send to the remote machine
	if(hi2c==&hi2c1){
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d101      	bne.n	8000fe0 <HAL_I2C_MasterRxCpltCallback+0x14>
		convertAndPrintAccelerometerData();
 8000fdc:	f000 f806 	bl	8000fec <convertAndPrintAccelerometerData>
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000200 	.word	0x20000200

08000fec <convertAndPrintAccelerometerData>:

void convertAndPrintAccelerometerData(){
 8000fec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff0:	b08a      	sub	sp, #40	; 0x28
 8000ff2:	af06      	add	r7, sp, #24
    int len = 0; // Length of the string that will be transmitted using USART
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]

    // Convert the read values
	float acc_g_x = acc[0]/64.0;
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <convertAndPrintAccelerometerData+0xcc>)
 8000ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa98 	bl	8000534 <__aeabi_i2d>
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <convertAndPrintAccelerometerData+0xd0>)
 800100a:	f7ff fc27 	bl	800085c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fdcf 	bl	8000bb8 <__aeabi_d2f>
 800101a:	4603      	mov	r3, r0
 800101c:	60bb      	str	r3, [r7, #8]
	float acc_g_y = acc[2]/64.0;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <convertAndPrintAccelerometerData+0xcc>)
 8001020:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa85 	bl	8000534 <__aeabi_i2d>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <convertAndPrintAccelerometerData+0xd0>)
 8001030:	f7ff fc14 	bl	800085c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fdbc 	bl	8000bb8 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	607b      	str	r3, [r7, #4]
	float acc_g_z = acc[4]/64.0;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <convertAndPrintAccelerometerData+0xcc>)
 8001046:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa72 	bl	8000534 <__aeabi_i2d>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <convertAndPrintAccelerometerData+0xd0>)
 8001056:	f7ff fc01 	bl	800085c <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fda9 	bl	8000bb8 <__aeabi_d2f>
 8001066:	4603      	mov	r3, r0
 8001068:	603b      	str	r3, [r7, #0]

	// Format the output string with 2 decimal values and forcing the sign to be shown also when value is positive
	len = snprintf(buffer_str_out, DIM_S, "X: %+.2f g\tY: %+.2f g\tZ: %+.2f g\r\n", acc_g_x, acc_g_y , acc_g_z);
 800106a:	68b8      	ldr	r0, [r7, #8]
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_f2d>
 8001070:	4604      	mov	r4, r0
 8001072:	460d      	mov	r5, r1
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fa6f 	bl	8000558 <__aeabi_f2d>
 800107a:	4680      	mov	r8, r0
 800107c:	4689      	mov	r9, r1
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f7ff fa6a 	bl	8000558 <__aeabi_f2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800108c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001090:	e9cd 4500 	strd	r4, r5, [sp]
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <convertAndPrintAccelerometerData+0xd4>)
 8001096:	2164      	movs	r1, #100	; 0x64
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <convertAndPrintAccelerometerData+0xd8>)
 800109a:	f006 fccf 	bl	8007a3c <sniprintf>
 800109e:	60f8      	str	r0, [r7, #12]
	// Transmit to remote machine using DMA
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) buffer_str_out, len);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4907      	ldr	r1, [pc, #28]	; (80010c4 <convertAndPrintAccelerometerData+0xd8>)
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <convertAndPrintAccelerometerData+0xdc>)
 80010aa:	f004 ff83 	bl	8005fb4 <HAL_UART_Transmit_DMA>

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010b8:	20000404 	.word	0x20000404
 80010bc:	40500000 	.word	0x40500000
 80010c0:	08009d38 	.word	0x08009d38
 80010c4:	200003a0 	.word	0x200003a0
 80010c8:	200002fc 	.word	0x200002fc

080010cc <initAccelerometer>:

void initAccelerometer()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
    int len = 0;// Length of the string that will be transmitted using USART
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]

    // Initialize Accelerometer: need to detect which sensor the board has.
    // Check for the LIS2DE: write to its address and check positive response
    if (HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADD, CTRL_REG1, sizeof(CTRL_REG1), 50) == HAL_OK)
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <initAccelerometer+0xac>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b299      	uxth	r1, r3
 80010dc:	2332      	movs	r3, #50	; 0x32
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2302      	movs	r3, #2
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <initAccelerometer+0xb0>)
 80010e4:	4826      	ldr	r0, [pc, #152]	; (8001180 <initAccelerometer+0xb4>)
 80010e6:	f001 fd55 	bl	8002b94 <HAL_I2C_Master_Transmit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d106      	bne.n	80010fe <initAccelerometer+0x32>
    {
        len = snprintf(buffer_str_out, DIM_S, "LIS2DE found\r\n");
 80010f0:	4a24      	ldr	r2, [pc, #144]	; (8001184 <initAccelerometer+0xb8>)
 80010f2:	2164      	movs	r1, #100	; 0x64
 80010f4:	4824      	ldr	r0, [pc, #144]	; (8001188 <initAccelerometer+0xbc>)
 80010f6:	f006 fca1 	bl	8007a3c <sniprintf>
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	e01d      	b.n	800113a <initAccelerometer+0x6e>
        // If OK, then we have a LIS2DE sensor
    }
    else
    {
        // Otherwise, we change the address to the LIS2DE12 and check if it's the correct sensor
        ACCEL_ADD = LIS2DE12_ADD;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <initAccelerometer+0xc0>)
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <initAccelerometer+0xac>)
 8001104:	701a      	strb	r2, [r3, #0]
        if (HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADD, CTRL_REG1, sizeof(CTRL_REG1), 50) == HAL_OK)
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <initAccelerometer+0xac>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b299      	uxth	r1, r3
 800110c:	2332      	movs	r3, #50	; 0x32
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2302      	movs	r3, #2
 8001112:	4a1a      	ldr	r2, [pc, #104]	; (800117c <initAccelerometer+0xb0>)
 8001114:	481a      	ldr	r0, [pc, #104]	; (8001180 <initAccelerometer+0xb4>)
 8001116:	f001 fd3d 	bl	8002b94 <HAL_I2C_Master_Transmit>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d106      	bne.n	800112e <initAccelerometer+0x62>
        {
            len = snprintf(buffer_str_out, DIM_S, "LIS2DE12 found\r\n");
 8001120:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <initAccelerometer+0xc4>)
 8001122:	2164      	movs	r1, #100	; 0x64
 8001124:	4818      	ldr	r0, [pc, #96]	; (8001188 <initAccelerometer+0xbc>)
 8001126:	f006 fc89 	bl	8007a3c <sniprintf>
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	e005      	b.n	800113a <initAccelerometer+0x6e>
            // If OK, then we have a LIS2DE12 sensor
        }
        else
        {
        	// Error, no sensor found
            len = snprintf(buffer_str_out, DIM_S, "Accelerometer error\r\n");
 800112e:	4a19      	ldr	r2, [pc, #100]	; (8001194 <initAccelerometer+0xc8>)
 8001130:	2164      	movs	r1, #100	; 0x64
 8001132:	4815      	ldr	r0, [pc, #84]	; (8001188 <initAccelerometer+0xbc>)
 8001134:	f006 fc82 	bl	8007a3c <sniprintf>
 8001138:	6078      	str	r0, [r7, #4]
        }
    }
    HAL_UART_Transmit_DMA(&huart2,(uint8_t*) buffer_str_out, len);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	b29b      	uxth	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	4911      	ldr	r1, [pc, #68]	; (8001188 <initAccelerometer+0xbc>)
 8001142:	4815      	ldr	r0, [pc, #84]	; (8001198 <initAccelerometer+0xcc>)
 8001144:	f004 ff36 	bl	8005fb4 <HAL_UART_Transmit_DMA>


   	// Configure the sensor (not useful here since we are asking for default configuration, but
    // changing the constant above we can set other configurations quickly)
    HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADD,CTRL_REG2, sizeof(CTRL_REG2), 50);
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <initAccelerometer+0xac>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b299      	uxth	r1, r3
 800114e:	2332      	movs	r3, #50	; 0x32
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2302      	movs	r3, #2
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <initAccelerometer+0xd0>)
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <initAccelerometer+0xb4>)
 8001158:	f001 fd1c 	bl	8002b94 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADD,CTRL_REG4, sizeof(CTRL_REG4), 50);
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <initAccelerometer+0xac>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b299      	uxth	r1, r3
 8001162:	2332      	movs	r3, #50	; 0x32
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <initAccelerometer+0xd4>)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <initAccelerometer+0xb4>)
 800116c:	f001 fd12 	bl	8002b94 <HAL_I2C_Master_Transmit>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000004 	.word	0x20000004
 8001180:	20000200 	.word	0x20000200
 8001184:	08009d5c 	.word	0x08009d5c
 8001188:	200003a0 	.word	0x200003a0
 800118c:	20000001 	.word	0x20000001
 8001190:	08009d6c 	.word	0x08009d6c
 8001194:	08009d80 	.word	0x08009d80
 8001198:	200002fc 	.word	0x200002fc
 800119c:	20000008 	.word	0x20000008
 80011a0:	2000000c 	.word	0x2000000c

080011a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f000 fc72 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f812 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f000 f94a 	bl	8001448 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b4:	f000 f920 	bl	80013f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011b8:	f000 f8f4 	bl	80013a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011bc:	f000 f876 	bl	80012ac <MX_I2C1_Init>
  MX_TIM2_Init();
 80011c0:	f000 f8a2 	bl	8001308 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  initAccelerometer();
 80011c4:	f7ff ff82 	bl	80010cc <initAccelerometer>
  HAL_TIM_Base_Start_IT(&htim2);
 80011c8:	4801      	ldr	r0, [pc, #4]	; (80011d0 <main+0x2c>)
 80011ca:	f004 faaf 	bl	800572c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <main+0x2a>
 80011d0:	200002b4 	.word	0x200002b4

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	; 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2230      	movs	r2, #48	; 0x30
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 fca1 	bl	8007b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <SystemClock_Config+0xd0>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <SystemClock_Config+0xd0>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <SystemClock_Config+0xd0>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <SystemClock_Config+0xd4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <SystemClock_Config+0xd4>)
 8001222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <SystemClock_Config+0xd4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2310      	movs	r3, #16
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001240:	2302      	movs	r3, #2
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001244:	2300      	movs	r3, #0
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001248:	2310      	movs	r3, #16
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800124c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001252:	2304      	movs	r3, #4
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001256:	2307      	movs	r3, #7
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fd7c 	bl	8004d5c <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800126a:	f000 f95b 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2302      	movs	r3, #2
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2102      	movs	r1, #2
 800128a:	4618      	mov	r0, r3
 800128c:	f003 ffde 	bl	800524c <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001296:	f000 f945 	bl	8001524 <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3750      	adds	r7, #80	; 0x50
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_I2C1_Init+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_I2C1_Init+0x58>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ea:	f001 fb0f 	bl	800290c <HAL_I2C_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f4:	f000 f916 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000200 	.word	0x20000200
 8001300:	40005400 	.word	0x40005400
 8001304:	000186a0 	.word	0x000186a0

08001308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM2_Init+0x98>)
 800132e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM2_Init+0x98>)
 800133c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_TIM2_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001350:	f004 f99c 	bl	800568c <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800135a:	f000 f8e3 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_TIM2_Init+0x98>)
 800136c:	f004 fb48 	bl	8005a00 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001376:	f000 f8d5 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001388:	f004 fd44 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001392:	f000 f8c7 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002b4 	.word	0x200002b4

080013a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_USART2_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART2_UART_Init+0x4c>)
 80013dc:	f004 fd9c 	bl	8005f18 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f89d 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200002fc 	.word	0x200002fc
 80013f4:	40004400 	.word	0x40004400

080013f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_DMA_Init+0x4c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <MX_DMA_Init+0x4c>)
 8001408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <MX_DMA_Init+0x4c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	200b      	movs	r0, #11
 8001420:	f000 fc83 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001424:	200b      	movs	r0, #11
 8001426:	f000 fc9c 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2011      	movs	r0, #17
 8001430:	f000 fc7b 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001434:	2011      	movs	r0, #17
 8001436:	f000 fc94 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <MX_GPIO_Init+0xd0>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_GPIO_Init+0xd0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_GPIO_Init+0xd0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2120      	movs	r1, #32
 80014d2:	4812      	ldr	r0, [pc, #72]	; (800151c <MX_GPIO_Init+0xd4>)
 80014d4:	f001 fa00 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <MX_GPIO_Init+0xd8>)
 80014f0:	f001 f86e 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014f4:	2320      	movs	r3, #32
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_GPIO_Init+0xd4>)
 800150c:	f001 f860 	bl	80025d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020800 	.word	0x40020800

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>
	...

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_MspInit+0x4c>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_MspInit+0x4c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156e:	2007      	movs	r0, #7
 8001570:	f000 fbd0 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a34      	ldr	r2, [pc, #208]	; (8001670 <HAL_I2C_MspInit+0xf0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d162      	bne.n	8001668 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_I2C_MspInit+0xf4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a32      	ldr	r2, [pc, #200]	; (8001674 <HAL_I2C_MspInit+0xf4>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <HAL_I2C_MspInit+0xf4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d0:	2304      	movs	r3, #4
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4827      	ldr	r0, [pc, #156]	; (8001678 <HAL_I2C_MspInit+0xf8>)
 80015dc:	f000 fff8 	bl	80025d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_I2C_MspInit+0xf4>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_I2C_MspInit+0xf4>)
 80015ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_I2C_MspInit+0xf4>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_I2C_MspInit+0xfc>)
 80015fe:	4a20      	ldr	r2, [pc, #128]	; (8001680 <HAL_I2C_MspInit+0x100>)
 8001600:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001604:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001608:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_I2C_MspInit+0xfc>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_I2C_MspInit+0xfc>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800163c:	480f      	ldr	r0, [pc, #60]	; (800167c <HAL_I2C_MspInit+0xfc>)
 800163e:	f000 fbab 	bl	8001d98 <HAL_DMA_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001648:	f7ff ff6c 	bl	8001524 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_I2C_MspInit+0xfc>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	201f      	movs	r0, #31
 800165e:	f000 fb64 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001662:	201f      	movs	r0, #31
 8001664:	f000 fb7d 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40005400 	.word	0x40005400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400
 800167c:	20000254 	.word	0x20000254
 8001680:	40026010 	.word	0x40026010

08001684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001694:	d115      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_TIM_Base_MspInit+0x48>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	201c      	movs	r0, #28
 80016b8:	f000 fb37 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016bc:	201c      	movs	r0, #28
 80016be:	f000 fb50 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <HAL_UART_MspInit+0xf0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d161      	bne.n	80017b6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_UART_MspInit+0xf4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800172a:	230c      	movs	r3, #12
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173a:	2307      	movs	r3, #7
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4820      	ldr	r0, [pc, #128]	; (80017c8 <HAL_UART_MspInit+0xf8>)
 8001746:	f000 ff43 	bl	80025d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800174c:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <HAL_UART_MspInit+0x100>)
 800174e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001752:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001756:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_UART_MspInit+0xfc>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800178a:	4810      	ldr	r0, [pc, #64]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800178c:	f000 fb04 	bl	8001d98 <HAL_DMA_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001796:	f7ff fec5 	bl	8001524 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_UART_MspInit+0xfc>)
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_UART_MspInit+0xfc>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2026      	movs	r0, #38	; 0x26
 80017ac:	f000 fabd 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017b0:	2026      	movs	r0, #38	; 0x26
 80017b2:	f000 fad6 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40004400 	.word	0x40004400
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	20000340 	.word	0x20000340
 80017d0:	400260a0 	.word	0x400260a0

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 f988 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <DMA1_Stream0_IRQHandler+0x10>)
 800182e:	f000 fc4b 	bl	80020c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000254 	.word	0x20000254

0800183c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Stream6_IRQHandler+0x10>)
 8001842:	f000 fc41 	bl	80020c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000340 	.word	0x20000340

08001850 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM2_IRQHandler+0x10>)
 8001856:	f003 ffcb 	bl	80057f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002b4 	.word	0x200002b4

08001864 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <I2C1_EV_IRQHandler+0x10>)
 800186a:	f001 fbc1 	bl	8002ff0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000200 	.word	0x20000200

08001878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <USART2_IRQHandler+0x10>)
 800187e:	f004 fc17 	bl	80060b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200002fc 	.word	0x200002fc

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a6:	f006 f993 	bl	8007bd0 <__errno>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2216      	movs	r2, #22
 80018ae:	601a      	str	r2, [r3, #0]
  return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_exit>:

void _exit (int status)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe7 	bl	800189c <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ce:	e7fe      	b.n	80018ce <_exit+0x12>

080018d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
  }

  return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
  }
  return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	605a      	str	r2, [r3, #4]
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:

int _isatty(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f006 f8f8 	bl	8007bd0 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20018000 	.word	0x20018000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	2000040c 	.word	0x2000040c
 8001a14:	20000560 	.word	0x20000560

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a66:	f7ff ffd7 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f006 f8b7 	bl	8007bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff fb99 	bl	80011a4 <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a80:	0800a13c 	.word	0x0800a13c
  ldr r2, =_sbss
 8001a84:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a88:	20000560 	.word	0x20000560

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_Init+0x40>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_Init+0x40>)
 8001aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_Init+0x40>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 f92b 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 f808 	bl	8001ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fd34 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_InitTick+0x54>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x58>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f943 	bl	8001d7e <HAL_SYSTICK_Config>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00e      	b.n	8001b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b0f      	cmp	r3, #15
 8001b06:	d80a      	bhi.n	8001b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f000 f90b 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b14:	4a06      	ldr	r2, [pc, #24]	; (8001b30 <HAL_InitTick+0x5c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e000      	b.n	8001b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000010 	.word	0x20000010
 8001b2c:	20000018 	.word	0x20000018
 8001b30:	20000014 	.word	0x20000014

08001b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x20>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_IncTick+0x24>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000018 	.word	0x20000018
 8001b58:	20000410 	.word	0x20000410

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_GetTick+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000410 	.word	0x20000410

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff29 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff3e 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff31 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff feda 	bl	8001b5c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e099      	b.n	8001ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd4:	e00f      	b.n	8001df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd6:	f7ff fec1 	bl	8001b5c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d908      	bls.n	8001df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e078      	b.n	8001ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e8      	bne.n	8001dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_DMA_Init+0x158>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d107      	bne.n	8001e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f023 0307 	bic.w	r3, r3, #7
 8001e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d117      	bne.n	8001eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00e      	beq.n	8001eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fb1b 	bl	80024d8 <DMA_CheckFifoParam>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2240      	movs	r2, #64	; 0x40
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e016      	b.n	8001ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fad2 	bl	800246c <DMA_CalcBaseAndBitshift>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	223f      	movs	r2, #63	; 0x3f
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	f010803f 	.word	0xf010803f

08001ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_DMA_Start_IT+0x26>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e040      	b.n	8001f9c <HAL_DMA_Start_IT+0xa8>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d12f      	bne.n	8001f8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fa64 	bl	8002410 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	223f      	movs	r2, #63	; 0x3f
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0216 	orr.w	r2, r2, #22
 8001f62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e005      	b.n	8001f9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
 8001f98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fb2:	f7ff fdd3 	bl	8001b5c <HAL_GetTick>
 8001fb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d008      	beq.n	8001fd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e052      	b.n	800207c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0216 	bic.w	r2, r2, #22
 8001fe4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <HAL_DMA_Abort+0x62>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0208 	bic.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002026:	e013      	b.n	8002050 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002028:	f7ff fd98 	bl	8001b5c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b05      	cmp	r3, #5
 8002034:	d90c      	bls.n	8002050 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e015      	b.n	800207c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1e4      	bne.n	8002028 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	223f      	movs	r2, #63	; 0x3f
 8002064:	409a      	lsls	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d004      	beq.n	80020a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00c      	b.n	80020bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020d4:	4b8e      	ldr	r3, [pc, #568]	; (8002310 <HAL_DMA_IRQHandler+0x248>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a8e      	ldr	r2, [pc, #568]	; (8002314 <HAL_DMA_IRQHandler+0x24c>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0a9b      	lsrs	r3, r3, #10
 80020e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2208      	movs	r2, #8
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01a      	beq.n	8002134 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0204 	bic.w	r2, r2, #4
 800211a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2208      	movs	r2, #8
 8002122:	409a      	lsls	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	2201      	movs	r2, #1
 800213a:	409a      	lsls	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	2201      	movs	r2, #1
 8002158:	409a      	lsls	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2204      	movs	r2, #4
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2204      	movs	r2, #4
 800218e:	409a      	lsls	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f043 0204 	orr.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2210      	movs	r2, #16
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d043      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03c      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	2210      	movs	r2, #16
 80021c4:	409a      	lsls	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d018      	beq.n	800220a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d024      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
 80021f6:	e01f      	b.n	8002238 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
 8002208:	e016      	b.n	8002238 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0208 	bic.w	r2, r2, #8
 8002226:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	2220      	movs	r2, #32
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 808f 	beq.w	8002368 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8087 	beq.w	8002368 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2220      	movs	r2, #32
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b05      	cmp	r3, #5
 8002270:	d136      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0216 	bic.w	r2, r2, #22
 8002280:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002290:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_DMA_IRQHandler+0x1da>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0208 	bic.w	r2, r2, #8
 80022b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	223f      	movs	r2, #63	; 0x3f
 80022b8:	409a      	lsls	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d07e      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
        }
        return;
 80022de:	e079      	b.n	80023d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01d      	beq.n	800232a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	2b00      	cmp	r3, #0
 8002302:	d031      	beq.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
 800230c:	e02c      	b.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
 800230e:	bf00      	nop
 8002310:	20000010 	.word	0x20000010
 8002314:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
 8002328:	e01e      	b.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10f      	bne.n	8002358 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0210 	bic.w	r2, r2, #16
 8002346:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	2b00      	cmp	r3, #0
 800236e:	d032      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d022      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2205      	movs	r2, #5
 8002380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	3301      	adds	r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	429a      	cmp	r2, r3
 800239e:	d307      	bcc.n	80023b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f2      	bne.n	8002394 <HAL_DMA_IRQHandler+0x2cc>
 80023ae:	e000      	b.n	80023b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
 80023d2:	e000      	b.n	80023d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023d4:	bf00      	nop
    }
  }
}
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ea:	b2db      	uxtb	r3, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800242c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d108      	bne.n	8002450 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800244e:	e007      	b.n	8002460 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3b10      	subs	r3, #16
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <DMA_CalcBaseAndBitshift+0x64>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d909      	bls.n	80024ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	659a      	str	r2, [r3, #88]	; 0x58
 80024ac:	e007      	b.n	80024be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	aaaaaaab 	.word	0xaaaaaaab
 80024d4:	08009db0 	.word	0x08009db0

080024d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11f      	bne.n	8002532 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d856      	bhi.n	80025a6 <DMA_CheckFifoParam+0xce>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <DMA_CheckFifoParam+0x28>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002511 	.word	0x08002511
 8002504:	08002523 	.word	0x08002523
 8002508:	08002511 	.word	0x08002511
 800250c:	080025a7 	.word	0x080025a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d046      	beq.n	80025aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e043      	b.n	80025aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800252a:	d140      	bne.n	80025ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002530:	e03d      	b.n	80025ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	d121      	bne.n	8002580 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d837      	bhi.n	80025b2 <DMA_CheckFifoParam+0xda>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <DMA_CheckFifoParam+0x70>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	08002559 	.word	0x08002559
 800254c:	0800255f 	.word	0x0800255f
 8002550:	08002559 	.word	0x08002559
 8002554:	08002571 	.word	0x08002571
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e030      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d025      	beq.n	80025b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256e:	e022      	b.n	80025b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002578:	d11f      	bne.n	80025ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800257e:	e01c      	b.n	80025ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d903      	bls.n	800258e <DMA_CheckFifoParam+0xb6>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d003      	beq.n	8002594 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800258c:	e018      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      break;
 8002592:	e015      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e00b      	b.n	80025be <DMA_CheckFifoParam+0xe6>
      break;
 80025a6:	bf00      	nop
 80025a8:	e00a      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025aa:	bf00      	nop
 80025ac:	e008      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
 80025b0:	e006      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025b2:	bf00      	nop
 80025b4:	e004      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025b6:	bf00      	nop
 80025b8:	e002      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ba:	bf00      	nop
 80025bc:	e000      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
    }
  } 
  
  return status; 
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	e159      	b.n	80028a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	f040 8148 	bne.w	800289a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d005      	beq.n	8002622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	2b02      	cmp	r3, #2
 8002620:	d130      	bne.n	8002684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0201 	and.w	r2, r3, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b03      	cmp	r3, #3
 800268e:	d017      	beq.n	80026c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d123      	bne.n	8002714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a2 	beq.w	800289a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <HAL_GPIO_Init+0x2e8>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a56      	ldr	r2, [pc, #344]	; (80028b8 <HAL_GPIO_Init+0x2e8>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b54      	ldr	r3, [pc, #336]	; (80028b8 <HAL_GPIO_Init+0x2e8>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002772:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_GPIO_Init+0x2ec>)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3302      	adds	r3, #2
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	220f      	movs	r2, #15
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a49      	ldr	r2, [pc, #292]	; (80028c0 <HAL_GPIO_Init+0x2f0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d019      	beq.n	80027d2 <HAL_GPIO_Init+0x202>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a48      	ldr	r2, [pc, #288]	; (80028c4 <HAL_GPIO_Init+0x2f4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <HAL_GPIO_Init+0x1fe>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a47      	ldr	r2, [pc, #284]	; (80028c8 <HAL_GPIO_Init+0x2f8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00d      	beq.n	80027ca <HAL_GPIO_Init+0x1fa>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a46      	ldr	r2, [pc, #280]	; (80028cc <HAL_GPIO_Init+0x2fc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d007      	beq.n	80027c6 <HAL_GPIO_Init+0x1f6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a45      	ldr	r2, [pc, #276]	; (80028d0 <HAL_GPIO_Init+0x300>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_GPIO_Init+0x1f2>
 80027be:	2304      	movs	r3, #4
 80027c0:	e008      	b.n	80027d4 <HAL_GPIO_Init+0x204>
 80027c2:	2307      	movs	r3, #7
 80027c4:	e006      	b.n	80027d4 <HAL_GPIO_Init+0x204>
 80027c6:	2303      	movs	r3, #3
 80027c8:	e004      	b.n	80027d4 <HAL_GPIO_Init+0x204>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e002      	b.n	80027d4 <HAL_GPIO_Init+0x204>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_GPIO_Init+0x204>
 80027d2:	2300      	movs	r3, #0
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	f002 0203 	and.w	r2, r2, #3
 80027da:	0092      	lsls	r2, r2, #2
 80027dc:	4093      	lsls	r3, r2
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e4:	4935      	ldr	r1, [pc, #212]	; (80028bc <HAL_GPIO_Init+0x2ec>)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	3302      	adds	r3, #2
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027f2:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_GPIO_Init+0x304>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002816:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <HAL_GPIO_Init+0x304>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800281c:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_GPIO_Init+0x304>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002840:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <HAL_GPIO_Init+0x304>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002846:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_GPIO_Init+0x304>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800286a:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_GPIO_Init+0x304>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_GPIO_Init+0x304>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002894:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <HAL_GPIO_Init+0x304>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3301      	adds	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b0f      	cmp	r3, #15
 80028a4:	f67f aea2 	bls.w	80025ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40013800 	.word	0x40013800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40020800 	.word	0x40020800
 80028cc:	40020c00 	.word	0x40020c00
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028f4:	e003      	b.n	80028fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	619a      	str	r2, [r3, #24]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e12b      	b.n	8002b76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fe24 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2224      	movs	r2, #36	; 0x24
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800295e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800296e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002970:	f002 fe64 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8002974:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a81      	ldr	r2, [pc, #516]	; (8002b80 <HAL_I2C_Init+0x274>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d807      	bhi.n	8002990 <HAL_I2C_Init+0x84>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a80      	ldr	r2, [pc, #512]	; (8002b84 <HAL_I2C_Init+0x278>)
 8002984:	4293      	cmp	r3, r2
 8002986:	bf94      	ite	ls
 8002988:	2301      	movls	r3, #1
 800298a:	2300      	movhi	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e006      	b.n	800299e <HAL_I2C_Init+0x92>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a7d      	ldr	r2, [pc, #500]	; (8002b88 <HAL_I2C_Init+0x27c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	bf94      	ite	ls
 8002998:	2301      	movls	r3, #1
 800299a:	2300      	movhi	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0e7      	b.n	8002b76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a78      	ldr	r2, [pc, #480]	; (8002b8c <HAL_I2C_Init+0x280>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0c9b      	lsrs	r3, r3, #18
 80029b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a6a      	ldr	r2, [pc, #424]	; (8002b80 <HAL_I2C_Init+0x274>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d802      	bhi.n	80029e0 <HAL_I2C_Init+0xd4>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	3301      	adds	r3, #1
 80029de:	e009      	b.n	80029f4 <HAL_I2C_Init+0xe8>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	4a69      	ldr	r2, [pc, #420]	; (8002b90 <HAL_I2C_Init+0x284>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	3301      	adds	r3, #1
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	495c      	ldr	r1, [pc, #368]	; (8002b80 <HAL_I2C_Init+0x274>)
 8002a10:	428b      	cmp	r3, r1
 8002a12:	d819      	bhi.n	8002a48 <HAL_I2C_Init+0x13c>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e59      	subs	r1, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a22:	1c59      	adds	r1, r3, #1
 8002a24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a28:	400b      	ands	r3, r1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_I2C_Init+0x138>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1e59      	subs	r1, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a42:	e051      	b.n	8002ae8 <HAL_I2C_Init+0x1dc>
 8002a44:	2304      	movs	r3, #4
 8002a46:	e04f      	b.n	8002ae8 <HAL_I2C_Init+0x1dc>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d111      	bne.n	8002a74 <HAL_I2C_Init+0x168>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	440b      	add	r3, r1
 8002a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	e012      	b.n	8002a9a <HAL_I2C_Init+0x18e>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	0099      	lsls	r1, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Init+0x196>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e022      	b.n	8002ae8 <HAL_I2C_Init+0x1dc>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_I2C_Init+0x1bc>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e58      	subs	r0, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	440b      	add	r3, r1
 8002ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac6:	e00f      	b.n	8002ae8 <HAL_I2C_Init+0x1dc>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	6809      	ldr	r1, [r1, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69da      	ldr	r2, [r3, #28]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6911      	ldr	r1, [r2, #16]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	000186a0 	.word	0x000186a0
 8002b84:	001e847f 	.word	0x001e847f
 8002b88:	003d08ff 	.word	0x003d08ff
 8002b8c:	431bde83 	.word	0x431bde83
 8002b90:	10624dd3 	.word	0x10624dd3

08002b94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	817b      	strh	r3, [r7, #10]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7fe ffd8 	bl	8001b5c <HAL_GetTick>
 8002bac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	f040 80e0 	bne.w	8002d7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2319      	movs	r3, #25
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4970      	ldr	r1, [pc, #448]	; (8002d88 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f001 fef4 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e0d3      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_I2C_Master_Transmit+0x50>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0cc      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x1ea>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d007      	beq.n	8002c0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2221      	movs	r2, #33	; 0x21
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2210      	movs	r2, #16
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	893a      	ldrh	r2, [r7, #8]
 8002c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a50      	ldr	r2, [pc, #320]	; (8002d8c <HAL_I2C_Master_Transmit+0x1f8>)
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c4c:	8979      	ldrh	r1, [r7, #10]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f001 fc72 	bl	800453c <I2C_MasterRequestWrite>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e08d      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c78:	e066      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	6a39      	ldr	r1, [r7, #32]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f001 ff6e 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d107      	bne.n	8002ca2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06b      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d11b      	bne.n	8002d1c <HAL_I2C_Master_Transmit+0x188>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d017      	beq.n	8002d1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	6a39      	ldr	r1, [r7, #32]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f001 ff5e 	bl	8004be2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d107      	bne.n	8002d44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e01a      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d194      	bne.n	8002c7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	00100002 	.word	0x00100002
 8002d8c:	ffff0000 	.word	0xffff0000

08002d90 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	817b      	strh	r3, [r7, #10]
 8002da0:	4613      	mov	r3, r2
 8002da2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f040 810d 	bne.w	8002fd0 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002db6:	4b89      	ldr	r3, [pc, #548]	; (8002fdc <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	08db      	lsrs	r3, r3, #3
 8002dbc:	4a88      	ldr	r2, [pc, #544]	; (8002fe0 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0a1a      	lsrs	r2, r3, #8
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009a      	lsls	r2, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d116      	bne.n	8002e0a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0e3      	b.n	8002fd2 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d0db      	beq.n	8002dd0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_I2C_Master_Receive_DMA+0x96>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e0d5      	b.n	8002fd2 <HAL_I2C_Master_Receive_DMA+0x242>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d007      	beq.n	8002e4c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2222      	movs	r2, #34	; 0x22
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2210      	movs	r2, #16
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	893a      	ldrh	r2, [r7, #8]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e8e:	897a      	ldrh	r2, [r7, #10]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d07b      	beq.n	8002f94 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02a      	beq.n	8002efa <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	4a4f      	ldr	r2, [pc, #316]	; (8002fe8 <HAL_I2C_Master_Receive_DMA+0x258>)
 8002eaa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	4a4e      	ldr	r2, [pc, #312]	; (8002fec <HAL_I2C_Master_Receive_DMA+0x25c>)
 8002eb2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	2200      	movs	r2, #0
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	2200      	movs	r2, #0
 8002eca:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3310      	adds	r3, #16
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	f7ff f803 	bl	8001ef4 <HAL_DMA_Start_IT>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d139      	bne.n	8002f6c <HAL_I2C_Master_Receive_DMA+0x1dc>
 8002ef8:	e013      	b.n	8002f22 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e057      	b.n	8002fd2 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f30:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f40:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f58:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	e02f      	b.n	8002fcc <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0210 	orr.w	r2, r3, #16
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e01e      	b.n	8002fd2 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002faa:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fba:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fca:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000010 	.word	0x20000010
 8002fe0:	14f8b589 	.word	0x14f8b589
 8002fe4:	ffff0000 	.word	0xffff0000
 8002fe8:	08004641 	.word	0x08004641
 8002fec:	080047eb 	.word	0x080047eb

08002ff0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003010:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b10      	cmp	r3, #16
 800301e:	d003      	beq.n	8003028 <HAL_I2C_EV_IRQHandler+0x38>
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	f040 80b1 	bne.w	800318a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <HAL_I2C_EV_IRQHandler+0x6e>
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003048:	d003      	beq.n	8003052 <HAL_I2C_EV_IRQHandler+0x62>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003050:	d101      	bne.n	8003056 <HAL_I2C_EV_IRQHandler+0x66>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_I2C_EV_IRQHandler+0x68>
 8003056:	2300      	movs	r3, #0
 8003058:	2b01      	cmp	r3, #1
 800305a:	f000 8114 	beq.w	8003286 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_I2C_EV_IRQHandler+0x90>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f001 fe57 	bl	8004d26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fcb5 	bl	80039e8 <I2C_Master_SB>
 800307e:	e083      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_I2C_EV_IRQHandler+0xac>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fd2d 	bl	8003af4 <I2C_Master_ADD10>
 800309a:	e075      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_I2C_EV_IRQHandler+0xc8>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fd49 	bl	8003b48 <I2C_Master_ADDR>
 80030b6:	e067      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d036      	beq.n	8003130 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d0:	f000 80db 	beq.w	800328a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x10a>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x10a>
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f92d 	bl	8003352 <I2C_MasterTransmit_TXE>
 80030f8:	e046      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80c2 	beq.w	800328a <HAL_I2C_EV_IRQHandler+0x29a>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80bc 	beq.w	800328a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003112:	7bbb      	ldrb	r3, [r7, #14]
 8003114:	2b21      	cmp	r3, #33	; 0x21
 8003116:	d103      	bne.n	8003120 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f9b6 	bl	800348a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311e:	e0b4      	b.n	800328a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	f040 80b1 	bne.w	800328a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa24 	bl	8003576 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800312e:	e0ac      	b.n	800328a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800313e:	f000 80a4 	beq.w	800328a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x178>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x178>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fa9c 	bl	800369e <I2C_MasterReceive_RXNE>
 8003166:	e00f      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 808b 	beq.w	800328a <HAL_I2C_EV_IRQHandler+0x29a>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8085 	beq.w	800328a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fb47 	bl	8003814 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003186:	e080      	b.n	800328a <HAL_I2C_EV_IRQHandler+0x29a>
 8003188:	e07f      	b.n	800328a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e007      	b.n	80031ac <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d011      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x1ea>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00c      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031d0:	69b9      	ldr	r1, [r7, #24]
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 ff07 	bl	8003fe6 <I2C_Slave_ADDR>
 80031d8:	e05a      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x206>
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 ff42 	bl	8004078 <I2C_Slave_STOPF>
 80031f4:	e04c      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	2b21      	cmp	r3, #33	; 0x21
 80031fa:	d002      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x212>
 80031fc:	7bbb      	ldrb	r3, [r7, #14]
 80031fe:	2b29      	cmp	r3, #41	; 0x29
 8003200:	d120      	bne.n	8003244 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00d      	beq.n	8003228 <HAL_I2C_EV_IRQHandler+0x238>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_I2C_EV_IRQHandler+0x238>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fe22 	bl	8003e6a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003226:	e032      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02d      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x29e>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003238:	2b00      	cmp	r3, #0
 800323a:	d028      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fe51 	bl	8003ee4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003242:	e024      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_I2C_EV_IRQHandler+0x27a>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_I2C_EV_IRQHandler+0x27a>
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fe5f 	bl	8003f26 <I2C_SlaveReceive_RXNE>
 8003268:	e012      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fe8f 	bl	8003fa2 <I2C_SlaveReceive_BTF>
 8003284:	e004      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800328e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	70fb      	strb	r3, [r7, #3]
 80032de:	4613      	mov	r3, r2
 80032e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003368:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d150      	bne.n	800341a <I2C_MasterTransmit_TXE+0xc8>
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b21      	cmp	r3, #33	; 0x21
 800337c:	d14d      	bne.n	800341a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d01d      	beq.n	80033c0 <I2C_MasterTransmit_TXE+0x6e>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b20      	cmp	r3, #32
 8003388:	d01a      	beq.n	80033c0 <I2C_MasterTransmit_TXE+0x6e>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003390:	d016      	beq.n	80033c0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033a0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2211      	movs	r2, #17
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff6c 	bl	8003296 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033be:	e060      	b.n	8003482 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ce:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d107      	bne.n	800340a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff7d 	bl	8003302 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003408:	e03b      	b.n	8003482 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff3f 	bl	8003296 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003418:	e033      	b.n	8003482 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b21      	cmp	r3, #33	; 0x21
 800341e:	d005      	beq.n	800342c <I2C_MasterTransmit_TXE+0xda>
 8003420:	7bbb      	ldrb	r3, [r7, #14]
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	d12d      	bne.n	8003482 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b22      	cmp	r3, #34	; 0x22
 800342a:	d12a      	bne.n	8003482 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d108      	bne.n	8003448 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003446:	e01c      	b.n	8003482 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d103      	bne.n	800345c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f88e 	bl	8003576 <I2C_MemoryTransmit_TXE_BTF>
}
 800345a:	e012      	b.n	8003482 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003480:	e7ff      	b.n	8003482 <I2C_MasterTransmit_TXE+0x130>
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b21      	cmp	r3, #33	; 0x21
 80034a2:	d164      	bne.n	800356e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80034d2:	e04c      	b.n	800356e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d01d      	beq.n	8003516 <I2C_MasterTransmit_BTF+0x8c>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d01a      	beq.n	8003516 <I2C_MasterTransmit_BTF+0x8c>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e6:	d016      	beq.n	8003516 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2211      	movs	r2, #17
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fec1 	bl	8003296 <HAL_I2C_MasterTxCpltCallback>
}
 8003514:	e02b      	b.n	800356e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003524:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003534:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d107      	bne.n	8003560 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fed2 	bl	8003302 <HAL_I2C_MemTxCpltCallback>
}
 800355e:	e006      	b.n	800356e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff fe94 	bl	8003296 <HAL_I2C_MasterTxCpltCallback>
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11d      	bne.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10b      	bne.n	80035ae <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359a:	b2da      	uxtb	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80035ac:	e073      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	121b      	asrs	r3, r3, #8
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035c8:	e065      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d10b      	bne.n	80035ea <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035e8:	e055      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d151      	bne.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b22      	cmp	r3, #34	; 0x22
 80035f6:	d10d      	bne.n	8003614 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003606:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003612:	e040      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d015      	beq.n	800364a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b21      	cmp	r3, #33	; 0x21
 8003622:	d112      	bne.n	800364a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003648:	e025      	b.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d120      	bne.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b21      	cmp	r3, #33	; 0x21
 8003658:	d11d      	bne.n	8003696 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003668:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fe36 	bl	8003302 <HAL_I2C_MemTxCpltCallback>
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b22      	cmp	r3, #34	; 0x22
 80036b0:	f040 80ac 	bne.w	800380c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d921      	bls.n	8003706 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	f040 808c 	bne.w	800380c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003704:	e082      	b.n	800380c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	2b02      	cmp	r3, #2
 800370c:	d075      	beq.n	80037fa <I2C_MasterReceive_RXNE+0x15c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d002      	beq.n	800371a <I2C_MasterReceive_RXNE+0x7c>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d16f      	bne.n	80037fa <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f001 faa2 	bl	8004c64 <I2C_WaitOnSTOPRequestThroughIT>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d142      	bne.n	80037ac <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003734:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003744:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d10a      	bne.n	8003796 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fdc1 	bl	8003316 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003794:	e03a      	b.n	800380c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2212      	movs	r2, #18
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fd fc11 	bl	8000fcc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037aa:	e02f      	b.n	800380c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fd99 	bl	800332a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037f8:	e008      	b.n	800380c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	605a      	str	r2, [r3, #4]
}
 800380a:	e7ff      	b.n	800380c <I2C_MasterReceive_RXNE+0x16e>
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b04      	cmp	r3, #4
 800382a:	d11b      	bne.n	8003864 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003862:	e0bd      	b.n	80039e0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b03      	cmp	r3, #3
 800386c:	d129      	bne.n	80038c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d00a      	beq.n	800389a <I2C_MasterReceive_BTF+0x86>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d007      	beq.n	800389a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003898:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038c0:	e08e      	b.n	80039e0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d176      	bne.n	80039ba <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d002      	beq.n	80038d8 <I2C_MasterReceive_BTF+0xc4>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d108      	bne.n	80038ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e019      	b.n	800391e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d002      	beq.n	80038f6 <I2C_MasterReceive_BTF+0xe2>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d108      	bne.n	8003908 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	e00a      	b.n	800391e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b10      	cmp	r3, #16
 800390c:	d007      	beq.n	800391e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003978:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d10a      	bne.n	80039a4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fcba 	bl	8003316 <HAL_I2C_MemRxCpltCallback>
}
 80039a2:	e01d      	b.n	80039e0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2212      	movs	r2, #18
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fb0a 	bl	8000fcc <HAL_I2C_MasterRxCpltCallback>
}
 80039b8:	e012      	b.n	80039e0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d117      	bne.n	8003a2c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a14:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a16:	e067      	b.n	8003ae8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	611a      	str	r2, [r3, #16]
}
 8003a2a:	e05d      	b.n	8003ae8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a34:	d133      	bne.n	8003a9e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b21      	cmp	r3, #33	; 0x21
 8003a40:	d109      	bne.n	8003a56 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	e008      	b.n	8003a68 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <I2C_Master_SB+0x92>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d032      	beq.n	8003ae8 <I2C_Master_SB+0x100>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02d      	beq.n	8003ae8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9a:	605a      	str	r2, [r3, #4]
}
 8003a9c:	e024      	b.n	8003ae8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10e      	bne.n	8003ac4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	11db      	asrs	r3, r3, #7
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 0306 	and.w	r3, r3, #6
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f063 030f 	orn	r3, r3, #15
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	611a      	str	r2, [r3, #16]
}
 8003ac2:	e011      	b.n	8003ae8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d10d      	bne.n	8003ae8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	11db      	asrs	r3, r3, #7
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f063 030e 	orn	r3, r3, #14
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <I2C_Master_ADD10+0x26>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <I2C_Master_ADD10+0x48>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b3a:	605a      	str	r2, [r3, #4]
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b091      	sub	sp, #68	; 0x44
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b22      	cmp	r3, #34	; 0x22
 8003b70:	f040 8169 	bne.w	8003e46 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10f      	bne.n	8003b9c <I2C_Master_ADDR+0x54>
 8003b7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d10b      	bne.n	8003b9c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b84:	2300      	movs	r3, #0
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	e160      	b.n	8003e5e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11d      	bne.n	8003be0 <I2C_Master_ADDR+0x98>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bac:	d118      	bne.n	8003be0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	651a      	str	r2, [r3, #80]	; 0x50
 8003bde:	e13e      	b.n	8003e5e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d113      	bne.n	8003c12 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bea:	2300      	movs	r3, #0
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e115      	b.n	8003e3e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	f040 808a 	bne.w	8003d32 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c24:	d137      	bne.n	8003c96 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c34:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c44:	d113      	bne.n	8003c6e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c54:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	e0e7      	b.n	8003e3e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	623b      	str	r3, [r7, #32]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e0d3      	b.n	8003e3e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d02e      	beq.n	8003cfa <I2C_Master_ADDR+0x1b2>
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d02b      	beq.n	8003cfa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca4:	2b12      	cmp	r3, #18
 8003ca6:	d102      	bne.n	8003cae <I2C_Master_ADDR+0x166>
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d125      	bne.n	8003cfa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d00e      	beq.n	8003cd2 <I2C_Master_ADDR+0x18a>
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d00b      	beq.n	8003cd2 <I2C_Master_ADDR+0x18a>
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d008      	beq.n	8003cd2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e007      	b.n	8003ce2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	e0a1      	b.n	8003e3e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e085      	b.n	8003e3e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d14d      	bne.n	8003dd8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d016      	beq.n	8003d70 <I2C_Master_ADDR+0x228>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d013      	beq.n	8003d70 <I2C_Master_ADDR+0x228>
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d010      	beq.n	8003d70 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e007      	b.n	8003d80 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d7e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8e:	d117      	bne.n	8003dc0 <I2C_Master_ADDR+0x278>
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d96:	d00b      	beq.n	8003db0 <I2C_Master_ADDR+0x268>
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d008      	beq.n	8003db0 <I2C_Master_ADDR+0x268>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d005      	beq.n	8003db0 <I2C_Master_ADDR+0x268>
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	2b10      	cmp	r3, #16
 8003da8:	d002      	beq.n	8003db0 <I2C_Master_ADDR+0x268>
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d107      	bne.n	8003dc0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dbe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	e032      	b.n	8003e3e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003de6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df6:	d117      	bne.n	8003e28 <I2C_Master_ADDR+0x2e0>
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dfe:	d00b      	beq.n	8003e18 <I2C_Master_ADDR+0x2d0>
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d008      	beq.n	8003e18 <I2C_Master_ADDR+0x2d0>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d005      	beq.n	8003e18 <I2C_Master_ADDR+0x2d0>
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d002      	beq.n	8003e18 <I2C_Master_ADDR+0x2d0>
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d107      	bne.n	8003e28 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e26:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e44:	e00b      	b.n	8003e5e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
}
 8003e5c:	e7ff      	b.n	8003e5e <I2C_Master_ADDR+0x316>
 8003e5e:	bf00      	nop
 8003e60:	3744      	adds	r7, #68	; 0x44
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02b      	beq.n	8003edc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d114      	bne.n	8003edc <I2C_SlaveTransmit_TXE+0x72>
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b29      	cmp	r3, #41	; 0x29
 8003eb6:	d111      	bne.n	8003edc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2221      	movs	r2, #33	; 0x21
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2228      	movs	r2, #40	; 0x28
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff f9e7 	bl	80032aa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d011      	beq.n	8003f1a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02c      	beq.n	8003f9a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d114      	bne.n	8003f9a <I2C_SlaveReceive_RXNE+0x74>
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b2a      	cmp	r3, #42	; 0x2a
 8003f74:	d111      	bne.n	8003f9a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2222      	movs	r2, #34	; 0x22
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2228      	movs	r2, #40	; 0x28
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff f992 	bl	80032be <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d012      	beq.n	8003fda <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004000:	2b28      	cmp	r3, #40	; 0x28
 8004002:	d125      	bne.n	8004050 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004012:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	81bb      	strh	r3, [r7, #12]
 8004032:	e002      	b.n	800403a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004042:	89ba      	ldrh	r2, [r7, #12]
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff f942 	bl	80032d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800404e:	e00e      	b.n	800406e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004096:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d4:	d172      	bne.n	80041bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b22      	cmp	r3, #34	; 0x22
 80040da:	d002      	beq.n	80040e2 <I2C_Slave_STOPF+0x6a>
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b2a      	cmp	r3, #42	; 0x2a
 80040e0:	d135      	bne.n	800414e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004114:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe f95e 	bl	80023dc <HAL_DMA_GetState>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d049      	beq.n	80041ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	4a69      	ldr	r2, [pc, #420]	; (80042d0 <I2C_Slave_STOPF+0x258>)
 800412c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd ffa6 	bl	8002084 <HAL_DMA_Abort_IT>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03d      	beq.n	80041ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004148:	4610      	mov	r0, r2
 800414a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800414c:	e035      	b.n	80041ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	b29a      	uxth	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f043 0204 	orr.w	r2, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004180:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe f928 	bl	80023dc <HAL_DMA_GetState>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d014      	beq.n	80041bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	4a4e      	ldr	r2, [pc, #312]	; (80042d0 <I2C_Slave_STOPF+0x258>)
 8004198:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fd ff70 	bl	8002084 <HAL_DMA_Abort_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041b4:	4610      	mov	r0, r2
 80041b6:	4798      	blx	r3
 80041b8:	e000      	b.n	80041bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d03e      	beq.n	8004244 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d112      	bne.n	80041fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d112      	bne.n	800422e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f843 	bl	80042d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004252:	e039      	b.n	80042c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b2a      	cmp	r3, #42	; 0x2a
 8004258:	d109      	bne.n	800426e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2228      	movs	r2, #40	; 0x28
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff f828 	bl	80032be <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b28      	cmp	r3, #40	; 0x28
 8004278:	d111      	bne.n	800429e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <I2C_Slave_STOPF+0x25c>)
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff f829 	bl	80032ee <HAL_I2C_ListenCpltCallback>
}
 800429c:	e014      	b.n	80042c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	2b22      	cmp	r3, #34	; 0x22
 80042a4:	d002      	beq.n	80042ac <I2C_Slave_STOPF+0x234>
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b22      	cmp	r3, #34	; 0x22
 80042aa:	d10d      	bne.n	80042c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fe fffb 	bl	80032be <HAL_I2C_SlaveRxCpltCallback>
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	08004865 	.word	0x08004865
 80042d4:	ffff0000 	.word	0xffff0000

080042d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042f0:	7bbb      	ldrb	r3, [r7, #14]
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d002      	beq.n	80042fc <I2C_ITError+0x24>
 80042f6:	7bbb      	ldrb	r3, [r7, #14]
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d10a      	bne.n	8004312 <I2C_ITError+0x3a>
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b22      	cmp	r3, #34	; 0x22
 8004300:	d107      	bne.n	8004312 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004310:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004318:	2b28      	cmp	r3, #40	; 0x28
 800431a:	d107      	bne.n	800432c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2228      	movs	r2, #40	; 0x28
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800432a:	e015      	b.n	8004358 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433a:	d00a      	beq.n	8004352 <I2C_ITError+0x7a>
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b60      	cmp	r3, #96	; 0x60
 8004340:	d007      	beq.n	8004352 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004366:	d162      	bne.n	800442e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004376:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d020      	beq.n	80043c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	4a6a      	ldr	r2, [pc, #424]	; (8004534 <I2C_ITError+0x25c>)
 800438c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	4618      	mov	r0, r3
 8004394:	f7fd fe76 	bl	8002084 <HAL_DMA_Abort_IT>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 8089 	beq.w	80044b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043c2:	4610      	mov	r0, r2
 80043c4:	4798      	blx	r3
 80043c6:	e074      	b.n	80044b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	4a59      	ldr	r2, [pc, #356]	; (8004534 <I2C_ITError+0x25c>)
 80043ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd fe55 	bl	8002084 <HAL_DMA_Abort_IT>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d068      	beq.n	80044b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b40      	cmp	r3, #64	; 0x40
 80043ec:	d10b      	bne.n	8004406 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004428:	4610      	mov	r0, r2
 800442a:	4798      	blx	r3
 800442c:	e041      	b.n	80044b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b60      	cmp	r3, #96	; 0x60
 8004438:	d125      	bne.n	8004486 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b40      	cmp	r3, #64	; 0x40
 8004454:	d10b      	bne.n	800446e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fe ff5d 	bl	800333e <HAL_I2C_AbortCpltCallback>
 8004484:	e015      	b.n	80044b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d10b      	bne.n	80044ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fe ff3c 	bl	800332a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10e      	bne.n	80044e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d113      	bne.n	800452c <I2C_ITError+0x254>
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b28      	cmp	r3, #40	; 0x28
 8004508:	d110      	bne.n	800452c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <I2C_ITError+0x260>)
 800450e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe fee1 	bl	80032ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	08004865 	.word	0x08004865
 8004538:	ffff0000 	.word	0xffff0000

0800453c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	460b      	mov	r3, r1
 800454a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d006      	beq.n	8004566 <I2C_MasterRequestWrite+0x2a>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d003      	beq.n	8004566 <I2C_MasterRequestWrite+0x2a>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004564:	d108      	bne.n	8004578 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e00b      	b.n	8004590 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	2b12      	cmp	r3, #18
 800457e:	d107      	bne.n	8004590 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fa09 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d103      	bne.n	80045c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e035      	b.n	8004630 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045cc:	d108      	bne.n	80045e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045dc:	611a      	str	r2, [r3, #16]
 80045de:	e01b      	b.n	8004618 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045e0:	897b      	ldrh	r3, [r7, #10]
 80045e2:	11db      	asrs	r3, r3, #7
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0306 	and.w	r3, r3, #6
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f063 030f 	orn	r3, r3, #15
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	490e      	ldr	r1, [pc, #56]	; (8004638 <I2C_MasterRequestWrite+0xfc>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fa2f 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e010      	b.n	8004630 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4907      	ldr	r1, [pc, #28]	; (800463c <I2C_MasterRequestWrite+0x100>)
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa1f 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	00010008 	.word	0x00010008
 800463c:	00010002 	.word	0x00010002

08004640 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004672:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	2200      	movs	r2, #0
 8004682:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	2200      	movs	r2, #0
 8004692:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800469a:	2b21      	cmp	r3, #33	; 0x21
 800469c:	d007      	beq.n	80046ae <I2C_DMAXferCplt+0x6e>
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80046a4:	2b22      	cmp	r3, #34	; 0x22
 80046a6:	d131      	bne.n	800470c <I2C_DMAXferCplt+0xcc>
 80046a8:	7cbb      	ldrb	r3, [r7, #18]
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d12e      	bne.n	800470c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046bc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	2b29      	cmp	r3, #41	; 0x29
 80046c8:	d10a      	bne.n	80046e0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2221      	movs	r2, #33	; 0x21
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2228      	movs	r2, #40	; 0x28
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046d8:	6978      	ldr	r0, [r7, #20]
 80046da:	f7fe fde6 	bl	80032aa <HAL_I2C_SlaveTxCpltCallback>
 80046de:	e00c      	b.n	80046fa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b2a      	cmp	r3, #42	; 0x2a
 80046e4:	d109      	bne.n	80046fa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2222      	movs	r2, #34	; 0x22
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2228      	movs	r2, #40	; 0x28
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f7fe fde2 	bl	80032be <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004708:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800470a:	e06a      	b.n	80047e2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d064      	beq.n	80047e2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004730:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004740:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004748:	d009      	beq.n	800475e <I2C_DMAXferCplt+0x11e>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d006      	beq.n	800475e <I2C_DMAXferCplt+0x11e>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004756:	d002      	beq.n	800475e <I2C_DMAXferCplt+0x11e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b20      	cmp	r3, #32
 800475c:	d107      	bne.n	800476e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800477c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800479c:	6978      	ldr	r0, [r7, #20]
 800479e:	f7fe fdc4 	bl	800332a <HAL_I2C_ErrorCallback>
}
 80047a2:	e01e      	b.n	80047e2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d10a      	bne.n	80047ce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	f7fe fda5 	bl	8003316 <HAL_I2C_MemRxCpltCallback>
}
 80047cc:	e009      	b.n	80047e2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2212      	movs	r2, #18
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80047dc:	6978      	ldr	r0, [r7, #20]
 80047de:	f7fc fbf5 	bl	8000fcc <HAL_I2C_MasterRxCpltCallback>
}
 80047e2:	bf00      	nop
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004804:	2200      	movs	r2, #0
 8004806:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	2200      	movs	r2, #0
 8004816:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fd fded 	bl	80023f8 <HAL_DMA_GetError>
 800481e:	4603      	mov	r3, r0
 8004820:	2b02      	cmp	r3, #2
 8004822:	d01b      	beq.n	800485c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004832:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f043 0210 	orr.w	r2, r3, #16
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7fe fd67 	bl	800332a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800487e:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <I2C_DMAAbort+0x148>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	08db      	lsrs	r3, r3, #3
 8004884:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <I2C_DMAAbort+0x14c>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	0a1a      	lsrs	r2, r3, #8
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00da      	lsls	r2, r3, #3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048aa:	e00a      	b.n	80048c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c0:	d0ea      	beq.n	8004898 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ce:	2200      	movs	r2, #0
 80048d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	2200      	movs	r2, #0
 80048e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	2200      	movs	r2, #0
 8004906:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	2200      	movs	r2, #0
 8004916:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b60      	cmp	r3, #96	; 0x60
 8004932:	d10e      	bne.n	8004952 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800494a:	6978      	ldr	r0, [r7, #20]
 800494c:	f7fe fcf7 	bl	800333e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004950:	e027      	b.n	80049a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004958:	2b28      	cmp	r3, #40	; 0x28
 800495a:	d117      	bne.n	800498c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800497a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2228      	movs	r2, #40	; 0x28
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800498a:	e007      	b.n	800499c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800499c:	6978      	ldr	r0, [r7, #20]
 800499e:	f7fe fcc4 	bl	800332a <HAL_I2C_ErrorCallback>
}
 80049a2:	bf00      	nop
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000010 	.word	0x20000010
 80049b0:	14f8b589 	.word	0x14f8b589

080049b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c4:	e025      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d021      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fd f8c5 	bl	8001b5c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e023      	b.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10d      	bne.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	43da      	mvns	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	e00c      	b.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf0c      	ite	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	2300      	movne	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d0b6      	beq.n	80049c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a70:	e051      	b.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d123      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e046      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d021      	beq.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad2:	f7fd f843 	bl	8001b5c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d116      	bne.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e020      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10c      	bne.n	8004b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	43da      	mvns	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e00b      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	43da      	mvns	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d18d      	bne.n	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	e02d      	b.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f8aa 	bl	8004cc8 <I2C_IsAcknowledgeFailed>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e02d      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d021      	beq.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fc ffe9 	bl	8001b5c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d116      	bne.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e007      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d1ca      	bne.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bee:	e02d      	b.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f869 	bl	8004cc8 <I2C_IsAcknowledgeFailed>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e02d      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d021      	beq.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c08:	f7fc ffa8 	bl	8001b5c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f043 0220 	orr.w	r2, r3, #32
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e007      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d1ca      	bne.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	0a1a      	lsrs	r2, r3, #8
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d107      	bne.n	8004ca2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e008      	b.n	8004cb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb0:	d0e9      	beq.n	8004c86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	20000010 	.word	0x20000010
 8004cc4:	14f8b589 	.word	0x14f8b589

08004cc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cde:	d11b      	bne.n	8004d18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ce8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f043 0204 	orr.w	r2, r3, #4
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d36:	d103      	bne.n	8004d40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d3e:	e007      	b.n	8004d50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d48:	d102      	bne.n	8004d50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e267      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d075      	beq.n	8004e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7a:	4b88      	ldr	r3, [pc, #544]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d00c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d86:	4b85      	ldr	r3, [pc, #532]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d112      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b82      	ldr	r3, [pc, #520]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9e:	d10b      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	4b7e      	ldr	r3, [pc, #504]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05b      	beq.n	8004e64 <HAL_RCC_OscConfig+0x108>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d157      	bne.n	8004e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e242      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d106      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x74>
 8004dc2:	4b76      	ldr	r3, [pc, #472]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a75      	ldr	r2, [pc, #468]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e01d      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x98>
 8004dda:	4b70      	ldr	r3, [pc, #448]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a6f      	ldr	r2, [pc, #444]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b6d      	ldr	r3, [pc, #436]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6c      	ldr	r2, [pc, #432]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e00b      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004df4:	4b69      	ldr	r3, [pc, #420]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a68      	ldr	r2, [pc, #416]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b66      	ldr	r3, [pc, #408]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a65      	ldr	r2, [pc, #404]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fc fea2 	bl	8001b5c <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fc fe9e 	bl	8001b5c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e207      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4b5b      	ldr	r3, [pc, #364]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0xc0>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fc fe8e 	bl	8001b5c <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fc fe8a 	bl	8001b5c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e1f3      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	4b51      	ldr	r3, [pc, #324]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0xe8>
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d063      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e72:	4b4a      	ldr	r3, [pc, #296]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7e:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d11c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b44      	ldr	r3, [pc, #272]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d116      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e96:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d001      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e1c7      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	4b3b      	ldr	r3, [pc, #236]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4937      	ldr	r1, [pc, #220]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	e03a      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <HAL_RCC_OscConfig+0x244>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fc fe43 	bl	8001b5c <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fc fe3f 	bl	8001b5c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1a8      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4925      	ldr	r1, [pc, #148]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCC_OscConfig+0x244>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fc fe22 	bl	8001b5c <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f1c:	f7fc fe1e 	bl	8001b5c <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e187      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d036      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <HAL_RCC_OscConfig+0x248>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fc fe02 	bl	8001b5c <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fc fdfe 	bl	8001b5c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e167      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x200>
 8004f7a:	e01b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7c:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <HAL_RCC_OscConfig+0x248>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f82:	f7fc fdeb 	bl	8001b5c <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	e00e      	b.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7fc fde7 	bl	8001b5c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d907      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e150      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470000 	.word	0x42470000
 8004fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	4b88      	ldr	r3, [pc, #544]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ea      	bne.n	8004f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8097 	beq.w	80050f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b81      	ldr	r3, [pc, #516]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	4b7d      	ldr	r3, [pc, #500]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a7c      	ldr	r2, [pc, #496]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe2:	4b7a      	ldr	r3, [pc, #488]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b77      	ldr	r3, [pc, #476]	; (80051d0 <HAL_RCC_OscConfig+0x474>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d118      	bne.n	8005030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffe:	4b74      	ldr	r3, [pc, #464]	; (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a73      	ldr	r2, [pc, #460]	; (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500a:	f7fc fda7 	bl	8001b5c <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fc fda3 	bl	8001b5c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e10c      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	4b6a      	ldr	r3, [pc, #424]	; (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x2ea>
 8005038:	4b64      	ldr	r3, [pc, #400]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	4a63      	ldr	r2, [pc, #396]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6713      	str	r3, [r2, #112]	; 0x70
 8005044:	e01c      	b.n	8005080 <HAL_RCC_OscConfig+0x324>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x30c>
 800504e:	4b5f      	ldr	r3, [pc, #380]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	4a5e      	ldr	r2, [pc, #376]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	6713      	str	r3, [r2, #112]	; 0x70
 800505a:	4b5c      	ldr	r3, [pc, #368]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	4a5b      	ldr	r2, [pc, #364]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6713      	str	r3, [r2, #112]	; 0x70
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0x324>
 8005068:	4b58      	ldr	r3, [pc, #352]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	4a57      	ldr	r2, [pc, #348]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	6713      	str	r3, [r2, #112]	; 0x70
 8005074:	4b55      	ldr	r3, [pc, #340]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005078:	4a54      	ldr	r2, [pc, #336]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 800507a:	f023 0304 	bic.w	r3, r3, #4
 800507e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fc fd68 	bl	8001b5c <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fc fd64 	bl	8001b5c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0cb      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a6:	4b49      	ldr	r3, [pc, #292]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ee      	beq.n	8005090 <HAL_RCC_OscConfig+0x334>
 80050b2:	e014      	b.n	80050de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b4:	f7fc fd52 	bl	8001b5c <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fc fd4e 	bl	8001b5c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0b5      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d2:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1ee      	bne.n	80050bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d105      	bne.n	80050f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e4:	4b39      	ldr	r3, [pc, #228]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	4a38      	ldr	r2, [pc, #224]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a1 	beq.w	800523c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050fa:	4b34      	ldr	r3, [pc, #208]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b08      	cmp	r3, #8
 8005104:	d05c      	beq.n	80051c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d141      	bne.n	8005192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b31      	ldr	r3, [pc, #196]	; (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fc fd22 	bl	8001b5c <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800511c:	f7fc fd1e 	bl	8001b5c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e087      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	4b27      	ldr	r3, [pc, #156]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	3b01      	subs	r3, #1
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	061b      	lsls	r3, r3, #24
 800515e:	491b      	ldr	r1, [pc, #108]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fc fcf7 	bl	8001b5c <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005172:	f7fc fcf3 	bl	8001b5c <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e05c      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x416>
 8005190:	e054      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fc fce0 	bl	8001b5c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fc fcdc 	bl	8001b5c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e045      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCC_OscConfig+0x470>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x444>
 80051be:	e03d      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e038      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40007000 	.word	0x40007000
 80051d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <HAL_RCC_OscConfig+0x4ec>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d028      	beq.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d121      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d11a      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005208:	4013      	ands	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800520e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005210:	4293      	cmp	r3, r2
 8005212:	d111      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	3b01      	subs	r3, #1
 8005222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d107      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800

0800524c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0cc      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b68      	ldr	r3, [pc, #416]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d90c      	bls.n	8005288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b65      	ldr	r3, [pc, #404]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b63      	ldr	r3, [pc, #396]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0b8      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d020      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a0:	4b59      	ldr	r3, [pc, #356]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a58      	ldr	r2, [pc, #352]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b8:	4b53      	ldr	r3, [pc, #332]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a52      	ldr	r2, [pc, #328]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c4:	4b50      	ldr	r3, [pc, #320]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	494d      	ldr	r1, [pc, #308]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d044      	beq.n	800536c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d119      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d003      	beq.n	800530a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	2b03      	cmp	r3, #3
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e06f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531a:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e067      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532a:	4b37      	ldr	r3, [pc, #220]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f023 0203 	bic.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4934      	ldr	r1, [pc, #208]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800533c:	f7fc fc0e 	bl	8001b5c <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	e00a      	b.n	800535a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005344:	f7fc fc0a 	bl	8001b5c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e04f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 020c 	and.w	r2, r3, #12
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	429a      	cmp	r2, r3
 800536a:	d1eb      	bne.n	8005344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800536c:	4b25      	ldr	r3, [pc, #148]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d20c      	bcs.n	8005394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e032      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4916      	ldr	r1, [pc, #88]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053be:	4b12      	ldr	r3, [pc, #72]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	490e      	ldr	r1, [pc, #56]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053d2:	f000 f821 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	490a      	ldr	r1, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x1c0>)
 80053e4:	5ccb      	ldrb	r3, [r1, r3]
 80053e6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fc fb6e 	bl	8001ad4 <HAL_InitTick>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40023c00 	.word	0x40023c00
 8005408:	40023800 	.word	0x40023800
 800540c:	08009d98 	.word	0x08009d98
 8005410:	20000010 	.word	0x20000010
 8005414:	20000014 	.word	0x20000014

08005418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800541c:	b094      	sub	sp, #80	; 0x50
 800541e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
 8005424:	2300      	movs	r3, #0
 8005426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005428:	2300      	movs	r3, #0
 800542a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005430:	4b79      	ldr	r3, [pc, #484]	; (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b08      	cmp	r3, #8
 800543a:	d00d      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x40>
 800543c:	2b08      	cmp	r3, #8
 800543e:	f200 80e1 	bhi.w	8005604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x34>
 8005446:	2b04      	cmp	r3, #4
 8005448:	d003      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0x3a>
 800544a:	e0db      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800544c:	4b73      	ldr	r3, [pc, #460]	; (800561c <HAL_RCC_GetSysClockFreq+0x204>)
 800544e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005450:	e0db      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005452:	4b73      	ldr	r3, [pc, #460]	; (8005620 <HAL_RCC_GetSysClockFreq+0x208>)
 8005454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005456:	e0d8      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005458:	4b6f      	ldr	r3, [pc, #444]	; (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005460:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005462:	4b6d      	ldr	r3, [pc, #436]	; (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d063      	beq.n	8005536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546e:	4b6a      	ldr	r3, [pc, #424]	; (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	099b      	lsrs	r3, r3, #6
 8005474:	2200      	movs	r2, #0
 8005476:	63bb      	str	r3, [r7, #56]	; 0x38
 8005478:	63fa      	str	r2, [r7, #60]	; 0x3c
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005480:	633b      	str	r3, [r7, #48]	; 0x30
 8005482:	2300      	movs	r3, #0
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
 8005486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800548a:	4622      	mov	r2, r4
 800548c:	462b      	mov	r3, r5
 800548e:	f04f 0000 	mov.w	r0, #0
 8005492:	f04f 0100 	mov.w	r1, #0
 8005496:	0159      	lsls	r1, r3, #5
 8005498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800549c:	0150      	lsls	r0, r2, #5
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4621      	mov	r1, r4
 80054a4:	1a51      	subs	r1, r2, r1
 80054a6:	6139      	str	r1, [r7, #16]
 80054a8:	4629      	mov	r1, r5
 80054aa:	eb63 0301 	sbc.w	r3, r3, r1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054bc:	4659      	mov	r1, fp
 80054be:	018b      	lsls	r3, r1, #6
 80054c0:	4651      	mov	r1, sl
 80054c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054c6:	4651      	mov	r1, sl
 80054c8:	018a      	lsls	r2, r1, #6
 80054ca:	4651      	mov	r1, sl
 80054cc:	ebb2 0801 	subs.w	r8, r2, r1
 80054d0:	4659      	mov	r1, fp
 80054d2:	eb63 0901 	sbc.w	r9, r3, r1
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ea:	4690      	mov	r8, r2
 80054ec:	4699      	mov	r9, r3
 80054ee:	4623      	mov	r3, r4
 80054f0:	eb18 0303 	adds.w	r3, r8, r3
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	462b      	mov	r3, r5
 80054f8:	eb49 0303 	adc.w	r3, r9, r3
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800550a:	4629      	mov	r1, r5
 800550c:	024b      	lsls	r3, r1, #9
 800550e:	4621      	mov	r1, r4
 8005510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005514:	4621      	mov	r1, r4
 8005516:	024a      	lsls	r2, r1, #9
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551e:	2200      	movs	r2, #0
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
 8005522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005528:	f7fb fb96 	bl	8000c58 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4613      	mov	r3, r2
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005534:	e058      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005536:	4b38      	ldr	r3, [pc, #224]	; (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	099b      	lsrs	r3, r3, #6
 800553c:	2200      	movs	r2, #0
 800553e:	4618      	mov	r0, r3
 8005540:	4611      	mov	r1, r2
 8005542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	2300      	movs	r3, #0
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
 800554c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005550:	4642      	mov	r2, r8
 8005552:	464b      	mov	r3, r9
 8005554:	f04f 0000 	mov.w	r0, #0
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	0159      	lsls	r1, r3, #5
 800555e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005562:	0150      	lsls	r0, r2, #5
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4641      	mov	r1, r8
 800556a:	ebb2 0a01 	subs.w	sl, r2, r1
 800556e:	4649      	mov	r1, r9
 8005570:	eb63 0b01 	sbc.w	fp, r3, r1
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005588:	ebb2 040a 	subs.w	r4, r2, sl
 800558c:	eb63 050b 	sbc.w	r5, r3, fp
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	00eb      	lsls	r3, r5, #3
 800559a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800559e:	00e2      	lsls	r2, r4, #3
 80055a0:	4614      	mov	r4, r2
 80055a2:	461d      	mov	r5, r3
 80055a4:	4643      	mov	r3, r8
 80055a6:	18e3      	adds	r3, r4, r3
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	464b      	mov	r3, r9
 80055ac:	eb45 0303 	adc.w	r3, r5, r3
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055be:	4629      	mov	r1, r5
 80055c0:	028b      	lsls	r3, r1, #10
 80055c2:	4621      	mov	r1, r4
 80055c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055c8:	4621      	mov	r1, r4
 80055ca:	028a      	lsls	r2, r1, #10
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d2:	2200      	movs	r2, #0
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	61fa      	str	r2, [r7, #28]
 80055d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055dc:	f7fb fb3c 	bl	8000c58 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4613      	mov	r3, r2
 80055e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	3301      	adds	r3, #1
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005602:	e002      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_GetSysClockFreq+0x204>)
 8005606:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800560c:	4618      	mov	r0, r3
 800560e:	3750      	adds	r7, #80	; 0x50
 8005610:	46bd      	mov	sp, r7
 8005612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	00f42400 	.word	0x00f42400
 8005620:	007a1200 	.word	0x007a1200

08005624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005628:	4b03      	ldr	r3, [pc, #12]	; (8005638 <HAL_RCC_GetHCLKFreq+0x14>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000010 	.word	0x20000010

0800563c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005640:	f7ff fff0 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005644:	4602      	mov	r2, r0
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0a9b      	lsrs	r3, r3, #10
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4903      	ldr	r1, [pc, #12]	; (8005660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005652:	5ccb      	ldrb	r3, [r1, r3]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	08009da8 	.word	0x08009da8

08005664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005668:	f7ff ffdc 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 800566c:	4602      	mov	r2, r0
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	0b5b      	lsrs	r3, r3, #13
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	4903      	ldr	r1, [pc, #12]	; (8005688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800567a:	5ccb      	ldrb	r3, [r1, r3]
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40023800 	.word	0x40023800
 8005688:	08009da8 	.word	0x08009da8

0800568c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e041      	b.n	8005722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fb ffe6 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 fa88 	bl	8005be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d001      	beq.n	8005744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e044      	b.n	80057ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <HAL_TIM_Base_Start_IT+0xb0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x6c>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576e:	d013      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x6c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1a      	ldr	r2, [pc, #104]	; (80057e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x6c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x6c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIM_Base_Start_IT+0x6c>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <HAL_TIM_Base_Start_IT+0xc0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d111      	bne.n	80057bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d010      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	e007      	b.n	80057cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40000800 	.word	0x40000800
 80057e8:	40000c00 	.word	0x40000c00
 80057ec:	40014000 	.word	0x40014000

080057f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b02      	cmp	r3, #2
 8005804:	d122      	bne.n	800584c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	d11b      	bne.n	800584c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0202 	mvn.w	r2, #2
 800581c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9b5 	bl	8005ba2 <HAL_TIM_IC_CaptureCallback>
 8005838:	e005      	b.n	8005846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9a7 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f9b8 	bl	8005bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b04      	cmp	r3, #4
 8005858:	d122      	bne.n	80058a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b04      	cmp	r3, #4
 8005866:	d11b      	bne.n	80058a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0204 	mvn.w	r2, #4
 8005870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f98b 	bl	8005ba2 <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f97d 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f98e 	bl	8005bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d122      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0208 	mvn.w	r2, #8
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2204      	movs	r2, #4
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f961 	bl	8005ba2 <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f953 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f964 	bl	8005bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d122      	bne.n	8005948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b10      	cmp	r3, #16
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0210 	mvn.w	r2, #16
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2208      	movs	r2, #8
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f937 	bl	8005ba2 <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f929 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f93a 	bl	8005bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b01      	cmp	r3, #1
 8005954:	d10e      	bne.n	8005974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d107      	bne.n	8005974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0201 	mvn.w	r2, #1
 800596c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fb faf0 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597e:	2b80      	cmp	r3, #128	; 0x80
 8005980:	d10e      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	2b80      	cmp	r3, #128	; 0x80
 800598e:	d107      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fab2 	bl	8005f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f8ff 	bl	8005bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0220 	mvn.w	r2, #32
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa7c 	bl	8005ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_TIM_ConfigClockSource+0x1c>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e0b4      	b.n	8005b86 <HAL_TIM_ConfigClockSource+0x186>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a54:	d03e      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5a:	f200 8087 	bhi.w	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	f000 8086 	beq.w	8005b72 <HAL_TIM_ConfigClockSource+0x172>
 8005a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6a:	d87f      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d01a      	beq.n	8005aa6 <HAL_TIM_ConfigClockSource+0xa6>
 8005a70:	2b70      	cmp	r3, #112	; 0x70
 8005a72:	d87b      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b60      	cmp	r3, #96	; 0x60
 8005a76:	d050      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x11a>
 8005a78:	2b60      	cmp	r3, #96	; 0x60
 8005a7a:	d877      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b50      	cmp	r3, #80	; 0x50
 8005a7e:	d03c      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0xfa>
 8005a80:	2b50      	cmp	r3, #80	; 0x50
 8005a82:	d873      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d058      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x13a>
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d86f      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d064      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x15a>
 8005a90:	2b30      	cmp	r3, #48	; 0x30
 8005a92:	d86b      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d060      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x15a>
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d867      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d05c      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x15a>
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d05a      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x15a>
 8005aa4:	e062      	b.n	8005b6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6899      	ldr	r1, [r3, #8]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f000 f98d 	bl	8005dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	609a      	str	r2, [r3, #8]
      break;
 8005ad2:	e04f      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	6899      	ldr	r1, [r3, #8]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f000 f976 	bl	8005dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af6:	609a      	str	r2, [r3, #8]
      break;
 8005af8:	e03c      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f000 f8ea 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2150      	movs	r1, #80	; 0x50
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f943 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005b18:	e02c      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f000 f909 	bl	8005d3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2160      	movs	r1, #96	; 0x60
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f933 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005b38:	e01c      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f000 f8ca 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2140      	movs	r1, #64	; 0x40
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f923 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005b58:	e00c      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f000 f91a 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005b6a:	e003      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b70:	e000      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a34      	ldr	r2, [pc, #208]	; (8005cc4 <TIM_Base_SetConfig+0xe4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00f      	beq.n	8005c18 <TIM_Base_SetConfig+0x38>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfe:	d00b      	beq.n	8005c18 <TIM_Base_SetConfig+0x38>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a31      	ldr	r2, [pc, #196]	; (8005cc8 <TIM_Base_SetConfig+0xe8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d007      	beq.n	8005c18 <TIM_Base_SetConfig+0x38>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a30      	ldr	r2, [pc, #192]	; (8005ccc <TIM_Base_SetConfig+0xec>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_Base_SetConfig+0x38>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2f      	ldr	r2, [pc, #188]	; (8005cd0 <TIM_Base_SetConfig+0xf0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d108      	bne.n	8005c2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a25      	ldr	r2, [pc, #148]	; (8005cc4 <TIM_Base_SetConfig+0xe4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01b      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c38:	d017      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <TIM_Base_SetConfig+0xe8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <TIM_Base_SetConfig+0xec>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <TIM_Base_SetConfig+0xf0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <TIM_Base_SetConfig+0xf4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <TIM_Base_SetConfig+0xf8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_Base_SetConfig+0x8a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1d      	ldr	r2, [pc, #116]	; (8005cdc <TIM_Base_SetConfig+0xfc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d108      	bne.n	8005c7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <TIM_Base_SetConfig+0xe4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d103      	bne.n	8005cb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	615a      	str	r2, [r3, #20]
}
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40000c00 	.word	0x40000c00
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800

08005ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 030a 	bic.w	r3, r3, #10
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b087      	sub	sp, #28
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0210 	bic.w	r2, r3, #16
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	031b      	lsls	r3, r3, #12
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f043 0307 	orr.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	021a      	lsls	r2, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e050      	b.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1c      	ldr	r2, [pc, #112]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d013      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a18      	ldr	r2, [pc, #96]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10c      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40014000 	.word	0x40014000

08005ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e03f      	b.n	8005faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb fbc6 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2224      	movs	r2, #36	; 0x24
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fdd1 	bl	8006b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	; 0x30
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d165      	bne.n	800609a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_UART_Transmit_DMA+0x26>
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e05e      	b.n	800609c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_UART_Transmit_DMA+0x38>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e057      	b.n	800609c <HAL_UART_Transmit_DMA+0xe8>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2221      	movs	r2, #33	; 0x21
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <HAL_UART_Transmit_DMA+0xf0>)
 800601a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006020:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_UART_Transmit_DMA+0xf4>)
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	4a20      	ldr	r2, [pc, #128]	; (80060ac <HAL_UART_Transmit_DMA+0xf8>)
 800602a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	2200      	movs	r2, #0
 8006032:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3304      	adds	r3, #4
 8006048:	461a      	mov	r2, r3
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	f7fb ff52 	bl	8001ef4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006058:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3314      	adds	r3, #20
 8006068:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	617b      	str	r3, [r7, #20]
   return(result);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006082:	627a      	str	r2, [r7, #36]	; 0x24
 8006084:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6a39      	ldr	r1, [r7, #32]
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e5      	bne.n	8006062 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3730      	adds	r7, #48	; 0x30
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	08006635 	.word	0x08006635
 80060a8:	080066cf 	.word	0x080066cf
 80060ac:	080066eb 	.word	0x080066eb

080060b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b0ba      	sub	sp, #232	; 0xe8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10f      	bne.n	8006116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <HAL_UART_IRQHandler+0x66>
 8006102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fc3c 	bl	800698c <UART_Receive_IT>
      return;
 8006114:	e256      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80de 	beq.w	80062dc <HAL_UART_IRQHandler+0x22c>
 8006120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d106      	bne.n	800613a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80d1 	beq.w	80062dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_UART_IRQHandler+0xae>
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f043 0201 	orr.w	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <HAL_UART_IRQHandler+0xd2>
 800616a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f043 0202 	orr.w	r2, r3, #2
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_UART_IRQHandler+0xf6>
 800618e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f043 0204 	orr.w	r2, r3, #4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d011      	beq.n	80061d6 <HAL_UART_IRQHandler+0x126>
 80061b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0208 	orr.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 81ed 	beq.w	80065ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d008      	beq.n	80061fe <HAL_UART_IRQHandler+0x14e>
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fbc7 	bl	800698c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	bf0c      	ite	eq
 800620c:	2301      	moveq	r3, #1
 800620e:	2300      	movne	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <HAL_UART_IRQHandler+0x17a>
 8006222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d04f      	beq.n	80062ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 facf 	bl	80067ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d141      	bne.n	80062c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3314      	adds	r3, #20
 8006244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800626a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800626e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1d9      	bne.n	800623e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	2b00      	cmp	r3, #0
 8006290:	d013      	beq.n	80062ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	4a7d      	ldr	r2, [pc, #500]	; (800648c <HAL_UART_IRQHandler+0x3dc>)
 8006298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fb fef0 	bl	8002084 <HAL_DMA_Abort_IT>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d016      	beq.n	80062d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062b4:	4610      	mov	r0, r2
 80062b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	e00e      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9a4 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	e00a      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9a0 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e006      	b.n	80062d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f99c 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062d6:	e170      	b.n	80065ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	bf00      	nop
    return;
 80062da:	e16e      	b.n	80065ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	f040 814a 	bne.w	800657a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8143 	beq.w	800657a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 813c 	beq.w	800657a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	f040 80b4 	bne.w	8006490 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8140 	beq.w	80065be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006346:	429a      	cmp	r2, r3
 8006348:	f080 8139 	bcs.w	80065be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	f000 8088 	beq.w	8006472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800637c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800638e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800639a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1d9      	bne.n	8006362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3314      	adds	r3, #20
 80063b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3314      	adds	r3, #20
 80063ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e1      	bne.n	80063ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3314      	adds	r3, #20
 80063f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3314      	adds	r3, #20
 800640a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800640e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800641c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e3      	bne.n	80063ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006442:	f023 0310 	bic.w	r3, r3, #16
 8006446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006454:	65ba      	str	r2, [r7, #88]	; 0x58
 8006456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800645a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e3      	bne.n	8006430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	4618      	mov	r0, r3
 800646e:	f7fb fd99 	bl	8001fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800647a:	b29b      	uxth	r3, r3
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	b29b      	uxth	r3, r3
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8ca 	bl	800661c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006488:	e099      	b.n	80065be <HAL_UART_IRQHandler+0x50e>
 800648a:	bf00      	nop
 800648c:	08006895 	.word	0x08006895
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006498:	b29b      	uxth	r3, r3
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 808b 	beq.w	80065c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8086 	beq.w	80065c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064da:	647a      	str	r2, [r7, #68]	; 0x44
 80064dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e3      	bne.n	80064b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	623b      	str	r3, [r7, #32]
   return(result);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006512:	633a      	str	r2, [r7, #48]	; 0x30
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	60fb      	str	r3, [r7, #12]
   return(result);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006558:	61fa      	str	r2, [r7, #28]
 800655a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	69b9      	ldr	r1, [r7, #24]
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	617b      	str	r3, [r7, #20]
   return(result);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e3      	bne.n	8006534 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800656c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f852 	bl	800661c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006578:	e023      	b.n	80065c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_UART_IRQHandler+0x4ea>
 8006586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f992 	bl	80068bc <UART_Transmit_IT>
    return;
 8006598:	e014      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <HAL_UART_IRQHandler+0x514>
 80065a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9d2 	bl	800695c <UART_EndTransmit_IT>
    return;
 80065b8:	e004      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
    return;
 80065ba:	bf00      	nop
 80065bc:	e002      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
      return;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <HAL_UART_IRQHandler+0x514>
      return;
 80065c2:	bf00      	nop
  }
}
 80065c4:	37e8      	adds	r7, #232	; 0xe8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b090      	sub	sp, #64	; 0x40
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d137      	bne.n	80066c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	2200      	movs	r2, #0
 8006654:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3314      	adds	r3, #20
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	623b      	str	r3, [r7, #32]
   return(result);
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800666c:	63bb      	str	r3, [r7, #56]	; 0x38
 800666e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3314      	adds	r3, #20
 8006674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006676:	633a      	str	r2, [r7, #48]	; 0x30
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800667c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e5      	bne.n	8006656 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800668a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	60fb      	str	r3, [r7, #12]
   return(result);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066aa:	61fa      	str	r2, [r7, #28]
 80066ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	69b9      	ldr	r1, [r7, #24]
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	617b      	str	r3, [r7, #20]
   return(result);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e5      	bne.n	800668a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066be:	e002      	b.n	80066c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80066c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066c2:	f7ff ff83 	bl	80065cc <HAL_UART_TxCpltCallback>
}
 80066c6:	bf00      	nop
 80066c8:	3740      	adds	r7, #64	; 0x40
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff ff7f 	bl	80065e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	bf0c      	ite	eq
 800670a:	2301      	moveq	r3, #1
 800670c:	2300      	movne	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b21      	cmp	r3, #33	; 0x21
 800671c:	d108      	bne.n	8006730 <UART_DMAError+0x46>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800672a:	68b8      	ldr	r0, [r7, #8]
 800672c:	f000 f827 	bl	800677e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b22      	cmp	r3, #34	; 0x22
 8006750:	d108      	bne.n	8006764 <UART_DMAError+0x7a>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800675e:	68b8      	ldr	r0, [r7, #8]
 8006760:	f000 f835 	bl	80067ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	f043 0210 	orr.w	r2, r3, #16
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006770:	68b8      	ldr	r0, [r7, #8]
 8006772:	f7ff ff49 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800677e:	b480      	push	{r7}
 8006780:	b089      	sub	sp, #36	; 0x24
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	60bb      	str	r3, [r7, #8]
   return(result);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	61ba      	str	r2, [r7, #24]
 80067a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6979      	ldr	r1, [r7, #20]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	613b      	str	r3, [r7, #16]
   return(result);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e5      	bne.n	8006786 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80067c2:	bf00      	nop
 80067c4:	3724      	adds	r7, #36	; 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b095      	sub	sp, #84	; 0x54
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067f6:	643a      	str	r2, [r7, #64]	; 0x40
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e5      	bne.n	80067d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3314      	adds	r3, #20
 8006810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	61fb      	str	r3, [r7, #28]
   return(result);
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	64bb      	str	r3, [r7, #72]	; 0x48
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800682a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	2b01      	cmp	r3, #1
 8006844:	d119      	bne.n	800687a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	60bb      	str	r3, [r7, #8]
   return(result);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f023 0310 	bic.w	r3, r3, #16
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006866:	61ba      	str	r2, [r7, #24]
 8006868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6979      	ldr	r1, [r7, #20]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	613b      	str	r3, [r7, #16]
   return(result);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e5      	bne.n	8006846 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006888:	bf00      	nop
 800688a:	3754      	adds	r7, #84	; 0x54
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff feaa 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b21      	cmp	r3, #33	; 0x21
 80068ce:	d13e      	bne.n	800694e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d8:	d114      	bne.n	8006904 <UART_Transmit_IT+0x48>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d110      	bne.n	8006904 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	1c9a      	adds	r2, r3, #2
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]
 8006902:	e008      	b.n	8006916 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	1c59      	adds	r1, r3, #1
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6211      	str	r1, [r2, #32]
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29b      	uxth	r3, r3
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4619      	mov	r1, r3
 8006924:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10f      	bne.n	800694a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006938:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006948:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
  }
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006972:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fe25 	bl	80065cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	; 0x30
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b22      	cmp	r3, #34	; 0x22
 800699e:	f040 80ab 	bne.w	8006af8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069aa:	d117      	bne.n	80069dc <UART_Receive_IT+0x50>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d113      	bne.n	80069dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	629a      	str	r2, [r3, #40]	; 0x28
 80069da:	e026      	b.n	8006a2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ee:	d007      	beq.n	8006a00 <UART_Receive_IT+0x74>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <UART_Receive_IT+0x82>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	e008      	b.n	8006a20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	4619      	mov	r1, r3
 8006a38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d15a      	bne.n	8006af4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0220 	bic.w	r2, r2, #32
 8006a4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0201 	bic.w	r2, r2, #1
 8006a6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d135      	bne.n	8006aea <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	613b      	str	r3, [r7, #16]
   return(result);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa4:	623a      	str	r2, [r7, #32]
 8006aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	69f9      	ldr	r1, [r7, #28]
 8006aaa:	6a3a      	ldr	r2, [r7, #32]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e5      	bne.n	8006a84 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b10      	cmp	r3, #16
 8006ac4:	d10a      	bne.n	8006adc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fd9a 	bl	800661c <HAL_UARTEx_RxEventCallback>
 8006ae8:	e002      	b.n	8006af0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff fd82 	bl	80065f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e002      	b.n	8006afa <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e000      	b.n	8006afa <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3730      	adds	r7, #48	; 0x30
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b08:	b0c0      	sub	sp, #256	; 0x100
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	68d9      	ldr	r1, [r3, #12]
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	ea40 0301 	orr.w	r3, r0, r1
 8006b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b5c:	f021 010c 	bic.w	r1, r1, #12
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7e:	6999      	ldr	r1, [r3, #24]
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	ea40 0301 	orr.w	r3, r0, r1
 8006b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b8f      	ldr	r3, [pc, #572]	; (8006dd0 <UART_SetConfig+0x2cc>)
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d005      	beq.n	8006ba4 <UART_SetConfig+0xa0>
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b8d      	ldr	r3, [pc, #564]	; (8006dd4 <UART_SetConfig+0x2d0>)
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d104      	bne.n	8006bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ba4:	f7fe fd5e 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8006ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bac:	e003      	b.n	8006bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bae:	f7fe fd45 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8006bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc0:	f040 810c 	bne.w	8006ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	462b      	mov	r3, r5
 8006bda:	1891      	adds	r1, r2, r2
 8006bdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bde:	415b      	adcs	r3, r3
 8006be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006be6:	4621      	mov	r1, r4
 8006be8:	eb12 0801 	adds.w	r8, r2, r1
 8006bec:	4629      	mov	r1, r5
 8006bee:	eb43 0901 	adc.w	r9, r3, r1
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	f04f 0300 	mov.w	r3, #0
 8006bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c06:	4690      	mov	r8, r2
 8006c08:	4699      	mov	r9, r3
 8006c0a:	4623      	mov	r3, r4
 8006c0c:	eb18 0303 	adds.w	r3, r8, r3
 8006c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c14:	462b      	mov	r3, r5
 8006c16:	eb49 0303 	adc.w	r3, r9, r3
 8006c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c32:	460b      	mov	r3, r1
 8006c34:	18db      	adds	r3, r3, r3
 8006c36:	653b      	str	r3, [r7, #80]	; 0x50
 8006c38:	4613      	mov	r3, r2
 8006c3a:	eb42 0303 	adc.w	r3, r2, r3
 8006c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c48:	f7fa f806 	bl	8000c58 <__aeabi_uldivmod>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4b61      	ldr	r3, [pc, #388]	; (8006dd8 <UART_SetConfig+0x2d4>)
 8006c52:	fba3 2302 	umull	r2, r3, r3, r2
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	011c      	lsls	r4, r3, #4
 8006c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	1891      	adds	r1, r2, r2
 8006c72:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c74:	415b      	adcs	r3, r3
 8006c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8006c82:	4649      	mov	r1, r9
 8006c84:	eb43 0b01 	adc.w	fp, r3, r1
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c9c:	4692      	mov	sl, r2
 8006c9e:	469b      	mov	fp, r3
 8006ca0:	4643      	mov	r3, r8
 8006ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006caa:	464b      	mov	r3, r9
 8006cac:	eb4b 0303 	adc.w	r3, fp, r3
 8006cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	18db      	adds	r3, r3, r3
 8006ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8006cce:	4613      	mov	r3, r2
 8006cd0:	eb42 0303 	adc.w	r3, r2, r3
 8006cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cde:	f7f9 ffbb 	bl	8000c58 <__aeabi_uldivmod>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	4b3b      	ldr	r3, [pc, #236]	; (8006dd8 <UART_SetConfig+0x2d4>)
 8006cea:	fba3 2301 	umull	r2, r3, r3, r1
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	2264      	movs	r2, #100	; 0x64
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	1acb      	subs	r3, r1, r3
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006cfe:	4b36      	ldr	r3, [pc, #216]	; (8006dd8 <UART_SetConfig+0x2d4>)
 8006d00:	fba3 2302 	umull	r2, r3, r3, r2
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d0c:	441c      	add	r4, r3
 8006d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	1891      	adds	r1, r2, r2
 8006d26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d28:	415b      	adcs	r3, r3
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d30:	4641      	mov	r1, r8
 8006d32:	1851      	adds	r1, r2, r1
 8006d34:	6339      	str	r1, [r7, #48]	; 0x30
 8006d36:	4649      	mov	r1, r9
 8006d38:	414b      	adcs	r3, r1
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d48:	4659      	mov	r1, fp
 8006d4a:	00cb      	lsls	r3, r1, #3
 8006d4c:	4651      	mov	r1, sl
 8006d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d52:	4651      	mov	r1, sl
 8006d54:	00ca      	lsls	r2, r1, #3
 8006d56:	4610      	mov	r0, r2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d64:	464b      	mov	r3, r9
 8006d66:	460a      	mov	r2, r1
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d84:	460b      	mov	r3, r1
 8006d86:	18db      	adds	r3, r3, r3
 8006d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	eb42 0303 	adc.w	r3, r2, r3
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d9a:	f7f9 ff5d 	bl	8000c58 <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <UART_SetConfig+0x2d4>)
 8006da4:	fba3 1302 	umull	r1, r3, r3, r2
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	2164      	movs	r1, #100	; 0x64
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	3332      	adds	r3, #50	; 0x32
 8006db6:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <UART_SetConfig+0x2d4>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	f003 0207 	and.w	r2, r3, #7
 8006dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4422      	add	r2, r4
 8006dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dcc:	e106      	b.n	8006fdc <UART_SetConfig+0x4d8>
 8006dce:	bf00      	nop
 8006dd0:	40011000 	.word	0x40011000
 8006dd4:	40011400 	.word	0x40011400
 8006dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006de6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006dee:	4642      	mov	r2, r8
 8006df0:	464b      	mov	r3, r9
 8006df2:	1891      	adds	r1, r2, r2
 8006df4:	6239      	str	r1, [r7, #32]
 8006df6:	415b      	adcs	r3, r3
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dfe:	4641      	mov	r1, r8
 8006e00:	1854      	adds	r4, r2, r1
 8006e02:	4649      	mov	r1, r9
 8006e04:	eb43 0501 	adc.w	r5, r3, r1
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	00eb      	lsls	r3, r5, #3
 8006e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e16:	00e2      	lsls	r2, r4, #3
 8006e18:	4614      	mov	r4, r2
 8006e1a:	461d      	mov	r5, r3
 8006e1c:	4643      	mov	r3, r8
 8006e1e:	18e3      	adds	r3, r4, r3
 8006e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e24:	464b      	mov	r3, r9
 8006e26:	eb45 0303 	adc.w	r3, r5, r3
 8006e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	008b      	lsls	r3, r1, #2
 8006e4e:	4621      	mov	r1, r4
 8006e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e54:	4621      	mov	r1, r4
 8006e56:	008a      	lsls	r2, r1, #2
 8006e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e5c:	f7f9 fefc 	bl	8000c58 <__aeabi_uldivmod>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4b60      	ldr	r3, [pc, #384]	; (8006fe8 <UART_SetConfig+0x4e4>)
 8006e66:	fba3 2302 	umull	r2, r3, r3, r2
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	011c      	lsls	r4, r3, #4
 8006e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e80:	4642      	mov	r2, r8
 8006e82:	464b      	mov	r3, r9
 8006e84:	1891      	adds	r1, r2, r2
 8006e86:	61b9      	str	r1, [r7, #24]
 8006e88:	415b      	adcs	r3, r3
 8006e8a:	61fb      	str	r3, [r7, #28]
 8006e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e90:	4641      	mov	r1, r8
 8006e92:	1851      	adds	r1, r2, r1
 8006e94:	6139      	str	r1, [r7, #16]
 8006e96:	4649      	mov	r1, r9
 8006e98:	414b      	adcs	r3, r1
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ea8:	4659      	mov	r1, fp
 8006eaa:	00cb      	lsls	r3, r1, #3
 8006eac:	4651      	mov	r1, sl
 8006eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eb2:	4651      	mov	r1, sl
 8006eb4:	00ca      	lsls	r2, r1, #3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	189b      	adds	r3, r3, r2
 8006ec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	460a      	mov	r2, r1
 8006ec8:	eb42 0303 	adc.w	r3, r2, r3
 8006ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ee8:	4649      	mov	r1, r9
 8006eea:	008b      	lsls	r3, r1, #2
 8006eec:	4641      	mov	r1, r8
 8006eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ef2:	4641      	mov	r1, r8
 8006ef4:	008a      	lsls	r2, r1, #2
 8006ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006efa:	f7f9 fead 	bl	8000c58 <__aeabi_uldivmod>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	4b38      	ldr	r3, [pc, #224]	; (8006fe8 <UART_SetConfig+0x4e4>)
 8006f06:	fba3 2301 	umull	r2, r3, r3, r1
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	2264      	movs	r2, #100	; 0x64
 8006f0e:	fb02 f303 	mul.w	r3, r2, r3
 8006f12:	1acb      	subs	r3, r1, r3
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	3332      	adds	r3, #50	; 0x32
 8006f18:	4a33      	ldr	r2, [pc, #204]	; (8006fe8 <UART_SetConfig+0x4e4>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f24:	441c      	add	r4, r3
 8006f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	673b      	str	r3, [r7, #112]	; 0x70
 8006f2e:	677a      	str	r2, [r7, #116]	; 0x74
 8006f30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	1891      	adds	r1, r2, r2
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	415b      	adcs	r3, r3
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f44:	4641      	mov	r1, r8
 8006f46:	1851      	adds	r1, r2, r1
 8006f48:	6039      	str	r1, [r7, #0]
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	414b      	adcs	r3, r1
 8006f4e:	607b      	str	r3, [r7, #4]
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f5c:	4659      	mov	r1, fp
 8006f5e:	00cb      	lsls	r3, r1, #3
 8006f60:	4651      	mov	r1, sl
 8006f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f66:	4651      	mov	r1, sl
 8006f68:	00ca      	lsls	r2, r1, #3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4642      	mov	r2, r8
 8006f72:	189b      	adds	r3, r3, r2
 8006f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f76:	464b      	mov	r3, r9
 8006f78:	460a      	mov	r2, r1
 8006f7a:	eb42 0303 	adc.w	r3, r2, r3
 8006f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	663b      	str	r3, [r7, #96]	; 0x60
 8006f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f98:	4649      	mov	r1, r9
 8006f9a:	008b      	lsls	r3, r1, #2
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	008a      	lsls	r2, r1, #2
 8006fa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006faa:	f7f9 fe55 	bl	8000c58 <__aeabi_uldivmod>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <UART_SetConfig+0x4e4>)
 8006fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	2164      	movs	r1, #100	; 0x64
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	3332      	adds	r3, #50	; 0x32
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <UART_SetConfig+0x4e4>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	f003 020f 	and.w	r2, r3, #15
 8006fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4422      	add	r2, r4
 8006fda:	609a      	str	r2, [r3, #8]
}
 8006fdc:	bf00      	nop
 8006fde:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fe8:	51eb851f 	.word	0x51eb851f

08006fec <__cvt>:
 8006fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	ec55 4b10 	vmov	r4, r5, d0
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	460e      	mov	r6, r1
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	bfbb      	ittet	lt
 8006ffe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007002:	461d      	movlt	r5, r3
 8007004:	2300      	movge	r3, #0
 8007006:	232d      	movlt	r3, #45	; 0x2d
 8007008:	700b      	strb	r3, [r1, #0]
 800700a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800700c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007010:	4691      	mov	r9, r2
 8007012:	f023 0820 	bic.w	r8, r3, #32
 8007016:	bfbc      	itt	lt
 8007018:	4622      	movlt	r2, r4
 800701a:	4614      	movlt	r4, r2
 800701c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007020:	d005      	beq.n	800702e <__cvt+0x42>
 8007022:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007026:	d100      	bne.n	800702a <__cvt+0x3e>
 8007028:	3601      	adds	r6, #1
 800702a:	2102      	movs	r1, #2
 800702c:	e000      	b.n	8007030 <__cvt+0x44>
 800702e:	2103      	movs	r1, #3
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	ab02      	add	r3, sp, #8
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	ec45 4b10 	vmov	d0, r4, r5
 800703c:	4653      	mov	r3, sl
 800703e:	4632      	mov	r2, r6
 8007040:	f000 fe7e 	bl	8007d40 <_dtoa_r>
 8007044:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007048:	4607      	mov	r7, r0
 800704a:	d102      	bne.n	8007052 <__cvt+0x66>
 800704c:	f019 0f01 	tst.w	r9, #1
 8007050:	d022      	beq.n	8007098 <__cvt+0xac>
 8007052:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007056:	eb07 0906 	add.w	r9, r7, r6
 800705a:	d110      	bne.n	800707e <__cvt+0x92>
 800705c:	783b      	ldrb	r3, [r7, #0]
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	d10a      	bne.n	8007078 <__cvt+0x8c>
 8007062:	2200      	movs	r2, #0
 8007064:	2300      	movs	r3, #0
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800706e:	b918      	cbnz	r0, 8007078 <__cvt+0x8c>
 8007070:	f1c6 0601 	rsb	r6, r6, #1
 8007074:	f8ca 6000 	str.w	r6, [sl]
 8007078:	f8da 3000 	ldr.w	r3, [sl]
 800707c:	4499      	add	r9, r3
 800707e:	2200      	movs	r2, #0
 8007080:	2300      	movs	r3, #0
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	f7f9 fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800708a:	b108      	cbz	r0, 8007090 <__cvt+0xa4>
 800708c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007090:	2230      	movs	r2, #48	; 0x30
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	454b      	cmp	r3, r9
 8007096:	d307      	bcc.n	80070a8 <__cvt+0xbc>
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800709c:	1bdb      	subs	r3, r3, r7
 800709e:	4638      	mov	r0, r7
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	b004      	add	sp, #16
 80070a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a8:	1c59      	adds	r1, r3, #1
 80070aa:	9103      	str	r1, [sp, #12]
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e7f0      	b.n	8007092 <__cvt+0xa6>

080070b0 <__exponent>:
 80070b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b2:	4603      	mov	r3, r0
 80070b4:	2900      	cmp	r1, #0
 80070b6:	bfb8      	it	lt
 80070b8:	4249      	neglt	r1, r1
 80070ba:	f803 2b02 	strb.w	r2, [r3], #2
 80070be:	bfb4      	ite	lt
 80070c0:	222d      	movlt	r2, #45	; 0x2d
 80070c2:	222b      	movge	r2, #43	; 0x2b
 80070c4:	2909      	cmp	r1, #9
 80070c6:	7042      	strb	r2, [r0, #1]
 80070c8:	dd2a      	ble.n	8007120 <__exponent+0x70>
 80070ca:	f10d 0207 	add.w	r2, sp, #7
 80070ce:	4617      	mov	r7, r2
 80070d0:	260a      	movs	r6, #10
 80070d2:	4694      	mov	ip, r2
 80070d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80070d8:	fb06 1415 	mls	r4, r6, r5, r1
 80070dc:	3430      	adds	r4, #48	; 0x30
 80070de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80070e2:	460c      	mov	r4, r1
 80070e4:	2c63      	cmp	r4, #99	; 0x63
 80070e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80070ea:	4629      	mov	r1, r5
 80070ec:	dcf1      	bgt.n	80070d2 <__exponent+0x22>
 80070ee:	3130      	adds	r1, #48	; 0x30
 80070f0:	f1ac 0402 	sub.w	r4, ip, #2
 80070f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80070f8:	1c41      	adds	r1, r0, #1
 80070fa:	4622      	mov	r2, r4
 80070fc:	42ba      	cmp	r2, r7
 80070fe:	d30a      	bcc.n	8007116 <__exponent+0x66>
 8007100:	f10d 0209 	add.w	r2, sp, #9
 8007104:	eba2 020c 	sub.w	r2, r2, ip
 8007108:	42bc      	cmp	r4, r7
 800710a:	bf88      	it	hi
 800710c:	2200      	movhi	r2, #0
 800710e:	4413      	add	r3, r2
 8007110:	1a18      	subs	r0, r3, r0
 8007112:	b003      	add	sp, #12
 8007114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007116:	f812 5b01 	ldrb.w	r5, [r2], #1
 800711a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800711e:	e7ed      	b.n	80070fc <__exponent+0x4c>
 8007120:	2330      	movs	r3, #48	; 0x30
 8007122:	3130      	adds	r1, #48	; 0x30
 8007124:	7083      	strb	r3, [r0, #2]
 8007126:	70c1      	strb	r1, [r0, #3]
 8007128:	1d03      	adds	r3, r0, #4
 800712a:	e7f1      	b.n	8007110 <__exponent+0x60>

0800712c <_printf_float>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	ed2d 8b02 	vpush	{d8}
 8007134:	b08d      	sub	sp, #52	; 0x34
 8007136:	460c      	mov	r4, r1
 8007138:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800713c:	4616      	mov	r6, r2
 800713e:	461f      	mov	r7, r3
 8007140:	4605      	mov	r5, r0
 8007142:	f000 fcfb 	bl	8007b3c <_localeconv_r>
 8007146:	f8d0 a000 	ldr.w	sl, [r0]
 800714a:	4650      	mov	r0, sl
 800714c:	f7f9 f898 	bl	8000280 <strlen>
 8007150:	2300      	movs	r3, #0
 8007152:	930a      	str	r3, [sp, #40]	; 0x28
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	f8d8 3000 	ldr.w	r3, [r8]
 800715c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007160:	3307      	adds	r3, #7
 8007162:	f023 0307 	bic.w	r3, r3, #7
 8007166:	f103 0208 	add.w	r2, r3, #8
 800716a:	f8c8 2000 	str.w	r2, [r8]
 800716e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007172:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007176:	9307      	str	r3, [sp, #28]
 8007178:	f8cd 8018 	str.w	r8, [sp, #24]
 800717c:	ee08 0a10 	vmov	s16, r0
 8007180:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007188:	4b9e      	ldr	r3, [pc, #632]	; (8007404 <_printf_float+0x2d8>)
 800718a:	f04f 32ff 	mov.w	r2, #4294967295
 800718e:	f7f9 fcd5 	bl	8000b3c <__aeabi_dcmpun>
 8007192:	bb88      	cbnz	r0, 80071f8 <_printf_float+0xcc>
 8007194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007198:	4b9a      	ldr	r3, [pc, #616]	; (8007404 <_printf_float+0x2d8>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	f7f9 fcaf 	bl	8000b00 <__aeabi_dcmple>
 80071a2:	bb48      	cbnz	r0, 80071f8 <_printf_float+0xcc>
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4640      	mov	r0, r8
 80071aa:	4649      	mov	r1, r9
 80071ac:	f7f9 fc9e 	bl	8000aec <__aeabi_dcmplt>
 80071b0:	b110      	cbz	r0, 80071b8 <_printf_float+0x8c>
 80071b2:	232d      	movs	r3, #45	; 0x2d
 80071b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b8:	4a93      	ldr	r2, [pc, #588]	; (8007408 <_printf_float+0x2dc>)
 80071ba:	4b94      	ldr	r3, [pc, #592]	; (800740c <_printf_float+0x2e0>)
 80071bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071c0:	bf94      	ite	ls
 80071c2:	4690      	movls	r8, r2
 80071c4:	4698      	movhi	r8, r3
 80071c6:	2303      	movs	r3, #3
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	9b05      	ldr	r3, [sp, #20]
 80071cc:	f023 0304 	bic.w	r3, r3, #4
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	f04f 0900 	mov.w	r9, #0
 80071d6:	9700      	str	r7, [sp, #0]
 80071d8:	4633      	mov	r3, r6
 80071da:	aa0b      	add	r2, sp, #44	; 0x2c
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f9da 	bl	8007598 <_printf_common>
 80071e4:	3001      	adds	r0, #1
 80071e6:	f040 8090 	bne.w	800730a <_printf_float+0x1de>
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	b00d      	add	sp, #52	; 0x34
 80071f0:	ecbd 8b02 	vpop	{d8}
 80071f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	4649      	mov	r1, r9
 8007200:	f7f9 fc9c 	bl	8000b3c <__aeabi_dcmpun>
 8007204:	b140      	cbz	r0, 8007218 <_printf_float+0xec>
 8007206:	464b      	mov	r3, r9
 8007208:	2b00      	cmp	r3, #0
 800720a:	bfbc      	itt	lt
 800720c:	232d      	movlt	r3, #45	; 0x2d
 800720e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007212:	4a7f      	ldr	r2, [pc, #508]	; (8007410 <_printf_float+0x2e4>)
 8007214:	4b7f      	ldr	r3, [pc, #508]	; (8007414 <_printf_float+0x2e8>)
 8007216:	e7d1      	b.n	80071bc <_printf_float+0x90>
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800721e:	9206      	str	r2, [sp, #24]
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	d13f      	bne.n	80072a4 <_printf_float+0x178>
 8007224:	2306      	movs	r3, #6
 8007226:	6063      	str	r3, [r4, #4]
 8007228:	9b05      	ldr	r3, [sp, #20]
 800722a:	6861      	ldr	r1, [r4, #4]
 800722c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007230:	2300      	movs	r3, #0
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	ab0a      	add	r3, sp, #40	; 0x28
 8007236:	e9cd b301 	strd	fp, r3, [sp, #4]
 800723a:	ab09      	add	r3, sp, #36	; 0x24
 800723c:	ec49 8b10 	vmov	d0, r8, r9
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	6022      	str	r2, [r4, #0]
 8007244:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007248:	4628      	mov	r0, r5
 800724a:	f7ff fecf 	bl	8006fec <__cvt>
 800724e:	9b06      	ldr	r3, [sp, #24]
 8007250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007252:	2b47      	cmp	r3, #71	; 0x47
 8007254:	4680      	mov	r8, r0
 8007256:	d108      	bne.n	800726a <_printf_float+0x13e>
 8007258:	1cc8      	adds	r0, r1, #3
 800725a:	db02      	blt.n	8007262 <_printf_float+0x136>
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	4299      	cmp	r1, r3
 8007260:	dd41      	ble.n	80072e6 <_printf_float+0x1ba>
 8007262:	f1ab 0302 	sub.w	r3, fp, #2
 8007266:	fa5f fb83 	uxtb.w	fp, r3
 800726a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800726e:	d820      	bhi.n	80072b2 <_printf_float+0x186>
 8007270:	3901      	subs	r1, #1
 8007272:	465a      	mov	r2, fp
 8007274:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007278:	9109      	str	r1, [sp, #36]	; 0x24
 800727a:	f7ff ff19 	bl	80070b0 <__exponent>
 800727e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007280:	1813      	adds	r3, r2, r0
 8007282:	2a01      	cmp	r2, #1
 8007284:	4681      	mov	r9, r0
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	dc02      	bgt.n	8007290 <_printf_float+0x164>
 800728a:	6822      	ldr	r2, [r4, #0]
 800728c:	07d2      	lsls	r2, r2, #31
 800728e:	d501      	bpl.n	8007294 <_printf_float+0x168>
 8007290:	3301      	adds	r3, #1
 8007292:	6123      	str	r3, [r4, #16]
 8007294:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007298:	2b00      	cmp	r3, #0
 800729a:	d09c      	beq.n	80071d6 <_printf_float+0xaa>
 800729c:	232d      	movs	r3, #45	; 0x2d
 800729e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a2:	e798      	b.n	80071d6 <_printf_float+0xaa>
 80072a4:	9a06      	ldr	r2, [sp, #24]
 80072a6:	2a47      	cmp	r2, #71	; 0x47
 80072a8:	d1be      	bne.n	8007228 <_printf_float+0xfc>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1bc      	bne.n	8007228 <_printf_float+0xfc>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e7b9      	b.n	8007226 <_printf_float+0xfa>
 80072b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072b6:	d118      	bne.n	80072ea <_printf_float+0x1be>
 80072b8:	2900      	cmp	r1, #0
 80072ba:	6863      	ldr	r3, [r4, #4]
 80072bc:	dd0b      	ble.n	80072d6 <_printf_float+0x1aa>
 80072be:	6121      	str	r1, [r4, #16]
 80072c0:	b913      	cbnz	r3, 80072c8 <_printf_float+0x19c>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	07d0      	lsls	r0, r2, #31
 80072c6:	d502      	bpl.n	80072ce <_printf_float+0x1a2>
 80072c8:	3301      	adds	r3, #1
 80072ca:	440b      	add	r3, r1
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	e7de      	b.n	8007294 <_printf_float+0x168>
 80072d6:	b913      	cbnz	r3, 80072de <_printf_float+0x1b2>
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	07d2      	lsls	r2, r2, #31
 80072dc:	d501      	bpl.n	80072e2 <_printf_float+0x1b6>
 80072de:	3302      	adds	r3, #2
 80072e0:	e7f4      	b.n	80072cc <_printf_float+0x1a0>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e7f2      	b.n	80072cc <_printf_float+0x1a0>
 80072e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ec:	4299      	cmp	r1, r3
 80072ee:	db05      	blt.n	80072fc <_printf_float+0x1d0>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	6121      	str	r1, [r4, #16]
 80072f4:	07d8      	lsls	r0, r3, #31
 80072f6:	d5ea      	bpl.n	80072ce <_printf_float+0x1a2>
 80072f8:	1c4b      	adds	r3, r1, #1
 80072fa:	e7e7      	b.n	80072cc <_printf_float+0x1a0>
 80072fc:	2900      	cmp	r1, #0
 80072fe:	bfd4      	ite	le
 8007300:	f1c1 0202 	rsble	r2, r1, #2
 8007304:	2201      	movgt	r2, #1
 8007306:	4413      	add	r3, r2
 8007308:	e7e0      	b.n	80072cc <_printf_float+0x1a0>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	055a      	lsls	r2, r3, #21
 800730e:	d407      	bmi.n	8007320 <_printf_float+0x1f4>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	4642      	mov	r2, r8
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	d12c      	bne.n	8007378 <_printf_float+0x24c>
 800731e:	e764      	b.n	80071ea <_printf_float+0xbe>
 8007320:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007324:	f240 80e0 	bls.w	80074e8 <_printf_float+0x3bc>
 8007328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	f7f9 fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007334:	2800      	cmp	r0, #0
 8007336:	d034      	beq.n	80073a2 <_printf_float+0x276>
 8007338:	4a37      	ldr	r2, [pc, #220]	; (8007418 <_printf_float+0x2ec>)
 800733a:	2301      	movs	r3, #1
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f af51 	beq.w	80071ea <_printf_float+0xbe>
 8007348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800734c:	429a      	cmp	r2, r3
 800734e:	db02      	blt.n	8007356 <_printf_float+0x22a>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	07d8      	lsls	r0, r3, #31
 8007354:	d510      	bpl.n	8007378 <_printf_float+0x24c>
 8007356:	ee18 3a10 	vmov	r3, s16
 800735a:	4652      	mov	r2, sl
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f af41 	beq.w	80071ea <_printf_float+0xbe>
 8007368:	f04f 0800 	mov.w	r8, #0
 800736c:	f104 091a 	add.w	r9, r4, #26
 8007370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007372:	3b01      	subs	r3, #1
 8007374:	4543      	cmp	r3, r8
 8007376:	dc09      	bgt.n	800738c <_printf_float+0x260>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	079b      	lsls	r3, r3, #30
 800737c:	f100 8107 	bmi.w	800758e <_printf_float+0x462>
 8007380:	68e0      	ldr	r0, [r4, #12]
 8007382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007384:	4298      	cmp	r0, r3
 8007386:	bfb8      	it	lt
 8007388:	4618      	movlt	r0, r3
 800738a:	e730      	b.n	80071ee <_printf_float+0xc2>
 800738c:	2301      	movs	r3, #1
 800738e:	464a      	mov	r2, r9
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f af27 	beq.w	80071ea <_printf_float+0xbe>
 800739c:	f108 0801 	add.w	r8, r8, #1
 80073a0:	e7e6      	b.n	8007370 <_printf_float+0x244>
 80073a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	dc39      	bgt.n	800741c <_printf_float+0x2f0>
 80073a8:	4a1b      	ldr	r2, [pc, #108]	; (8007418 <_printf_float+0x2ec>)
 80073aa:	2301      	movs	r3, #1
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f af19 	beq.w	80071ea <_printf_float+0xbe>
 80073b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80073bc:	4313      	orrs	r3, r2
 80073be:	d102      	bne.n	80073c6 <_printf_float+0x29a>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07d9      	lsls	r1, r3, #31
 80073c4:	d5d8      	bpl.n	8007378 <_printf_float+0x24c>
 80073c6:	ee18 3a10 	vmov	r3, s16
 80073ca:	4652      	mov	r2, sl
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f af09 	beq.w	80071ea <_printf_float+0xbe>
 80073d8:	f04f 0900 	mov.w	r9, #0
 80073dc:	f104 0a1a 	add.w	sl, r4, #26
 80073e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e2:	425b      	negs	r3, r3
 80073e4:	454b      	cmp	r3, r9
 80073e6:	dc01      	bgt.n	80073ec <_printf_float+0x2c0>
 80073e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ea:	e792      	b.n	8007312 <_printf_float+0x1e6>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4652      	mov	r2, sl
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f aef7 	beq.w	80071ea <_printf_float+0xbe>
 80073fc:	f109 0901 	add.w	r9, r9, #1
 8007400:	e7ee      	b.n	80073e0 <_printf_float+0x2b4>
 8007402:	bf00      	nop
 8007404:	7fefffff 	.word	0x7fefffff
 8007408:	08009db8 	.word	0x08009db8
 800740c:	08009dbc 	.word	0x08009dbc
 8007410:	08009dc0 	.word	0x08009dc0
 8007414:	08009dc4 	.word	0x08009dc4
 8007418:	08009dc8 	.word	0x08009dc8
 800741c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800741e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007420:	429a      	cmp	r2, r3
 8007422:	bfa8      	it	ge
 8007424:	461a      	movge	r2, r3
 8007426:	2a00      	cmp	r2, #0
 8007428:	4691      	mov	r9, r2
 800742a:	dc37      	bgt.n	800749c <_printf_float+0x370>
 800742c:	f04f 0b00 	mov.w	fp, #0
 8007430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007434:	f104 021a 	add.w	r2, r4, #26
 8007438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	eba3 0309 	sub.w	r3, r3, r9
 8007440:	455b      	cmp	r3, fp
 8007442:	dc33      	bgt.n	80074ac <_printf_float+0x380>
 8007444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007448:	429a      	cmp	r2, r3
 800744a:	db3b      	blt.n	80074c4 <_printf_float+0x398>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	07da      	lsls	r2, r3, #31
 8007450:	d438      	bmi.n	80074c4 <_printf_float+0x398>
 8007452:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007456:	eba2 0903 	sub.w	r9, r2, r3
 800745a:	9b05      	ldr	r3, [sp, #20]
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	4591      	cmp	r9, r2
 8007460:	bfa8      	it	ge
 8007462:	4691      	movge	r9, r2
 8007464:	f1b9 0f00 	cmp.w	r9, #0
 8007468:	dc35      	bgt.n	80074d6 <_printf_float+0x3aa>
 800746a:	f04f 0800 	mov.w	r8, #0
 800746e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007472:	f104 0a1a 	add.w	sl, r4, #26
 8007476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800747a:	1a9b      	subs	r3, r3, r2
 800747c:	eba3 0309 	sub.w	r3, r3, r9
 8007480:	4543      	cmp	r3, r8
 8007482:	f77f af79 	ble.w	8007378 <_printf_float+0x24c>
 8007486:	2301      	movs	r3, #1
 8007488:	4652      	mov	r2, sl
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f aeaa 	beq.w	80071ea <_printf_float+0xbe>
 8007496:	f108 0801 	add.w	r8, r8, #1
 800749a:	e7ec      	b.n	8007476 <_printf_float+0x34a>
 800749c:	4613      	mov	r3, r2
 800749e:	4631      	mov	r1, r6
 80074a0:	4642      	mov	r2, r8
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	d1c0      	bne.n	800742c <_printf_float+0x300>
 80074aa:	e69e      	b.n	80071ea <_printf_float+0xbe>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	9205      	str	r2, [sp, #20]
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f ae97 	beq.w	80071ea <_printf_float+0xbe>
 80074bc:	9a05      	ldr	r2, [sp, #20]
 80074be:	f10b 0b01 	add.w	fp, fp, #1
 80074c2:	e7b9      	b.n	8007438 <_printf_float+0x30c>
 80074c4:	ee18 3a10 	vmov	r3, s16
 80074c8:	4652      	mov	r2, sl
 80074ca:	4631      	mov	r1, r6
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b8      	blx	r7
 80074d0:	3001      	adds	r0, #1
 80074d2:	d1be      	bne.n	8007452 <_printf_float+0x326>
 80074d4:	e689      	b.n	80071ea <_printf_float+0xbe>
 80074d6:	9a05      	ldr	r2, [sp, #20]
 80074d8:	464b      	mov	r3, r9
 80074da:	4442      	add	r2, r8
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	d1c1      	bne.n	800746a <_printf_float+0x33e>
 80074e6:	e680      	b.n	80071ea <_printf_float+0xbe>
 80074e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	dc01      	bgt.n	80074f2 <_printf_float+0x3c6>
 80074ee:	07db      	lsls	r3, r3, #31
 80074f0:	d53a      	bpl.n	8007568 <_printf_float+0x43c>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f ae74 	beq.w	80071ea <_printf_float+0xbe>
 8007502:	ee18 3a10 	vmov	r3, s16
 8007506:	4652      	mov	r2, sl
 8007508:	4631      	mov	r1, r6
 800750a:	4628      	mov	r0, r5
 800750c:	47b8      	blx	r7
 800750e:	3001      	adds	r0, #1
 8007510:	f43f ae6b 	beq.w	80071ea <_printf_float+0xbe>
 8007514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007518:	2200      	movs	r2, #0
 800751a:	2300      	movs	r3, #0
 800751c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007520:	f7f9 fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8007524:	b9d8      	cbnz	r0, 800755e <_printf_float+0x432>
 8007526:	f10a 33ff 	add.w	r3, sl, #4294967295
 800752a:	f108 0201 	add.w	r2, r8, #1
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	d10e      	bne.n	8007556 <_printf_float+0x42a>
 8007538:	e657      	b.n	80071ea <_printf_float+0xbe>
 800753a:	2301      	movs	r3, #1
 800753c:	4652      	mov	r2, sl
 800753e:	4631      	mov	r1, r6
 8007540:	4628      	mov	r0, r5
 8007542:	47b8      	blx	r7
 8007544:	3001      	adds	r0, #1
 8007546:	f43f ae50 	beq.w	80071ea <_printf_float+0xbe>
 800754a:	f108 0801 	add.w	r8, r8, #1
 800754e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007550:	3b01      	subs	r3, #1
 8007552:	4543      	cmp	r3, r8
 8007554:	dcf1      	bgt.n	800753a <_printf_float+0x40e>
 8007556:	464b      	mov	r3, r9
 8007558:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800755c:	e6da      	b.n	8007314 <_printf_float+0x1e8>
 800755e:	f04f 0800 	mov.w	r8, #0
 8007562:	f104 0a1a 	add.w	sl, r4, #26
 8007566:	e7f2      	b.n	800754e <_printf_float+0x422>
 8007568:	2301      	movs	r3, #1
 800756a:	4642      	mov	r2, r8
 800756c:	e7df      	b.n	800752e <_printf_float+0x402>
 800756e:	2301      	movs	r3, #1
 8007570:	464a      	mov	r2, r9
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	f43f ae36 	beq.w	80071ea <_printf_float+0xbe>
 800757e:	f108 0801 	add.w	r8, r8, #1
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	4543      	cmp	r3, r8
 800758a:	dcf0      	bgt.n	800756e <_printf_float+0x442>
 800758c:	e6f8      	b.n	8007380 <_printf_float+0x254>
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	f104 0919 	add.w	r9, r4, #25
 8007596:	e7f4      	b.n	8007582 <_printf_float+0x456>

08007598 <_printf_common>:
 8007598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	4616      	mov	r6, r2
 800759e:	4699      	mov	r9, r3
 80075a0:	688a      	ldr	r2, [r1, #8]
 80075a2:	690b      	ldr	r3, [r1, #16]
 80075a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	bfb8      	it	lt
 80075ac:	4613      	movlt	r3, r2
 80075ae:	6033      	str	r3, [r6, #0]
 80075b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075b4:	4607      	mov	r7, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	b10a      	cbz	r2, 80075be <_printf_common+0x26>
 80075ba:	3301      	adds	r3, #1
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	0699      	lsls	r1, r3, #26
 80075c2:	bf42      	ittt	mi
 80075c4:	6833      	ldrmi	r3, [r6, #0]
 80075c6:	3302      	addmi	r3, #2
 80075c8:	6033      	strmi	r3, [r6, #0]
 80075ca:	6825      	ldr	r5, [r4, #0]
 80075cc:	f015 0506 	ands.w	r5, r5, #6
 80075d0:	d106      	bne.n	80075e0 <_printf_common+0x48>
 80075d2:	f104 0a19 	add.w	sl, r4, #25
 80075d6:	68e3      	ldr	r3, [r4, #12]
 80075d8:	6832      	ldr	r2, [r6, #0]
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	42ab      	cmp	r3, r5
 80075de:	dc26      	bgt.n	800762e <_printf_common+0x96>
 80075e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075e4:	1e13      	subs	r3, r2, #0
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	bf18      	it	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	0692      	lsls	r2, r2, #26
 80075ee:	d42b      	bmi.n	8007648 <_printf_common+0xb0>
 80075f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075f4:	4649      	mov	r1, r9
 80075f6:	4638      	mov	r0, r7
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d01e      	beq.n	800763c <_printf_common+0xa4>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	6922      	ldr	r2, [r4, #16]
 8007602:	f003 0306 	and.w	r3, r3, #6
 8007606:	2b04      	cmp	r3, #4
 8007608:	bf02      	ittt	eq
 800760a:	68e5      	ldreq	r5, [r4, #12]
 800760c:	6833      	ldreq	r3, [r6, #0]
 800760e:	1aed      	subeq	r5, r5, r3
 8007610:	68a3      	ldr	r3, [r4, #8]
 8007612:	bf0c      	ite	eq
 8007614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007618:	2500      	movne	r5, #0
 800761a:	4293      	cmp	r3, r2
 800761c:	bfc4      	itt	gt
 800761e:	1a9b      	subgt	r3, r3, r2
 8007620:	18ed      	addgt	r5, r5, r3
 8007622:	2600      	movs	r6, #0
 8007624:	341a      	adds	r4, #26
 8007626:	42b5      	cmp	r5, r6
 8007628:	d11a      	bne.n	8007660 <_printf_common+0xc8>
 800762a:	2000      	movs	r0, #0
 800762c:	e008      	b.n	8007640 <_printf_common+0xa8>
 800762e:	2301      	movs	r3, #1
 8007630:	4652      	mov	r2, sl
 8007632:	4649      	mov	r1, r9
 8007634:	4638      	mov	r0, r7
 8007636:	47c0      	blx	r8
 8007638:	3001      	adds	r0, #1
 800763a:	d103      	bne.n	8007644 <_printf_common+0xac>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007644:	3501      	adds	r5, #1
 8007646:	e7c6      	b.n	80075d6 <_printf_common+0x3e>
 8007648:	18e1      	adds	r1, r4, r3
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	2030      	movs	r0, #48	; 0x30
 800764e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007652:	4422      	add	r2, r4
 8007654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800765c:	3302      	adds	r3, #2
 800765e:	e7c7      	b.n	80075f0 <_printf_common+0x58>
 8007660:	2301      	movs	r3, #1
 8007662:	4622      	mov	r2, r4
 8007664:	4649      	mov	r1, r9
 8007666:	4638      	mov	r0, r7
 8007668:	47c0      	blx	r8
 800766a:	3001      	adds	r0, #1
 800766c:	d0e6      	beq.n	800763c <_printf_common+0xa4>
 800766e:	3601      	adds	r6, #1
 8007670:	e7d9      	b.n	8007626 <_printf_common+0x8e>
	...

08007674 <_printf_i>:
 8007674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	7e0f      	ldrb	r7, [r1, #24]
 800767a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800767c:	2f78      	cmp	r7, #120	; 0x78
 800767e:	4691      	mov	r9, r2
 8007680:	4680      	mov	r8, r0
 8007682:	460c      	mov	r4, r1
 8007684:	469a      	mov	sl, r3
 8007686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800768a:	d807      	bhi.n	800769c <_printf_i+0x28>
 800768c:	2f62      	cmp	r7, #98	; 0x62
 800768e:	d80a      	bhi.n	80076a6 <_printf_i+0x32>
 8007690:	2f00      	cmp	r7, #0
 8007692:	f000 80d4 	beq.w	800783e <_printf_i+0x1ca>
 8007696:	2f58      	cmp	r7, #88	; 0x58
 8007698:	f000 80c0 	beq.w	800781c <_printf_i+0x1a8>
 800769c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076a4:	e03a      	b.n	800771c <_printf_i+0xa8>
 80076a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076aa:	2b15      	cmp	r3, #21
 80076ac:	d8f6      	bhi.n	800769c <_printf_i+0x28>
 80076ae:	a101      	add	r1, pc, #4	; (adr r1, 80076b4 <_printf_i+0x40>)
 80076b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b4:	0800770d 	.word	0x0800770d
 80076b8:	08007721 	.word	0x08007721
 80076bc:	0800769d 	.word	0x0800769d
 80076c0:	0800769d 	.word	0x0800769d
 80076c4:	0800769d 	.word	0x0800769d
 80076c8:	0800769d 	.word	0x0800769d
 80076cc:	08007721 	.word	0x08007721
 80076d0:	0800769d 	.word	0x0800769d
 80076d4:	0800769d 	.word	0x0800769d
 80076d8:	0800769d 	.word	0x0800769d
 80076dc:	0800769d 	.word	0x0800769d
 80076e0:	08007825 	.word	0x08007825
 80076e4:	0800774d 	.word	0x0800774d
 80076e8:	080077df 	.word	0x080077df
 80076ec:	0800769d 	.word	0x0800769d
 80076f0:	0800769d 	.word	0x0800769d
 80076f4:	08007847 	.word	0x08007847
 80076f8:	0800769d 	.word	0x0800769d
 80076fc:	0800774d 	.word	0x0800774d
 8007700:	0800769d 	.word	0x0800769d
 8007704:	0800769d 	.word	0x0800769d
 8007708:	080077e7 	.word	0x080077e7
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	602a      	str	r2, [r5, #0]
 8007714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800771c:	2301      	movs	r3, #1
 800771e:	e09f      	b.n	8007860 <_printf_i+0x1ec>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	0607      	lsls	r7, r0, #24
 8007726:	f103 0104 	add.w	r1, r3, #4
 800772a:	6029      	str	r1, [r5, #0]
 800772c:	d501      	bpl.n	8007732 <_printf_i+0xbe>
 800772e:	681e      	ldr	r6, [r3, #0]
 8007730:	e003      	b.n	800773a <_printf_i+0xc6>
 8007732:	0646      	lsls	r6, r0, #25
 8007734:	d5fb      	bpl.n	800772e <_printf_i+0xba>
 8007736:	f9b3 6000 	ldrsh.w	r6, [r3]
 800773a:	2e00      	cmp	r6, #0
 800773c:	da03      	bge.n	8007746 <_printf_i+0xd2>
 800773e:	232d      	movs	r3, #45	; 0x2d
 8007740:	4276      	negs	r6, r6
 8007742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007746:	485a      	ldr	r0, [pc, #360]	; (80078b0 <_printf_i+0x23c>)
 8007748:	230a      	movs	r3, #10
 800774a:	e012      	b.n	8007772 <_printf_i+0xfe>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	1d19      	adds	r1, r3, #4
 8007752:	6029      	str	r1, [r5, #0]
 8007754:	0605      	lsls	r5, r0, #24
 8007756:	d501      	bpl.n	800775c <_printf_i+0xe8>
 8007758:	681e      	ldr	r6, [r3, #0]
 800775a:	e002      	b.n	8007762 <_printf_i+0xee>
 800775c:	0641      	lsls	r1, r0, #25
 800775e:	d5fb      	bpl.n	8007758 <_printf_i+0xe4>
 8007760:	881e      	ldrh	r6, [r3, #0]
 8007762:	4853      	ldr	r0, [pc, #332]	; (80078b0 <_printf_i+0x23c>)
 8007764:	2f6f      	cmp	r7, #111	; 0x6f
 8007766:	bf0c      	ite	eq
 8007768:	2308      	moveq	r3, #8
 800776a:	230a      	movne	r3, #10
 800776c:	2100      	movs	r1, #0
 800776e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007772:	6865      	ldr	r5, [r4, #4]
 8007774:	60a5      	str	r5, [r4, #8]
 8007776:	2d00      	cmp	r5, #0
 8007778:	bfa2      	ittt	ge
 800777a:	6821      	ldrge	r1, [r4, #0]
 800777c:	f021 0104 	bicge.w	r1, r1, #4
 8007780:	6021      	strge	r1, [r4, #0]
 8007782:	b90e      	cbnz	r6, 8007788 <_printf_i+0x114>
 8007784:	2d00      	cmp	r5, #0
 8007786:	d04b      	beq.n	8007820 <_printf_i+0x1ac>
 8007788:	4615      	mov	r5, r2
 800778a:	fbb6 f1f3 	udiv	r1, r6, r3
 800778e:	fb03 6711 	mls	r7, r3, r1, r6
 8007792:	5dc7      	ldrb	r7, [r0, r7]
 8007794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007798:	4637      	mov	r7, r6
 800779a:	42bb      	cmp	r3, r7
 800779c:	460e      	mov	r6, r1
 800779e:	d9f4      	bls.n	800778a <_printf_i+0x116>
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d10b      	bne.n	80077bc <_printf_i+0x148>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	07de      	lsls	r6, r3, #31
 80077a8:	d508      	bpl.n	80077bc <_printf_i+0x148>
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6861      	ldr	r1, [r4, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	bfde      	ittt	le
 80077b2:	2330      	movle	r3, #48	; 0x30
 80077b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077bc:	1b52      	subs	r2, r2, r5
 80077be:	6122      	str	r2, [r4, #16]
 80077c0:	f8cd a000 	str.w	sl, [sp]
 80077c4:	464b      	mov	r3, r9
 80077c6:	aa03      	add	r2, sp, #12
 80077c8:	4621      	mov	r1, r4
 80077ca:	4640      	mov	r0, r8
 80077cc:	f7ff fee4 	bl	8007598 <_printf_common>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d14a      	bne.n	800786a <_printf_i+0x1f6>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	b004      	add	sp, #16
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f043 0320 	orr.w	r3, r3, #32
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	4833      	ldr	r0, [pc, #204]	; (80078b4 <_printf_i+0x240>)
 80077e8:	2778      	movs	r7, #120	; 0x78
 80077ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6829      	ldr	r1, [r5, #0]
 80077f2:	061f      	lsls	r7, r3, #24
 80077f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80077f8:	d402      	bmi.n	8007800 <_printf_i+0x18c>
 80077fa:	065f      	lsls	r7, r3, #25
 80077fc:	bf48      	it	mi
 80077fe:	b2b6      	uxthmi	r6, r6
 8007800:	07df      	lsls	r7, r3, #31
 8007802:	bf48      	it	mi
 8007804:	f043 0320 	orrmi.w	r3, r3, #32
 8007808:	6029      	str	r1, [r5, #0]
 800780a:	bf48      	it	mi
 800780c:	6023      	strmi	r3, [r4, #0]
 800780e:	b91e      	cbnz	r6, 8007818 <_printf_i+0x1a4>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	f023 0320 	bic.w	r3, r3, #32
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	2310      	movs	r3, #16
 800781a:	e7a7      	b.n	800776c <_printf_i+0xf8>
 800781c:	4824      	ldr	r0, [pc, #144]	; (80078b0 <_printf_i+0x23c>)
 800781e:	e7e4      	b.n	80077ea <_printf_i+0x176>
 8007820:	4615      	mov	r5, r2
 8007822:	e7bd      	b.n	80077a0 <_printf_i+0x12c>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	6826      	ldr	r6, [r4, #0]
 8007828:	6961      	ldr	r1, [r4, #20]
 800782a:	1d18      	adds	r0, r3, #4
 800782c:	6028      	str	r0, [r5, #0]
 800782e:	0635      	lsls	r5, r6, #24
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	d501      	bpl.n	8007838 <_printf_i+0x1c4>
 8007834:	6019      	str	r1, [r3, #0]
 8007836:	e002      	b.n	800783e <_printf_i+0x1ca>
 8007838:	0670      	lsls	r0, r6, #25
 800783a:	d5fb      	bpl.n	8007834 <_printf_i+0x1c0>
 800783c:	8019      	strh	r1, [r3, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	4615      	mov	r5, r2
 8007844:	e7bc      	b.n	80077c0 <_printf_i+0x14c>
 8007846:	682b      	ldr	r3, [r5, #0]
 8007848:	1d1a      	adds	r2, r3, #4
 800784a:	602a      	str	r2, [r5, #0]
 800784c:	681d      	ldr	r5, [r3, #0]
 800784e:	6862      	ldr	r2, [r4, #4]
 8007850:	2100      	movs	r1, #0
 8007852:	4628      	mov	r0, r5
 8007854:	f7f8 fcc4 	bl	80001e0 <memchr>
 8007858:	b108      	cbz	r0, 800785e <_printf_i+0x1ea>
 800785a:	1b40      	subs	r0, r0, r5
 800785c:	6060      	str	r0, [r4, #4]
 800785e:	6863      	ldr	r3, [r4, #4]
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	2300      	movs	r3, #0
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007868:	e7aa      	b.n	80077c0 <_printf_i+0x14c>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	462a      	mov	r2, r5
 800786e:	4649      	mov	r1, r9
 8007870:	4640      	mov	r0, r8
 8007872:	47d0      	blx	sl
 8007874:	3001      	adds	r0, #1
 8007876:	d0ad      	beq.n	80077d4 <_printf_i+0x160>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	079b      	lsls	r3, r3, #30
 800787c:	d413      	bmi.n	80078a6 <_printf_i+0x232>
 800787e:	68e0      	ldr	r0, [r4, #12]
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	4298      	cmp	r0, r3
 8007884:	bfb8      	it	lt
 8007886:	4618      	movlt	r0, r3
 8007888:	e7a6      	b.n	80077d8 <_printf_i+0x164>
 800788a:	2301      	movs	r3, #1
 800788c:	4632      	mov	r2, r6
 800788e:	4649      	mov	r1, r9
 8007890:	4640      	mov	r0, r8
 8007892:	47d0      	blx	sl
 8007894:	3001      	adds	r0, #1
 8007896:	d09d      	beq.n	80077d4 <_printf_i+0x160>
 8007898:	3501      	adds	r5, #1
 800789a:	68e3      	ldr	r3, [r4, #12]
 800789c:	9903      	ldr	r1, [sp, #12]
 800789e:	1a5b      	subs	r3, r3, r1
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	dcf2      	bgt.n	800788a <_printf_i+0x216>
 80078a4:	e7eb      	b.n	800787e <_printf_i+0x20a>
 80078a6:	2500      	movs	r5, #0
 80078a8:	f104 0619 	add.w	r6, r4, #25
 80078ac:	e7f5      	b.n	800789a <_printf_i+0x226>
 80078ae:	bf00      	nop
 80078b0:	08009dca 	.word	0x08009dca
 80078b4:	08009ddb 	.word	0x08009ddb

080078b8 <std>:
 80078b8:	2300      	movs	r3, #0
 80078ba:	b510      	push	{r4, lr}
 80078bc:	4604      	mov	r4, r0
 80078be:	e9c0 3300 	strd	r3, r3, [r0]
 80078c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078c6:	6083      	str	r3, [r0, #8]
 80078c8:	8181      	strh	r1, [r0, #12]
 80078ca:	6643      	str	r3, [r0, #100]	; 0x64
 80078cc:	81c2      	strh	r2, [r0, #14]
 80078ce:	6183      	str	r3, [r0, #24]
 80078d0:	4619      	mov	r1, r3
 80078d2:	2208      	movs	r2, #8
 80078d4:	305c      	adds	r0, #92	; 0x5c
 80078d6:	f000 f928 	bl	8007b2a <memset>
 80078da:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <std+0x58>)
 80078dc:	6263      	str	r3, [r4, #36]	; 0x24
 80078de:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <std+0x5c>)
 80078e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80078e2:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <std+0x60>)
 80078e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <std+0x64>)
 80078e8:	6323      	str	r3, [r4, #48]	; 0x30
 80078ea:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <std+0x68>)
 80078ec:	6224      	str	r4, [r4, #32]
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d006      	beq.n	8007900 <std+0x48>
 80078f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80078f6:	4294      	cmp	r4, r2
 80078f8:	d002      	beq.n	8007900 <std+0x48>
 80078fa:	33d0      	adds	r3, #208	; 0xd0
 80078fc:	429c      	cmp	r4, r3
 80078fe:	d105      	bne.n	800790c <std+0x54>
 8007900:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007908:	f000 b98c 	b.w	8007c24 <__retarget_lock_init_recursive>
 800790c:	bd10      	pop	{r4, pc}
 800790e:	bf00      	nop
 8007910:	08007aa5 	.word	0x08007aa5
 8007914:	08007ac7 	.word	0x08007ac7
 8007918:	08007aff 	.word	0x08007aff
 800791c:	08007b23 	.word	0x08007b23
 8007920:	20000414 	.word	0x20000414

08007924 <stdio_exit_handler>:
 8007924:	4a02      	ldr	r2, [pc, #8]	; (8007930 <stdio_exit_handler+0xc>)
 8007926:	4903      	ldr	r1, [pc, #12]	; (8007934 <stdio_exit_handler+0x10>)
 8007928:	4803      	ldr	r0, [pc, #12]	; (8007938 <stdio_exit_handler+0x14>)
 800792a:	f000 b869 	b.w	8007a00 <_fwalk_sglue>
 800792e:	bf00      	nop
 8007930:	2000001c 	.word	0x2000001c
 8007934:	080095d9 	.word	0x080095d9
 8007938:	20000028 	.word	0x20000028

0800793c <cleanup_stdio>:
 800793c:	6841      	ldr	r1, [r0, #4]
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <cleanup_stdio+0x34>)
 8007940:	4299      	cmp	r1, r3
 8007942:	b510      	push	{r4, lr}
 8007944:	4604      	mov	r4, r0
 8007946:	d001      	beq.n	800794c <cleanup_stdio+0x10>
 8007948:	f001 fe46 	bl	80095d8 <_fflush_r>
 800794c:	68a1      	ldr	r1, [r4, #8]
 800794e:	4b09      	ldr	r3, [pc, #36]	; (8007974 <cleanup_stdio+0x38>)
 8007950:	4299      	cmp	r1, r3
 8007952:	d002      	beq.n	800795a <cleanup_stdio+0x1e>
 8007954:	4620      	mov	r0, r4
 8007956:	f001 fe3f 	bl	80095d8 <_fflush_r>
 800795a:	68e1      	ldr	r1, [r4, #12]
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <cleanup_stdio+0x3c>)
 800795e:	4299      	cmp	r1, r3
 8007960:	d004      	beq.n	800796c <cleanup_stdio+0x30>
 8007962:	4620      	mov	r0, r4
 8007964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007968:	f001 be36 	b.w	80095d8 <_fflush_r>
 800796c:	bd10      	pop	{r4, pc}
 800796e:	bf00      	nop
 8007970:	20000414 	.word	0x20000414
 8007974:	2000047c 	.word	0x2000047c
 8007978:	200004e4 	.word	0x200004e4

0800797c <global_stdio_init.part.0>:
 800797c:	b510      	push	{r4, lr}
 800797e:	4b0b      	ldr	r3, [pc, #44]	; (80079ac <global_stdio_init.part.0+0x30>)
 8007980:	4c0b      	ldr	r4, [pc, #44]	; (80079b0 <global_stdio_init.part.0+0x34>)
 8007982:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <global_stdio_init.part.0+0x38>)
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	4620      	mov	r0, r4
 8007988:	2200      	movs	r2, #0
 800798a:	2104      	movs	r1, #4
 800798c:	f7ff ff94 	bl	80078b8 <std>
 8007990:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007994:	2201      	movs	r2, #1
 8007996:	2109      	movs	r1, #9
 8007998:	f7ff ff8e 	bl	80078b8 <std>
 800799c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80079a0:	2202      	movs	r2, #2
 80079a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a6:	2112      	movs	r1, #18
 80079a8:	f7ff bf86 	b.w	80078b8 <std>
 80079ac:	2000054c 	.word	0x2000054c
 80079b0:	20000414 	.word	0x20000414
 80079b4:	08007925 	.word	0x08007925

080079b8 <__sfp_lock_acquire>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__sfp_lock_acquire+0x8>)
 80079ba:	f000 b934 	b.w	8007c26 <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	20000555 	.word	0x20000555

080079c4 <__sfp_lock_release>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__sfp_lock_release+0x8>)
 80079c6:	f000 b92f 	b.w	8007c28 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	20000555 	.word	0x20000555

080079d0 <__sinit>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	4604      	mov	r4, r0
 80079d4:	f7ff fff0 	bl	80079b8 <__sfp_lock_acquire>
 80079d8:	6a23      	ldr	r3, [r4, #32]
 80079da:	b11b      	cbz	r3, 80079e4 <__sinit+0x14>
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	f7ff bff0 	b.w	80079c4 <__sfp_lock_release>
 80079e4:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <__sinit+0x28>)
 80079e6:	6223      	str	r3, [r4, #32]
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <__sinit+0x2c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1f5      	bne.n	80079dc <__sinit+0xc>
 80079f0:	f7ff ffc4 	bl	800797c <global_stdio_init.part.0>
 80079f4:	e7f2      	b.n	80079dc <__sinit+0xc>
 80079f6:	bf00      	nop
 80079f8:	0800793d 	.word	0x0800793d
 80079fc:	2000054c 	.word	0x2000054c

08007a00 <_fwalk_sglue>:
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	4607      	mov	r7, r0
 8007a06:	4688      	mov	r8, r1
 8007a08:	4614      	mov	r4, r2
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a10:	f1b9 0901 	subs.w	r9, r9, #1
 8007a14:	d505      	bpl.n	8007a22 <_fwalk_sglue+0x22>
 8007a16:	6824      	ldr	r4, [r4, #0]
 8007a18:	2c00      	cmp	r4, #0
 8007a1a:	d1f7      	bne.n	8007a0c <_fwalk_sglue+0xc>
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d907      	bls.n	8007a38 <_fwalk_sglue+0x38>
 8007a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	d003      	beq.n	8007a38 <_fwalk_sglue+0x38>
 8007a30:	4629      	mov	r1, r5
 8007a32:	4638      	mov	r0, r7
 8007a34:	47c0      	blx	r8
 8007a36:	4306      	orrs	r6, r0
 8007a38:	3568      	adds	r5, #104	; 0x68
 8007a3a:	e7e9      	b.n	8007a10 <_fwalk_sglue+0x10>

08007a3c <sniprintf>:
 8007a3c:	b40c      	push	{r2, r3}
 8007a3e:	b530      	push	{r4, r5, lr}
 8007a40:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <sniprintf+0x64>)
 8007a42:	1e0c      	subs	r4, r1, #0
 8007a44:	681d      	ldr	r5, [r3, #0]
 8007a46:	b09d      	sub	sp, #116	; 0x74
 8007a48:	da08      	bge.n	8007a5c <sniprintf+0x20>
 8007a4a:	238b      	movs	r3, #139	; 0x8b
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	b01d      	add	sp, #116	; 0x74
 8007a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a58:	b002      	add	sp, #8
 8007a5a:	4770      	bx	lr
 8007a5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a64:	bf14      	ite	ne
 8007a66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a6a:	4623      	moveq	r3, r4
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	9307      	str	r3, [sp, #28]
 8007a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a74:	9002      	str	r0, [sp, #8]
 8007a76:	9006      	str	r0, [sp, #24]
 8007a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a7e:	ab21      	add	r3, sp, #132	; 0x84
 8007a80:	a902      	add	r1, sp, #8
 8007a82:	4628      	mov	r0, r5
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	f001 fc23 	bl	80092d0 <_svfiprintf_r>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	bfbc      	itt	lt
 8007a8e:	238b      	movlt	r3, #139	; 0x8b
 8007a90:	602b      	strlt	r3, [r5, #0]
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	d0dd      	beq.n	8007a52 <sniprintf+0x16>
 8007a96:	9b02      	ldr	r3, [sp, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	e7d9      	b.n	8007a52 <sniprintf+0x16>
 8007a9e:	bf00      	nop
 8007aa0:	20000074 	.word	0x20000074

08007aa4 <__sread>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aac:	f000 f86c 	bl	8007b88 <_read_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	bfab      	itete	ge
 8007ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab8:	181b      	addge	r3, r3, r0
 8007aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007abe:	bfac      	ite	ge
 8007ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ac2:	81a3      	strhlt	r3, [r4, #12]
 8007ac4:	bd10      	pop	{r4, pc}

08007ac6 <__swrite>:
 8007ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	461f      	mov	r7, r3
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	d505      	bpl.n	8007ae4 <__swrite+0x1e>
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f000 f840 	bl	8007b64 <_lseek_r>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f000 b857 	b.w	8007bac <_write_r>

08007afe <__sseek>:
 8007afe:	b510      	push	{r4, lr}
 8007b00:	460c      	mov	r4, r1
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	f000 f82d 	bl	8007b64 <_lseek_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	bf15      	itete	ne
 8007b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b1a:	81a3      	strheq	r3, [r4, #12]
 8007b1c:	bf18      	it	ne
 8007b1e:	81a3      	strhne	r3, [r4, #12]
 8007b20:	bd10      	pop	{r4, pc}

08007b22 <__sclose>:
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 b80d 	b.w	8007b44 <_close_r>

08007b2a <memset>:
 8007b2a:	4402      	add	r2, r0
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d100      	bne.n	8007b34 <memset+0xa>
 8007b32:	4770      	bx	lr
 8007b34:	f803 1b01 	strb.w	r1, [r3], #1
 8007b38:	e7f9      	b.n	8007b2e <memset+0x4>
	...

08007b3c <_localeconv_r>:
 8007b3c:	4800      	ldr	r0, [pc, #0]	; (8007b40 <_localeconv_r+0x4>)
 8007b3e:	4770      	bx	lr
 8007b40:	20000168 	.word	0x20000168

08007b44 <_close_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d06      	ldr	r5, [pc, #24]	; (8007b60 <_close_r+0x1c>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	602b      	str	r3, [r5, #0]
 8007b50:	f7f9 fef7 	bl	8001942 <_close>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_close_r+0x1a>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_close_r+0x1a>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	20000550 	.word	0x20000550

08007b64 <_lseek_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d07      	ldr	r5, [pc, #28]	; (8007b84 <_lseek_r+0x20>)
 8007b68:	4604      	mov	r4, r0
 8007b6a:	4608      	mov	r0, r1
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	602a      	str	r2, [r5, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f7f9 ff0c 	bl	8001990 <_lseek>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_lseek_r+0x1e>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_lseek_r+0x1e>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	20000550 	.word	0x20000550

08007b88 <_read_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d07      	ldr	r5, [pc, #28]	; (8007ba8 <_read_r+0x20>)
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	4608      	mov	r0, r1
 8007b90:	4611      	mov	r1, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	602a      	str	r2, [r5, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f7f9 fe9a 	bl	80018d0 <_read>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_read_r+0x1e>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_read_r+0x1e>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	20000550 	.word	0x20000550

08007bac <_write_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	; (8007bcc <_write_r+0x20>)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	602a      	str	r2, [r5, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f7f9 fea5 	bl	800190a <_write>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_write_r+0x1e>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_write_r+0x1e>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	20000550 	.word	0x20000550

08007bd0 <__errno>:
 8007bd0:	4b01      	ldr	r3, [pc, #4]	; (8007bd8 <__errno+0x8>)
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000074 	.word	0x20000074

08007bdc <__libc_init_array>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4d0d      	ldr	r5, [pc, #52]	; (8007c14 <__libc_init_array+0x38>)
 8007be0:	4c0d      	ldr	r4, [pc, #52]	; (8007c18 <__libc_init_array+0x3c>)
 8007be2:	1b64      	subs	r4, r4, r5
 8007be4:	10a4      	asrs	r4, r4, #2
 8007be6:	2600      	movs	r6, #0
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	d109      	bne.n	8007c00 <__libc_init_array+0x24>
 8007bec:	4d0b      	ldr	r5, [pc, #44]	; (8007c1c <__libc_init_array+0x40>)
 8007bee:	4c0c      	ldr	r4, [pc, #48]	; (8007c20 <__libc_init_array+0x44>)
 8007bf0:	f002 f896 	bl	8009d20 <_init>
 8007bf4:	1b64      	subs	r4, r4, r5
 8007bf6:	10a4      	asrs	r4, r4, #2
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	42a6      	cmp	r6, r4
 8007bfc:	d105      	bne.n	8007c0a <__libc_init_array+0x2e>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c04:	4798      	blx	r3
 8007c06:	3601      	adds	r6, #1
 8007c08:	e7ee      	b.n	8007be8 <__libc_init_array+0xc>
 8007c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0e:	4798      	blx	r3
 8007c10:	3601      	adds	r6, #1
 8007c12:	e7f2      	b.n	8007bfa <__libc_init_array+0x1e>
 8007c14:	0800a134 	.word	0x0800a134
 8007c18:	0800a134 	.word	0x0800a134
 8007c1c:	0800a134 	.word	0x0800a134
 8007c20:	0800a138 	.word	0x0800a138

08007c24 <__retarget_lock_init_recursive>:
 8007c24:	4770      	bx	lr

08007c26 <__retarget_lock_acquire_recursive>:
 8007c26:	4770      	bx	lr

08007c28 <__retarget_lock_release_recursive>:
 8007c28:	4770      	bx	lr

08007c2a <quorem>:
 8007c2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2e:	6903      	ldr	r3, [r0, #16]
 8007c30:	690c      	ldr	r4, [r1, #16]
 8007c32:	42a3      	cmp	r3, r4
 8007c34:	4607      	mov	r7, r0
 8007c36:	db7e      	blt.n	8007d36 <quorem+0x10c>
 8007c38:	3c01      	subs	r4, #1
 8007c3a:	f101 0814 	add.w	r8, r1, #20
 8007c3e:	f100 0514 	add.w	r5, r0, #20
 8007c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c50:	3301      	adds	r3, #1
 8007c52:	429a      	cmp	r2, r3
 8007c54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c60:	d331      	bcc.n	8007cc6 <quorem+0x9c>
 8007c62:	f04f 0e00 	mov.w	lr, #0
 8007c66:	4640      	mov	r0, r8
 8007c68:	46ac      	mov	ip, r5
 8007c6a:	46f2      	mov	sl, lr
 8007c6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c70:	b293      	uxth	r3, r2
 8007c72:	fb06 e303 	mla	r3, r6, r3, lr
 8007c76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c7a:	0c1a      	lsrs	r2, r3, #16
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	ebaa 0303 	sub.w	r3, sl, r3
 8007c82:	f8dc a000 	ldr.w	sl, [ip]
 8007c86:	fa13 f38a 	uxtah	r3, r3, sl
 8007c8a:	fb06 220e 	mla	r2, r6, lr, r2
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c96:	b292      	uxth	r2, r2
 8007c98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ca0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ca4:	4581      	cmp	r9, r0
 8007ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007caa:	f84c 3b04 	str.w	r3, [ip], #4
 8007cae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cb2:	d2db      	bcs.n	8007c6c <quorem+0x42>
 8007cb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cb8:	b92b      	cbnz	r3, 8007cc6 <quorem+0x9c>
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	3b04      	subs	r3, #4
 8007cbe:	429d      	cmp	r5, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	d32c      	bcc.n	8007d1e <quorem+0xf4>
 8007cc4:	613c      	str	r4, [r7, #16]
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f001 f9a8 	bl	800901c <__mcmp>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	db22      	blt.n	8007d16 <quorem+0xec>
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cda:	f8d1 c000 	ldr.w	ip, [r1]
 8007cde:	b293      	uxth	r3, r2
 8007ce0:	1ac3      	subs	r3, r0, r3
 8007ce2:	0c12      	lsrs	r2, r2, #16
 8007ce4:	fa13 f38c 	uxtah	r3, r3, ip
 8007ce8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf6:	45c1      	cmp	r9, r8
 8007cf8:	f841 3b04 	str.w	r3, [r1], #4
 8007cfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d00:	d2e9      	bcs.n	8007cd6 <quorem+0xac>
 8007d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d0a:	b922      	cbnz	r2, 8007d16 <quorem+0xec>
 8007d0c:	3b04      	subs	r3, #4
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	d30a      	bcc.n	8007d2a <quorem+0x100>
 8007d14:	613c      	str	r4, [r7, #16]
 8007d16:	4630      	mov	r0, r6
 8007d18:	b003      	add	sp, #12
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	3b04      	subs	r3, #4
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	d1ce      	bne.n	8007cc4 <quorem+0x9a>
 8007d26:	3c01      	subs	r4, #1
 8007d28:	e7c9      	b.n	8007cbe <quorem+0x94>
 8007d2a:	6812      	ldr	r2, [r2, #0]
 8007d2c:	3b04      	subs	r3, #4
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	d1f0      	bne.n	8007d14 <quorem+0xea>
 8007d32:	3c01      	subs	r4, #1
 8007d34:	e7eb      	b.n	8007d0e <quorem+0xe4>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e7ee      	b.n	8007d18 <quorem+0xee>
 8007d3a:	0000      	movs	r0, r0
 8007d3c:	0000      	movs	r0, r0
	...

08007d40 <_dtoa_r>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	ed2d 8b04 	vpush	{d8-d9}
 8007d48:	69c5      	ldr	r5, [r0, #28]
 8007d4a:	b093      	sub	sp, #76	; 0x4c
 8007d4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d50:	ec57 6b10 	vmov	r6, r7, d0
 8007d54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d58:	9107      	str	r1, [sp, #28]
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8007d60:	b975      	cbnz	r5, 8007d80 <_dtoa_r+0x40>
 8007d62:	2010      	movs	r0, #16
 8007d64:	f000 fe2a 	bl	80089bc <malloc>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	61e0      	str	r0, [r4, #28]
 8007d6c:	b920      	cbnz	r0, 8007d78 <_dtoa_r+0x38>
 8007d6e:	4bae      	ldr	r3, [pc, #696]	; (8008028 <_dtoa_r+0x2e8>)
 8007d70:	21ef      	movs	r1, #239	; 0xef
 8007d72:	48ae      	ldr	r0, [pc, #696]	; (800802c <_dtoa_r+0x2ec>)
 8007d74:	f001 fc90 	bl	8009698 <__assert_func>
 8007d78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d7c:	6005      	str	r5, [r0, #0]
 8007d7e:	60c5      	str	r5, [r0, #12]
 8007d80:	69e3      	ldr	r3, [r4, #28]
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	b151      	cbz	r1, 8007d9c <_dtoa_r+0x5c>
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	604a      	str	r2, [r1, #4]
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4093      	lsls	r3, r2
 8007d8e:	608b      	str	r3, [r1, #8]
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 ff07 	bl	8008ba4 <_Bfree>
 8007d96:	69e3      	ldr	r3, [r4, #28]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	1e3b      	subs	r3, r7, #0
 8007d9e:	bfbb      	ittet	lt
 8007da0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007da4:	9303      	strlt	r3, [sp, #12]
 8007da6:	2300      	movge	r3, #0
 8007da8:	2201      	movlt	r2, #1
 8007daa:	bfac      	ite	ge
 8007dac:	f8c8 3000 	strge.w	r3, [r8]
 8007db0:	f8c8 2000 	strlt.w	r2, [r8]
 8007db4:	4b9e      	ldr	r3, [pc, #632]	; (8008030 <_dtoa_r+0x2f0>)
 8007db6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007dba:	ea33 0308 	bics.w	r3, r3, r8
 8007dbe:	d11b      	bne.n	8007df8 <_dtoa_r+0xb8>
 8007dc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007dcc:	4333      	orrs	r3, r6
 8007dce:	f000 8593 	beq.w	80088f8 <_dtoa_r+0xbb8>
 8007dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dd4:	b963      	cbnz	r3, 8007df0 <_dtoa_r+0xb0>
 8007dd6:	4b97      	ldr	r3, [pc, #604]	; (8008034 <_dtoa_r+0x2f4>)
 8007dd8:	e027      	b.n	8007e2a <_dtoa_r+0xea>
 8007dda:	4b97      	ldr	r3, [pc, #604]	; (8008038 <_dtoa_r+0x2f8>)
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	3308      	adds	r3, #8
 8007de0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	9800      	ldr	r0, [sp, #0]
 8007de6:	b013      	add	sp, #76	; 0x4c
 8007de8:	ecbd 8b04 	vpop	{d8-d9}
 8007dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df0:	4b90      	ldr	r3, [pc, #576]	; (8008034 <_dtoa_r+0x2f4>)
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	3303      	adds	r3, #3
 8007df6:	e7f3      	b.n	8007de0 <_dtoa_r+0xa0>
 8007df8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	ec51 0b17 	vmov	r0, r1, d7
 8007e02:	eeb0 8a47 	vmov.f32	s16, s14
 8007e06:	eef0 8a67 	vmov.f32	s17, s15
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f7f8 fe64 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e10:	4681      	mov	r9, r0
 8007e12:	b160      	cbz	r0, 8007e2e <_dtoa_r+0xee>
 8007e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e16:	2301      	movs	r3, #1
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8568 	beq.w	80088f2 <_dtoa_r+0xbb2>
 8007e22:	4b86      	ldr	r3, [pc, #536]	; (800803c <_dtoa_r+0x2fc>)
 8007e24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	e7da      	b.n	8007de4 <_dtoa_r+0xa4>
 8007e2e:	aa10      	add	r2, sp, #64	; 0x40
 8007e30:	a911      	add	r1, sp, #68	; 0x44
 8007e32:	4620      	mov	r0, r4
 8007e34:	eeb0 0a48 	vmov.f32	s0, s16
 8007e38:	eef0 0a68 	vmov.f32	s1, s17
 8007e3c:	f001 f994 	bl	8009168 <__d2b>
 8007e40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e44:	4682      	mov	sl, r0
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	d07f      	beq.n	8007f4a <_dtoa_r+0x20a>
 8007e4a:	ee18 3a90 	vmov	r3, s17
 8007e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007e56:	ec51 0b18 	vmov	r0, r1, d8
 8007e5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007e66:	4619      	mov	r1, r3
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4b75      	ldr	r3, [pc, #468]	; (8008040 <_dtoa_r+0x300>)
 8007e6c:	f7f8 fa14 	bl	8000298 <__aeabi_dsub>
 8007e70:	a367      	add	r3, pc, #412	; (adr r3, 8008010 <_dtoa_r+0x2d0>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fbc7 	bl	8000608 <__aeabi_dmul>
 8007e7a:	a367      	add	r3, pc, #412	; (adr r3, 8008018 <_dtoa_r+0x2d8>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f7f8 fa0c 	bl	800029c <__adddf3>
 8007e84:	4606      	mov	r6, r0
 8007e86:	4628      	mov	r0, r5
 8007e88:	460f      	mov	r7, r1
 8007e8a:	f7f8 fb53 	bl	8000534 <__aeabi_i2d>
 8007e8e:	a364      	add	r3, pc, #400	; (adr r3, 8008020 <_dtoa_r+0x2e0>)
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f7f8 fbb8 	bl	8000608 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	f7f8 f9fc 	bl	800029c <__adddf3>
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	460f      	mov	r7, r1
 8007ea8:	f7f8 fe5e 	bl	8000b68 <__aeabi_d2iz>
 8007eac:	2200      	movs	r2, #0
 8007eae:	4683      	mov	fp, r0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	f7f8 fe19 	bl	8000aec <__aeabi_dcmplt>
 8007eba:	b148      	cbz	r0, 8007ed0 <_dtoa_r+0x190>
 8007ebc:	4658      	mov	r0, fp
 8007ebe:	f7f8 fb39 	bl	8000534 <__aeabi_i2d>
 8007ec2:	4632      	mov	r2, r6
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	f7f8 fe07 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eca:	b908      	cbnz	r0, 8007ed0 <_dtoa_r+0x190>
 8007ecc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ed0:	f1bb 0f16 	cmp.w	fp, #22
 8007ed4:	d857      	bhi.n	8007f86 <_dtoa_r+0x246>
 8007ed6:	4b5b      	ldr	r3, [pc, #364]	; (8008044 <_dtoa_r+0x304>)
 8007ed8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	ec51 0b18 	vmov	r0, r1, d8
 8007ee4:	f7f8 fe02 	bl	8000aec <__aeabi_dcmplt>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d04e      	beq.n	8007f8a <_dtoa_r+0x24a>
 8007eec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ef6:	1b5b      	subs	r3, r3, r5
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	bf45      	ittet	mi
 8007efc:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f00:	9305      	strmi	r3, [sp, #20]
 8007f02:	2300      	movpl	r3, #0
 8007f04:	2300      	movmi	r3, #0
 8007f06:	9206      	str	r2, [sp, #24]
 8007f08:	bf54      	ite	pl
 8007f0a:	9305      	strpl	r3, [sp, #20]
 8007f0c:	9306      	strmi	r3, [sp, #24]
 8007f0e:	f1bb 0f00 	cmp.w	fp, #0
 8007f12:	db3c      	blt.n	8007f8e <_dtoa_r+0x24e>
 8007f14:	9b06      	ldr	r3, [sp, #24]
 8007f16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007f1a:	445b      	add	r3, fp
 8007f1c:	9306      	str	r3, [sp, #24]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9308      	str	r3, [sp, #32]
 8007f22:	9b07      	ldr	r3, [sp, #28]
 8007f24:	2b09      	cmp	r3, #9
 8007f26:	d868      	bhi.n	8007ffa <_dtoa_r+0x2ba>
 8007f28:	2b05      	cmp	r3, #5
 8007f2a:	bfc4      	itt	gt
 8007f2c:	3b04      	subgt	r3, #4
 8007f2e:	9307      	strgt	r3, [sp, #28]
 8007f30:	9b07      	ldr	r3, [sp, #28]
 8007f32:	f1a3 0302 	sub.w	r3, r3, #2
 8007f36:	bfcc      	ite	gt
 8007f38:	2500      	movgt	r5, #0
 8007f3a:	2501      	movle	r5, #1
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	f200 8085 	bhi.w	800804c <_dtoa_r+0x30c>
 8007f42:	e8df f003 	tbb	[pc, r3]
 8007f46:	3b2e      	.short	0x3b2e
 8007f48:	5839      	.short	0x5839
 8007f4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f4e:	441d      	add	r5, r3
 8007f50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f54:	2b20      	cmp	r3, #32
 8007f56:	bfc1      	itttt	gt
 8007f58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007f64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007f68:	bfd6      	itet	le
 8007f6a:	f1c3 0320 	rsble	r3, r3, #32
 8007f6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f72:	fa06 f003 	lslle.w	r0, r6, r3
 8007f76:	f7f8 facd 	bl	8000514 <__aeabi_ui2d>
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007f80:	3d01      	subs	r5, #1
 8007f82:	920e      	str	r2, [sp, #56]	; 0x38
 8007f84:	e76f      	b.n	8007e66 <_dtoa_r+0x126>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e7b3      	b.n	8007ef2 <_dtoa_r+0x1b2>
 8007f8a:	900c      	str	r0, [sp, #48]	; 0x30
 8007f8c:	e7b2      	b.n	8007ef4 <_dtoa_r+0x1b4>
 8007f8e:	9b05      	ldr	r3, [sp, #20]
 8007f90:	eba3 030b 	sub.w	r3, r3, fp
 8007f94:	9305      	str	r3, [sp, #20]
 8007f96:	f1cb 0300 	rsb	r3, fp, #0
 8007f9a:	9308      	str	r3, [sp, #32]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fa0:	e7bf      	b.n	8007f22 <_dtoa_r+0x1e2>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc52      	bgt.n	8008052 <_dtoa_r+0x312>
 8007fac:	2301      	movs	r3, #1
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	920a      	str	r2, [sp, #40]	; 0x28
 8007fb6:	e00b      	b.n	8007fd0 <_dtoa_r+0x290>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e7f3      	b.n	8007fa4 <_dtoa_r+0x264>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc2:	445b      	add	r3, fp
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	9304      	str	r3, [sp, #16]
 8007fcc:	bfb8      	it	lt
 8007fce:	2301      	movlt	r3, #1
 8007fd0:	69e0      	ldr	r0, [r4, #28]
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	f102 0614 	add.w	r6, r2, #20
 8007fda:	429e      	cmp	r6, r3
 8007fdc:	d93d      	bls.n	800805a <_dtoa_r+0x31a>
 8007fde:	6041      	str	r1, [r0, #4]
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 fd9f 	bl	8008b24 <_Balloc>
 8007fe6:	9000      	str	r0, [sp, #0]
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d139      	bne.n	8008060 <_dtoa_r+0x320>
 8007fec:	4b16      	ldr	r3, [pc, #88]	; (8008048 <_dtoa_r+0x308>)
 8007fee:	4602      	mov	r2, r0
 8007ff0:	f240 11af 	movw	r1, #431	; 0x1af
 8007ff4:	e6bd      	b.n	8007d72 <_dtoa_r+0x32>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e7e1      	b.n	8007fbe <_dtoa_r+0x27e>
 8007ffa:	2501      	movs	r5, #1
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9307      	str	r3, [sp, #28]
 8008000:	9509      	str	r5, [sp, #36]	; 0x24
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	9304      	str	r3, [sp, #16]
 800800a:	2200      	movs	r2, #0
 800800c:	2312      	movs	r3, #18
 800800e:	e7d1      	b.n	8007fb4 <_dtoa_r+0x274>
 8008010:	636f4361 	.word	0x636f4361
 8008014:	3fd287a7 	.word	0x3fd287a7
 8008018:	8b60c8b3 	.word	0x8b60c8b3
 800801c:	3fc68a28 	.word	0x3fc68a28
 8008020:	509f79fb 	.word	0x509f79fb
 8008024:	3fd34413 	.word	0x3fd34413
 8008028:	08009df9 	.word	0x08009df9
 800802c:	08009e10 	.word	0x08009e10
 8008030:	7ff00000 	.word	0x7ff00000
 8008034:	08009df5 	.word	0x08009df5
 8008038:	08009dec 	.word	0x08009dec
 800803c:	08009dc9 	.word	0x08009dc9
 8008040:	3ff80000 	.word	0x3ff80000
 8008044:	08009f00 	.word	0x08009f00
 8008048:	08009e68 	.word	0x08009e68
 800804c:	2301      	movs	r3, #1
 800804e:	9309      	str	r3, [sp, #36]	; 0x24
 8008050:	e7d7      	b.n	8008002 <_dtoa_r+0x2c2>
 8008052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	e7ba      	b.n	8007fd0 <_dtoa_r+0x290>
 800805a:	3101      	adds	r1, #1
 800805c:	0052      	lsls	r2, r2, #1
 800805e:	e7ba      	b.n	8007fd6 <_dtoa_r+0x296>
 8008060:	69e3      	ldr	r3, [r4, #28]
 8008062:	9a00      	ldr	r2, [sp, #0]
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	2b0e      	cmp	r3, #14
 800806a:	f200 80a8 	bhi.w	80081be <_dtoa_r+0x47e>
 800806e:	2d00      	cmp	r5, #0
 8008070:	f000 80a5 	beq.w	80081be <_dtoa_r+0x47e>
 8008074:	f1bb 0f00 	cmp.w	fp, #0
 8008078:	dd38      	ble.n	80080ec <_dtoa_r+0x3ac>
 800807a:	4bc0      	ldr	r3, [pc, #768]	; (800837c <_dtoa_r+0x63c>)
 800807c:	f00b 020f 	and.w	r2, fp, #15
 8008080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008084:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008088:	e9d3 6700 	ldrd	r6, r7, [r3]
 800808c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008090:	d019      	beq.n	80080c6 <_dtoa_r+0x386>
 8008092:	4bbb      	ldr	r3, [pc, #748]	; (8008380 <_dtoa_r+0x640>)
 8008094:	ec51 0b18 	vmov	r0, r1, d8
 8008098:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800809c:	f7f8 fbde 	bl	800085c <__aeabi_ddiv>
 80080a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080a4:	f008 080f 	and.w	r8, r8, #15
 80080a8:	2503      	movs	r5, #3
 80080aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008380 <_dtoa_r+0x640>
 80080ae:	f1b8 0f00 	cmp.w	r8, #0
 80080b2:	d10a      	bne.n	80080ca <_dtoa_r+0x38a>
 80080b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b8:	4632      	mov	r2, r6
 80080ba:	463b      	mov	r3, r7
 80080bc:	f7f8 fbce 	bl	800085c <__aeabi_ddiv>
 80080c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c4:	e02b      	b.n	800811e <_dtoa_r+0x3de>
 80080c6:	2502      	movs	r5, #2
 80080c8:	e7ef      	b.n	80080aa <_dtoa_r+0x36a>
 80080ca:	f018 0f01 	tst.w	r8, #1
 80080ce:	d008      	beq.n	80080e2 <_dtoa_r+0x3a2>
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80080d8:	f7f8 fa96 	bl	8000608 <__aeabi_dmul>
 80080dc:	3501      	adds	r5, #1
 80080de:	4606      	mov	r6, r0
 80080e0:	460f      	mov	r7, r1
 80080e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80080e6:	f109 0908 	add.w	r9, r9, #8
 80080ea:	e7e0      	b.n	80080ae <_dtoa_r+0x36e>
 80080ec:	f000 809f 	beq.w	800822e <_dtoa_r+0x4ee>
 80080f0:	f1cb 0600 	rsb	r6, fp, #0
 80080f4:	4ba1      	ldr	r3, [pc, #644]	; (800837c <_dtoa_r+0x63c>)
 80080f6:	4fa2      	ldr	r7, [pc, #648]	; (8008380 <_dtoa_r+0x640>)
 80080f8:	f006 020f 	and.w	r2, r6, #15
 80080fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	ec51 0b18 	vmov	r0, r1, d8
 8008108:	f7f8 fa7e 	bl	8000608 <__aeabi_dmul>
 800810c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008110:	1136      	asrs	r6, r6, #4
 8008112:	2300      	movs	r3, #0
 8008114:	2502      	movs	r5, #2
 8008116:	2e00      	cmp	r6, #0
 8008118:	d17e      	bne.n	8008218 <_dtoa_r+0x4d8>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1d0      	bne.n	80080c0 <_dtoa_r+0x380>
 800811e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008120:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 8084 	beq.w	8008232 <_dtoa_r+0x4f2>
 800812a:	4b96      	ldr	r3, [pc, #600]	; (8008384 <_dtoa_r+0x644>)
 800812c:	2200      	movs	r2, #0
 800812e:	4640      	mov	r0, r8
 8008130:	4649      	mov	r1, r9
 8008132:	f7f8 fcdb 	bl	8000aec <__aeabi_dcmplt>
 8008136:	2800      	cmp	r0, #0
 8008138:	d07b      	beq.n	8008232 <_dtoa_r+0x4f2>
 800813a:	9b04      	ldr	r3, [sp, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d078      	beq.n	8008232 <_dtoa_r+0x4f2>
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	dd39      	ble.n	80081ba <_dtoa_r+0x47a>
 8008146:	4b90      	ldr	r3, [pc, #576]	; (8008388 <_dtoa_r+0x648>)
 8008148:	2200      	movs	r2, #0
 800814a:	4640      	mov	r0, r8
 800814c:	4649      	mov	r1, r9
 800814e:	f7f8 fa5b 	bl	8000608 <__aeabi_dmul>
 8008152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008156:	9e01      	ldr	r6, [sp, #4]
 8008158:	f10b 37ff 	add.w	r7, fp, #4294967295
 800815c:	3501      	adds	r5, #1
 800815e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008162:	4628      	mov	r0, r5
 8008164:	f7f8 f9e6 	bl	8000534 <__aeabi_i2d>
 8008168:	4642      	mov	r2, r8
 800816a:	464b      	mov	r3, r9
 800816c:	f7f8 fa4c 	bl	8000608 <__aeabi_dmul>
 8008170:	4b86      	ldr	r3, [pc, #536]	; (800838c <_dtoa_r+0x64c>)
 8008172:	2200      	movs	r2, #0
 8008174:	f7f8 f892 	bl	800029c <__adddf3>
 8008178:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800817c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008180:	9303      	str	r3, [sp, #12]
 8008182:	2e00      	cmp	r6, #0
 8008184:	d158      	bne.n	8008238 <_dtoa_r+0x4f8>
 8008186:	4b82      	ldr	r3, [pc, #520]	; (8008390 <_dtoa_r+0x650>)
 8008188:	2200      	movs	r2, #0
 800818a:	4640      	mov	r0, r8
 800818c:	4649      	mov	r1, r9
 800818e:	f7f8 f883 	bl	8000298 <__aeabi_dsub>
 8008192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008196:	4680      	mov	r8, r0
 8008198:	4689      	mov	r9, r1
 800819a:	f7f8 fcc5 	bl	8000b28 <__aeabi_dcmpgt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	f040 8296 	bne.w	80086d0 <_dtoa_r+0x990>
 80081a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80081a8:	4640      	mov	r0, r8
 80081aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081ae:	4649      	mov	r1, r9
 80081b0:	f7f8 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f040 8289 	bne.w	80086cc <_dtoa_r+0x98c>
 80081ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80081be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f2c0 814e 	blt.w	8008462 <_dtoa_r+0x722>
 80081c6:	f1bb 0f0e 	cmp.w	fp, #14
 80081ca:	f300 814a 	bgt.w	8008462 <_dtoa_r+0x722>
 80081ce:	4b6b      	ldr	r3, [pc, #428]	; (800837c <_dtoa_r+0x63c>)
 80081d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80081d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f280 80dc 	bge.w	8008398 <_dtoa_r+0x658>
 80081e0:	9b04      	ldr	r3, [sp, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f300 80d8 	bgt.w	8008398 <_dtoa_r+0x658>
 80081e8:	f040 826f 	bne.w	80086ca <_dtoa_r+0x98a>
 80081ec:	4b68      	ldr	r3, [pc, #416]	; (8008390 <_dtoa_r+0x650>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	4640      	mov	r0, r8
 80081f2:	4649      	mov	r1, r9
 80081f4:	f7f8 fa08 	bl	8000608 <__aeabi_dmul>
 80081f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081fc:	f7f8 fc8a 	bl	8000b14 <__aeabi_dcmpge>
 8008200:	9e04      	ldr	r6, [sp, #16]
 8008202:	4637      	mov	r7, r6
 8008204:	2800      	cmp	r0, #0
 8008206:	f040 8245 	bne.w	8008694 <_dtoa_r+0x954>
 800820a:	9d00      	ldr	r5, [sp, #0]
 800820c:	2331      	movs	r3, #49	; 0x31
 800820e:	f805 3b01 	strb.w	r3, [r5], #1
 8008212:	f10b 0b01 	add.w	fp, fp, #1
 8008216:	e241      	b.n	800869c <_dtoa_r+0x95c>
 8008218:	07f2      	lsls	r2, r6, #31
 800821a:	d505      	bpl.n	8008228 <_dtoa_r+0x4e8>
 800821c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008220:	f7f8 f9f2 	bl	8000608 <__aeabi_dmul>
 8008224:	3501      	adds	r5, #1
 8008226:	2301      	movs	r3, #1
 8008228:	1076      	asrs	r6, r6, #1
 800822a:	3708      	adds	r7, #8
 800822c:	e773      	b.n	8008116 <_dtoa_r+0x3d6>
 800822e:	2502      	movs	r5, #2
 8008230:	e775      	b.n	800811e <_dtoa_r+0x3de>
 8008232:	9e04      	ldr	r6, [sp, #16]
 8008234:	465f      	mov	r7, fp
 8008236:	e792      	b.n	800815e <_dtoa_r+0x41e>
 8008238:	9900      	ldr	r1, [sp, #0]
 800823a:	4b50      	ldr	r3, [pc, #320]	; (800837c <_dtoa_r+0x63c>)
 800823c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008240:	4431      	add	r1, r6
 8008242:	9102      	str	r1, [sp, #8]
 8008244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008246:	eeb0 9a47 	vmov.f32	s18, s14
 800824a:	eef0 9a67 	vmov.f32	s19, s15
 800824e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008252:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008256:	2900      	cmp	r1, #0
 8008258:	d044      	beq.n	80082e4 <_dtoa_r+0x5a4>
 800825a:	494e      	ldr	r1, [pc, #312]	; (8008394 <_dtoa_r+0x654>)
 800825c:	2000      	movs	r0, #0
 800825e:	f7f8 fafd 	bl	800085c <__aeabi_ddiv>
 8008262:	ec53 2b19 	vmov	r2, r3, d9
 8008266:	f7f8 f817 	bl	8000298 <__aeabi_dsub>
 800826a:	9d00      	ldr	r5, [sp, #0]
 800826c:	ec41 0b19 	vmov	d9, r0, r1
 8008270:	4649      	mov	r1, r9
 8008272:	4640      	mov	r0, r8
 8008274:	f7f8 fc78 	bl	8000b68 <__aeabi_d2iz>
 8008278:	4606      	mov	r6, r0
 800827a:	f7f8 f95b 	bl	8000534 <__aeabi_i2d>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f8 f807 	bl	8000298 <__aeabi_dsub>
 800828a:	3630      	adds	r6, #48	; 0x30
 800828c:	f805 6b01 	strb.w	r6, [r5], #1
 8008290:	ec53 2b19 	vmov	r2, r3, d9
 8008294:	4680      	mov	r8, r0
 8008296:	4689      	mov	r9, r1
 8008298:	f7f8 fc28 	bl	8000aec <__aeabi_dcmplt>
 800829c:	2800      	cmp	r0, #0
 800829e:	d164      	bne.n	800836a <_dtoa_r+0x62a>
 80082a0:	4642      	mov	r2, r8
 80082a2:	464b      	mov	r3, r9
 80082a4:	4937      	ldr	r1, [pc, #220]	; (8008384 <_dtoa_r+0x644>)
 80082a6:	2000      	movs	r0, #0
 80082a8:	f7f7 fff6 	bl	8000298 <__aeabi_dsub>
 80082ac:	ec53 2b19 	vmov	r2, r3, d9
 80082b0:	f7f8 fc1c 	bl	8000aec <__aeabi_dcmplt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f040 80b6 	bne.w	8008426 <_dtoa_r+0x6e6>
 80082ba:	9b02      	ldr	r3, [sp, #8]
 80082bc:	429d      	cmp	r5, r3
 80082be:	f43f af7c 	beq.w	80081ba <_dtoa_r+0x47a>
 80082c2:	4b31      	ldr	r3, [pc, #196]	; (8008388 <_dtoa_r+0x648>)
 80082c4:	ec51 0b19 	vmov	r0, r1, d9
 80082c8:	2200      	movs	r2, #0
 80082ca:	f7f8 f99d 	bl	8000608 <__aeabi_dmul>
 80082ce:	4b2e      	ldr	r3, [pc, #184]	; (8008388 <_dtoa_r+0x648>)
 80082d0:	ec41 0b19 	vmov	d9, r0, r1
 80082d4:	2200      	movs	r2, #0
 80082d6:	4640      	mov	r0, r8
 80082d8:	4649      	mov	r1, r9
 80082da:	f7f8 f995 	bl	8000608 <__aeabi_dmul>
 80082de:	4680      	mov	r8, r0
 80082e0:	4689      	mov	r9, r1
 80082e2:	e7c5      	b.n	8008270 <_dtoa_r+0x530>
 80082e4:	ec51 0b17 	vmov	r0, r1, d7
 80082e8:	f7f8 f98e 	bl	8000608 <__aeabi_dmul>
 80082ec:	9b02      	ldr	r3, [sp, #8]
 80082ee:	9d00      	ldr	r5, [sp, #0]
 80082f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80082f2:	ec41 0b19 	vmov	d9, r0, r1
 80082f6:	4649      	mov	r1, r9
 80082f8:	4640      	mov	r0, r8
 80082fa:	f7f8 fc35 	bl	8000b68 <__aeabi_d2iz>
 80082fe:	4606      	mov	r6, r0
 8008300:	f7f8 f918 	bl	8000534 <__aeabi_i2d>
 8008304:	3630      	adds	r6, #48	; 0x30
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4640      	mov	r0, r8
 800830c:	4649      	mov	r1, r9
 800830e:	f7f7 ffc3 	bl	8000298 <__aeabi_dsub>
 8008312:	f805 6b01 	strb.w	r6, [r5], #1
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	429d      	cmp	r5, r3
 800831a:	4680      	mov	r8, r0
 800831c:	4689      	mov	r9, r1
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	d124      	bne.n	800836e <_dtoa_r+0x62e>
 8008324:	4b1b      	ldr	r3, [pc, #108]	; (8008394 <_dtoa_r+0x654>)
 8008326:	ec51 0b19 	vmov	r0, r1, d9
 800832a:	f7f7 ffb7 	bl	800029c <__adddf3>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f8 fbf7 	bl	8000b28 <__aeabi_dcmpgt>
 800833a:	2800      	cmp	r0, #0
 800833c:	d173      	bne.n	8008426 <_dtoa_r+0x6e6>
 800833e:	ec53 2b19 	vmov	r2, r3, d9
 8008342:	4914      	ldr	r1, [pc, #80]	; (8008394 <_dtoa_r+0x654>)
 8008344:	2000      	movs	r0, #0
 8008346:	f7f7 ffa7 	bl	8000298 <__aeabi_dsub>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	f7f8 fbcb 	bl	8000aec <__aeabi_dcmplt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f43f af2f 	beq.w	80081ba <_dtoa_r+0x47a>
 800835c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800835e:	1e6b      	subs	r3, r5, #1
 8008360:	930f      	str	r3, [sp, #60]	; 0x3c
 8008362:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008366:	2b30      	cmp	r3, #48	; 0x30
 8008368:	d0f8      	beq.n	800835c <_dtoa_r+0x61c>
 800836a:	46bb      	mov	fp, r7
 800836c:	e04a      	b.n	8008404 <_dtoa_r+0x6c4>
 800836e:	4b06      	ldr	r3, [pc, #24]	; (8008388 <_dtoa_r+0x648>)
 8008370:	f7f8 f94a 	bl	8000608 <__aeabi_dmul>
 8008374:	4680      	mov	r8, r0
 8008376:	4689      	mov	r9, r1
 8008378:	e7bd      	b.n	80082f6 <_dtoa_r+0x5b6>
 800837a:	bf00      	nop
 800837c:	08009f00 	.word	0x08009f00
 8008380:	08009ed8 	.word	0x08009ed8
 8008384:	3ff00000 	.word	0x3ff00000
 8008388:	40240000 	.word	0x40240000
 800838c:	401c0000 	.word	0x401c0000
 8008390:	40140000 	.word	0x40140000
 8008394:	3fe00000 	.word	0x3fe00000
 8008398:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800839c:	9d00      	ldr	r5, [sp, #0]
 800839e:	4642      	mov	r2, r8
 80083a0:	464b      	mov	r3, r9
 80083a2:	4630      	mov	r0, r6
 80083a4:	4639      	mov	r1, r7
 80083a6:	f7f8 fa59 	bl	800085c <__aeabi_ddiv>
 80083aa:	f7f8 fbdd 	bl	8000b68 <__aeabi_d2iz>
 80083ae:	9001      	str	r0, [sp, #4]
 80083b0:	f7f8 f8c0 	bl	8000534 <__aeabi_i2d>
 80083b4:	4642      	mov	r2, r8
 80083b6:	464b      	mov	r3, r9
 80083b8:	f7f8 f926 	bl	8000608 <__aeabi_dmul>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4630      	mov	r0, r6
 80083c2:	4639      	mov	r1, r7
 80083c4:	f7f7 ff68 	bl	8000298 <__aeabi_dsub>
 80083c8:	9e01      	ldr	r6, [sp, #4]
 80083ca:	9f04      	ldr	r7, [sp, #16]
 80083cc:	3630      	adds	r6, #48	; 0x30
 80083ce:	f805 6b01 	strb.w	r6, [r5], #1
 80083d2:	9e00      	ldr	r6, [sp, #0]
 80083d4:	1bae      	subs	r6, r5, r6
 80083d6:	42b7      	cmp	r7, r6
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	d134      	bne.n	8008448 <_dtoa_r+0x708>
 80083de:	f7f7 ff5d 	bl	800029c <__adddf3>
 80083e2:	4642      	mov	r2, r8
 80083e4:	464b      	mov	r3, r9
 80083e6:	4606      	mov	r6, r0
 80083e8:	460f      	mov	r7, r1
 80083ea:	f7f8 fb9d 	bl	8000b28 <__aeabi_dcmpgt>
 80083ee:	b9c8      	cbnz	r0, 8008424 <_dtoa_r+0x6e4>
 80083f0:	4642      	mov	r2, r8
 80083f2:	464b      	mov	r3, r9
 80083f4:	4630      	mov	r0, r6
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f8 fb6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80083fc:	b110      	cbz	r0, 8008404 <_dtoa_r+0x6c4>
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	07db      	lsls	r3, r3, #31
 8008402:	d40f      	bmi.n	8008424 <_dtoa_r+0x6e4>
 8008404:	4651      	mov	r1, sl
 8008406:	4620      	mov	r0, r4
 8008408:	f000 fbcc 	bl	8008ba4 <_Bfree>
 800840c:	2300      	movs	r3, #0
 800840e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008410:	702b      	strb	r3, [r5, #0]
 8008412:	f10b 0301 	add.w	r3, fp, #1
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800841a:	2b00      	cmp	r3, #0
 800841c:	f43f ace2 	beq.w	8007de4 <_dtoa_r+0xa4>
 8008420:	601d      	str	r5, [r3, #0]
 8008422:	e4df      	b.n	8007de4 <_dtoa_r+0xa4>
 8008424:	465f      	mov	r7, fp
 8008426:	462b      	mov	r3, r5
 8008428:	461d      	mov	r5, r3
 800842a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800842e:	2a39      	cmp	r2, #57	; 0x39
 8008430:	d106      	bne.n	8008440 <_dtoa_r+0x700>
 8008432:	9a00      	ldr	r2, [sp, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d1f7      	bne.n	8008428 <_dtoa_r+0x6e8>
 8008438:	9900      	ldr	r1, [sp, #0]
 800843a:	2230      	movs	r2, #48	; 0x30
 800843c:	3701      	adds	r7, #1
 800843e:	700a      	strb	r2, [r1, #0]
 8008440:	781a      	ldrb	r2, [r3, #0]
 8008442:	3201      	adds	r2, #1
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e790      	b.n	800836a <_dtoa_r+0x62a>
 8008448:	4ba3      	ldr	r3, [pc, #652]	; (80086d8 <_dtoa_r+0x998>)
 800844a:	2200      	movs	r2, #0
 800844c:	f7f8 f8dc 	bl	8000608 <__aeabi_dmul>
 8008450:	2200      	movs	r2, #0
 8008452:	2300      	movs	r3, #0
 8008454:	4606      	mov	r6, r0
 8008456:	460f      	mov	r7, r1
 8008458:	f7f8 fb3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800845c:	2800      	cmp	r0, #0
 800845e:	d09e      	beq.n	800839e <_dtoa_r+0x65e>
 8008460:	e7d0      	b.n	8008404 <_dtoa_r+0x6c4>
 8008462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008464:	2a00      	cmp	r2, #0
 8008466:	f000 80ca 	beq.w	80085fe <_dtoa_r+0x8be>
 800846a:	9a07      	ldr	r2, [sp, #28]
 800846c:	2a01      	cmp	r2, #1
 800846e:	f300 80ad 	bgt.w	80085cc <_dtoa_r+0x88c>
 8008472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008474:	2a00      	cmp	r2, #0
 8008476:	f000 80a5 	beq.w	80085c4 <_dtoa_r+0x884>
 800847a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800847e:	9e08      	ldr	r6, [sp, #32]
 8008480:	9d05      	ldr	r5, [sp, #20]
 8008482:	9a05      	ldr	r2, [sp, #20]
 8008484:	441a      	add	r2, r3
 8008486:	9205      	str	r2, [sp, #20]
 8008488:	9a06      	ldr	r2, [sp, #24]
 800848a:	2101      	movs	r1, #1
 800848c:	441a      	add	r2, r3
 800848e:	4620      	mov	r0, r4
 8008490:	9206      	str	r2, [sp, #24]
 8008492:	f000 fc3d 	bl	8008d10 <__i2b>
 8008496:	4607      	mov	r7, r0
 8008498:	b165      	cbz	r5, 80084b4 <_dtoa_r+0x774>
 800849a:	9b06      	ldr	r3, [sp, #24]
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd09      	ble.n	80084b4 <_dtoa_r+0x774>
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	9a05      	ldr	r2, [sp, #20]
 80084a4:	bfa8      	it	ge
 80084a6:	462b      	movge	r3, r5
 80084a8:	1ad2      	subs	r2, r2, r3
 80084aa:	9205      	str	r2, [sp, #20]
 80084ac:	9a06      	ldr	r2, [sp, #24]
 80084ae:	1aed      	subs	r5, r5, r3
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	9306      	str	r3, [sp, #24]
 80084b4:	9b08      	ldr	r3, [sp, #32]
 80084b6:	b1f3      	cbz	r3, 80084f6 <_dtoa_r+0x7b6>
 80084b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80a3 	beq.w	8008606 <_dtoa_r+0x8c6>
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	dd10      	ble.n	80084e6 <_dtoa_r+0x7a6>
 80084c4:	4639      	mov	r1, r7
 80084c6:	4632      	mov	r2, r6
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fce1 	bl	8008e90 <__pow5mult>
 80084ce:	4652      	mov	r2, sl
 80084d0:	4601      	mov	r1, r0
 80084d2:	4607      	mov	r7, r0
 80084d4:	4620      	mov	r0, r4
 80084d6:	f000 fc31 	bl	8008d3c <__multiply>
 80084da:	4651      	mov	r1, sl
 80084dc:	4680      	mov	r8, r0
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 fb60 	bl	8008ba4 <_Bfree>
 80084e4:	46c2      	mov	sl, r8
 80084e6:	9b08      	ldr	r3, [sp, #32]
 80084e8:	1b9a      	subs	r2, r3, r6
 80084ea:	d004      	beq.n	80084f6 <_dtoa_r+0x7b6>
 80084ec:	4651      	mov	r1, sl
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 fcce 	bl	8008e90 <__pow5mult>
 80084f4:	4682      	mov	sl, r0
 80084f6:	2101      	movs	r1, #1
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 fc09 	bl	8008d10 <__i2b>
 80084fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008500:	2b00      	cmp	r3, #0
 8008502:	4606      	mov	r6, r0
 8008504:	f340 8081 	ble.w	800860a <_dtoa_r+0x8ca>
 8008508:	461a      	mov	r2, r3
 800850a:	4601      	mov	r1, r0
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fcbf 	bl	8008e90 <__pow5mult>
 8008512:	9b07      	ldr	r3, [sp, #28]
 8008514:	2b01      	cmp	r3, #1
 8008516:	4606      	mov	r6, r0
 8008518:	dd7a      	ble.n	8008610 <_dtoa_r+0x8d0>
 800851a:	f04f 0800 	mov.w	r8, #0
 800851e:	6933      	ldr	r3, [r6, #16]
 8008520:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008524:	6918      	ldr	r0, [r3, #16]
 8008526:	f000 fba5 	bl	8008c74 <__hi0bits>
 800852a:	f1c0 0020 	rsb	r0, r0, #32
 800852e:	9b06      	ldr	r3, [sp, #24]
 8008530:	4418      	add	r0, r3
 8008532:	f010 001f 	ands.w	r0, r0, #31
 8008536:	f000 8094 	beq.w	8008662 <_dtoa_r+0x922>
 800853a:	f1c0 0320 	rsb	r3, r0, #32
 800853e:	2b04      	cmp	r3, #4
 8008540:	f340 8085 	ble.w	800864e <_dtoa_r+0x90e>
 8008544:	9b05      	ldr	r3, [sp, #20]
 8008546:	f1c0 001c 	rsb	r0, r0, #28
 800854a:	4403      	add	r3, r0
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	9b06      	ldr	r3, [sp, #24]
 8008550:	4403      	add	r3, r0
 8008552:	4405      	add	r5, r0
 8008554:	9306      	str	r3, [sp, #24]
 8008556:	9b05      	ldr	r3, [sp, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	dd05      	ble.n	8008568 <_dtoa_r+0x828>
 800855c:	4651      	mov	r1, sl
 800855e:	461a      	mov	r2, r3
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fcef 	bl	8008f44 <__lshift>
 8008566:	4682      	mov	sl, r0
 8008568:	9b06      	ldr	r3, [sp, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	dd05      	ble.n	800857a <_dtoa_r+0x83a>
 800856e:	4631      	mov	r1, r6
 8008570:	461a      	mov	r2, r3
 8008572:	4620      	mov	r0, r4
 8008574:	f000 fce6 	bl	8008f44 <__lshift>
 8008578:	4606      	mov	r6, r0
 800857a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800857c:	2b00      	cmp	r3, #0
 800857e:	d072      	beq.n	8008666 <_dtoa_r+0x926>
 8008580:	4631      	mov	r1, r6
 8008582:	4650      	mov	r0, sl
 8008584:	f000 fd4a 	bl	800901c <__mcmp>
 8008588:	2800      	cmp	r0, #0
 800858a:	da6c      	bge.n	8008666 <_dtoa_r+0x926>
 800858c:	2300      	movs	r3, #0
 800858e:	4651      	mov	r1, sl
 8008590:	220a      	movs	r2, #10
 8008592:	4620      	mov	r0, r4
 8008594:	f000 fb28 	bl	8008be8 <__multadd>
 8008598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800859e:	4682      	mov	sl, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 81b0 	beq.w	8008906 <_dtoa_r+0xbc6>
 80085a6:	2300      	movs	r3, #0
 80085a8:	4639      	mov	r1, r7
 80085aa:	220a      	movs	r2, #10
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fb1b 	bl	8008be8 <__multadd>
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	4607      	mov	r7, r0
 80085b8:	f300 8096 	bgt.w	80086e8 <_dtoa_r+0x9a8>
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	dc59      	bgt.n	8008676 <_dtoa_r+0x936>
 80085c2:	e091      	b.n	80086e8 <_dtoa_r+0x9a8>
 80085c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085ca:	e758      	b.n	800847e <_dtoa_r+0x73e>
 80085cc:	9b04      	ldr	r3, [sp, #16]
 80085ce:	1e5e      	subs	r6, r3, #1
 80085d0:	9b08      	ldr	r3, [sp, #32]
 80085d2:	42b3      	cmp	r3, r6
 80085d4:	bfbf      	itttt	lt
 80085d6:	9b08      	ldrlt	r3, [sp, #32]
 80085d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80085da:	9608      	strlt	r6, [sp, #32]
 80085dc:	1af3      	sublt	r3, r6, r3
 80085de:	bfb4      	ite	lt
 80085e0:	18d2      	addlt	r2, r2, r3
 80085e2:	1b9e      	subge	r6, r3, r6
 80085e4:	9b04      	ldr	r3, [sp, #16]
 80085e6:	bfbc      	itt	lt
 80085e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80085ea:	2600      	movlt	r6, #0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfb7      	itett	lt
 80085f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80085f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80085f8:	1a9d      	sublt	r5, r3, r2
 80085fa:	2300      	movlt	r3, #0
 80085fc:	e741      	b.n	8008482 <_dtoa_r+0x742>
 80085fe:	9e08      	ldr	r6, [sp, #32]
 8008600:	9d05      	ldr	r5, [sp, #20]
 8008602:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008604:	e748      	b.n	8008498 <_dtoa_r+0x758>
 8008606:	9a08      	ldr	r2, [sp, #32]
 8008608:	e770      	b.n	80084ec <_dtoa_r+0x7ac>
 800860a:	9b07      	ldr	r3, [sp, #28]
 800860c:	2b01      	cmp	r3, #1
 800860e:	dc19      	bgt.n	8008644 <_dtoa_r+0x904>
 8008610:	9b02      	ldr	r3, [sp, #8]
 8008612:	b9bb      	cbnz	r3, 8008644 <_dtoa_r+0x904>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800861a:	b99b      	cbnz	r3, 8008644 <_dtoa_r+0x904>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008622:	0d1b      	lsrs	r3, r3, #20
 8008624:	051b      	lsls	r3, r3, #20
 8008626:	b183      	cbz	r3, 800864a <_dtoa_r+0x90a>
 8008628:	9b05      	ldr	r3, [sp, #20]
 800862a:	3301      	adds	r3, #1
 800862c:	9305      	str	r3, [sp, #20]
 800862e:	9b06      	ldr	r3, [sp, #24]
 8008630:	3301      	adds	r3, #1
 8008632:	9306      	str	r3, [sp, #24]
 8008634:	f04f 0801 	mov.w	r8, #1
 8008638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863a:	2b00      	cmp	r3, #0
 800863c:	f47f af6f 	bne.w	800851e <_dtoa_r+0x7de>
 8008640:	2001      	movs	r0, #1
 8008642:	e774      	b.n	800852e <_dtoa_r+0x7ee>
 8008644:	f04f 0800 	mov.w	r8, #0
 8008648:	e7f6      	b.n	8008638 <_dtoa_r+0x8f8>
 800864a:	4698      	mov	r8, r3
 800864c:	e7f4      	b.n	8008638 <_dtoa_r+0x8f8>
 800864e:	d082      	beq.n	8008556 <_dtoa_r+0x816>
 8008650:	9a05      	ldr	r2, [sp, #20]
 8008652:	331c      	adds	r3, #28
 8008654:	441a      	add	r2, r3
 8008656:	9205      	str	r2, [sp, #20]
 8008658:	9a06      	ldr	r2, [sp, #24]
 800865a:	441a      	add	r2, r3
 800865c:	441d      	add	r5, r3
 800865e:	9206      	str	r2, [sp, #24]
 8008660:	e779      	b.n	8008556 <_dtoa_r+0x816>
 8008662:	4603      	mov	r3, r0
 8008664:	e7f4      	b.n	8008650 <_dtoa_r+0x910>
 8008666:	9b04      	ldr	r3, [sp, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dc37      	bgt.n	80086dc <_dtoa_r+0x99c>
 800866c:	9b07      	ldr	r3, [sp, #28]
 800866e:	2b02      	cmp	r3, #2
 8008670:	dd34      	ble.n	80086dc <_dtoa_r+0x99c>
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	b963      	cbnz	r3, 8008694 <_dtoa_r+0x954>
 800867a:	4631      	mov	r1, r6
 800867c:	2205      	movs	r2, #5
 800867e:	4620      	mov	r0, r4
 8008680:	f000 fab2 	bl	8008be8 <__multadd>
 8008684:	4601      	mov	r1, r0
 8008686:	4606      	mov	r6, r0
 8008688:	4650      	mov	r0, sl
 800868a:	f000 fcc7 	bl	800901c <__mcmp>
 800868e:	2800      	cmp	r0, #0
 8008690:	f73f adbb 	bgt.w	800820a <_dtoa_r+0x4ca>
 8008694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008696:	9d00      	ldr	r5, [sp, #0]
 8008698:	ea6f 0b03 	mvn.w	fp, r3
 800869c:	f04f 0800 	mov.w	r8, #0
 80086a0:	4631      	mov	r1, r6
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 fa7e 	bl	8008ba4 <_Bfree>
 80086a8:	2f00      	cmp	r7, #0
 80086aa:	f43f aeab 	beq.w	8008404 <_dtoa_r+0x6c4>
 80086ae:	f1b8 0f00 	cmp.w	r8, #0
 80086b2:	d005      	beq.n	80086c0 <_dtoa_r+0x980>
 80086b4:	45b8      	cmp	r8, r7
 80086b6:	d003      	beq.n	80086c0 <_dtoa_r+0x980>
 80086b8:	4641      	mov	r1, r8
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fa72 	bl	8008ba4 <_Bfree>
 80086c0:	4639      	mov	r1, r7
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 fa6e 	bl	8008ba4 <_Bfree>
 80086c8:	e69c      	b.n	8008404 <_dtoa_r+0x6c4>
 80086ca:	2600      	movs	r6, #0
 80086cc:	4637      	mov	r7, r6
 80086ce:	e7e1      	b.n	8008694 <_dtoa_r+0x954>
 80086d0:	46bb      	mov	fp, r7
 80086d2:	4637      	mov	r7, r6
 80086d4:	e599      	b.n	800820a <_dtoa_r+0x4ca>
 80086d6:	bf00      	nop
 80086d8:	40240000 	.word	0x40240000
 80086dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 80c8 	beq.w	8008874 <_dtoa_r+0xb34>
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	dd05      	ble.n	80086f8 <_dtoa_r+0x9b8>
 80086ec:	4639      	mov	r1, r7
 80086ee:	462a      	mov	r2, r5
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 fc27 	bl	8008f44 <__lshift>
 80086f6:	4607      	mov	r7, r0
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	d05b      	beq.n	80087b6 <_dtoa_r+0xa76>
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fa0f 	bl	8008b24 <_Balloc>
 8008706:	4605      	mov	r5, r0
 8008708:	b928      	cbnz	r0, 8008716 <_dtoa_r+0x9d6>
 800870a:	4b83      	ldr	r3, [pc, #524]	; (8008918 <_dtoa_r+0xbd8>)
 800870c:	4602      	mov	r2, r0
 800870e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008712:	f7ff bb2e 	b.w	8007d72 <_dtoa_r+0x32>
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	3202      	adds	r2, #2
 800871a:	0092      	lsls	r2, r2, #2
 800871c:	f107 010c 	add.w	r1, r7, #12
 8008720:	300c      	adds	r0, #12
 8008722:	f000 ffab 	bl	800967c <memcpy>
 8008726:	2201      	movs	r2, #1
 8008728:	4629      	mov	r1, r5
 800872a:	4620      	mov	r0, r4
 800872c:	f000 fc0a 	bl	8008f44 <__lshift>
 8008730:	9b00      	ldr	r3, [sp, #0]
 8008732:	3301      	adds	r3, #1
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800873a:	4413      	add	r3, r2
 800873c:	9308      	str	r3, [sp, #32]
 800873e:	9b02      	ldr	r3, [sp, #8]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	46b8      	mov	r8, r7
 8008746:	9306      	str	r3, [sp, #24]
 8008748:	4607      	mov	r7, r0
 800874a:	9b04      	ldr	r3, [sp, #16]
 800874c:	4631      	mov	r1, r6
 800874e:	3b01      	subs	r3, #1
 8008750:	4650      	mov	r0, sl
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	f7ff fa69 	bl	8007c2a <quorem>
 8008758:	4641      	mov	r1, r8
 800875a:	9002      	str	r0, [sp, #8]
 800875c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008760:	4650      	mov	r0, sl
 8008762:	f000 fc5b 	bl	800901c <__mcmp>
 8008766:	463a      	mov	r2, r7
 8008768:	9005      	str	r0, [sp, #20]
 800876a:	4631      	mov	r1, r6
 800876c:	4620      	mov	r0, r4
 800876e:	f000 fc71 	bl	8009054 <__mdiff>
 8008772:	68c2      	ldr	r2, [r0, #12]
 8008774:	4605      	mov	r5, r0
 8008776:	bb02      	cbnz	r2, 80087ba <_dtoa_r+0xa7a>
 8008778:	4601      	mov	r1, r0
 800877a:	4650      	mov	r0, sl
 800877c:	f000 fc4e 	bl	800901c <__mcmp>
 8008780:	4602      	mov	r2, r0
 8008782:	4629      	mov	r1, r5
 8008784:	4620      	mov	r0, r4
 8008786:	9209      	str	r2, [sp, #36]	; 0x24
 8008788:	f000 fa0c 	bl	8008ba4 <_Bfree>
 800878c:	9b07      	ldr	r3, [sp, #28]
 800878e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008790:	9d04      	ldr	r5, [sp, #16]
 8008792:	ea43 0102 	orr.w	r1, r3, r2
 8008796:	9b06      	ldr	r3, [sp, #24]
 8008798:	4319      	orrs	r1, r3
 800879a:	d110      	bne.n	80087be <_dtoa_r+0xa7e>
 800879c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087a0:	d029      	beq.n	80087f6 <_dtoa_r+0xab6>
 80087a2:	9b05      	ldr	r3, [sp, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dd02      	ble.n	80087ae <_dtoa_r+0xa6e>
 80087a8:	9b02      	ldr	r3, [sp, #8]
 80087aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	f883 9000 	strb.w	r9, [r3]
 80087b4:	e774      	b.n	80086a0 <_dtoa_r+0x960>
 80087b6:	4638      	mov	r0, r7
 80087b8:	e7ba      	b.n	8008730 <_dtoa_r+0x9f0>
 80087ba:	2201      	movs	r2, #1
 80087bc:	e7e1      	b.n	8008782 <_dtoa_r+0xa42>
 80087be:	9b05      	ldr	r3, [sp, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	db04      	blt.n	80087ce <_dtoa_r+0xa8e>
 80087c4:	9907      	ldr	r1, [sp, #28]
 80087c6:	430b      	orrs	r3, r1
 80087c8:	9906      	ldr	r1, [sp, #24]
 80087ca:	430b      	orrs	r3, r1
 80087cc:	d120      	bne.n	8008810 <_dtoa_r+0xad0>
 80087ce:	2a00      	cmp	r2, #0
 80087d0:	dded      	ble.n	80087ae <_dtoa_r+0xa6e>
 80087d2:	4651      	mov	r1, sl
 80087d4:	2201      	movs	r2, #1
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 fbb4 	bl	8008f44 <__lshift>
 80087dc:	4631      	mov	r1, r6
 80087de:	4682      	mov	sl, r0
 80087e0:	f000 fc1c 	bl	800901c <__mcmp>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	dc03      	bgt.n	80087f0 <_dtoa_r+0xab0>
 80087e8:	d1e1      	bne.n	80087ae <_dtoa_r+0xa6e>
 80087ea:	f019 0f01 	tst.w	r9, #1
 80087ee:	d0de      	beq.n	80087ae <_dtoa_r+0xa6e>
 80087f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087f4:	d1d8      	bne.n	80087a8 <_dtoa_r+0xa68>
 80087f6:	9a01      	ldr	r2, [sp, #4]
 80087f8:	2339      	movs	r3, #57	; 0x39
 80087fa:	7013      	strb	r3, [r2, #0]
 80087fc:	462b      	mov	r3, r5
 80087fe:	461d      	mov	r5, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008806:	2a39      	cmp	r2, #57	; 0x39
 8008808:	d06c      	beq.n	80088e4 <_dtoa_r+0xba4>
 800880a:	3201      	adds	r2, #1
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	e747      	b.n	80086a0 <_dtoa_r+0x960>
 8008810:	2a00      	cmp	r2, #0
 8008812:	dd07      	ble.n	8008824 <_dtoa_r+0xae4>
 8008814:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008818:	d0ed      	beq.n	80087f6 <_dtoa_r+0xab6>
 800881a:	9a01      	ldr	r2, [sp, #4]
 800881c:	f109 0301 	add.w	r3, r9, #1
 8008820:	7013      	strb	r3, [r2, #0]
 8008822:	e73d      	b.n	80086a0 <_dtoa_r+0x960>
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	9a08      	ldr	r2, [sp, #32]
 8008828:	f803 9c01 	strb.w	r9, [r3, #-1]
 800882c:	4293      	cmp	r3, r2
 800882e:	d043      	beq.n	80088b8 <_dtoa_r+0xb78>
 8008830:	4651      	mov	r1, sl
 8008832:	2300      	movs	r3, #0
 8008834:	220a      	movs	r2, #10
 8008836:	4620      	mov	r0, r4
 8008838:	f000 f9d6 	bl	8008be8 <__multadd>
 800883c:	45b8      	cmp	r8, r7
 800883e:	4682      	mov	sl, r0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	f04f 020a 	mov.w	r2, #10
 8008848:	4641      	mov	r1, r8
 800884a:	4620      	mov	r0, r4
 800884c:	d107      	bne.n	800885e <_dtoa_r+0xb1e>
 800884e:	f000 f9cb 	bl	8008be8 <__multadd>
 8008852:	4680      	mov	r8, r0
 8008854:	4607      	mov	r7, r0
 8008856:	9b04      	ldr	r3, [sp, #16]
 8008858:	3301      	adds	r3, #1
 800885a:	9304      	str	r3, [sp, #16]
 800885c:	e775      	b.n	800874a <_dtoa_r+0xa0a>
 800885e:	f000 f9c3 	bl	8008be8 <__multadd>
 8008862:	4639      	mov	r1, r7
 8008864:	4680      	mov	r8, r0
 8008866:	2300      	movs	r3, #0
 8008868:	220a      	movs	r2, #10
 800886a:	4620      	mov	r0, r4
 800886c:	f000 f9bc 	bl	8008be8 <__multadd>
 8008870:	4607      	mov	r7, r0
 8008872:	e7f0      	b.n	8008856 <_dtoa_r+0xb16>
 8008874:	9b04      	ldr	r3, [sp, #16]
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	9d00      	ldr	r5, [sp, #0]
 800887a:	4631      	mov	r1, r6
 800887c:	4650      	mov	r0, sl
 800887e:	f7ff f9d4 	bl	8007c2a <quorem>
 8008882:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	f805 9b01 	strb.w	r9, [r5], #1
 800888c:	1aea      	subs	r2, r5, r3
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	4293      	cmp	r3, r2
 8008892:	dd07      	ble.n	80088a4 <_dtoa_r+0xb64>
 8008894:	4651      	mov	r1, sl
 8008896:	2300      	movs	r3, #0
 8008898:	220a      	movs	r2, #10
 800889a:	4620      	mov	r0, r4
 800889c:	f000 f9a4 	bl	8008be8 <__multadd>
 80088a0:	4682      	mov	sl, r0
 80088a2:	e7ea      	b.n	800887a <_dtoa_r+0xb3a>
 80088a4:	9b01      	ldr	r3, [sp, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfc8      	it	gt
 80088aa:	461d      	movgt	r5, r3
 80088ac:	9b00      	ldr	r3, [sp, #0]
 80088ae:	bfd8      	it	le
 80088b0:	2501      	movle	r5, #1
 80088b2:	441d      	add	r5, r3
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	4651      	mov	r1, sl
 80088ba:	2201      	movs	r2, #1
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fb41 	bl	8008f44 <__lshift>
 80088c2:	4631      	mov	r1, r6
 80088c4:	4682      	mov	sl, r0
 80088c6:	f000 fba9 	bl	800901c <__mcmp>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	dc96      	bgt.n	80087fc <_dtoa_r+0xabc>
 80088ce:	d102      	bne.n	80088d6 <_dtoa_r+0xb96>
 80088d0:	f019 0f01 	tst.w	r9, #1
 80088d4:	d192      	bne.n	80087fc <_dtoa_r+0xabc>
 80088d6:	462b      	mov	r3, r5
 80088d8:	461d      	mov	r5, r3
 80088da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088de:	2a30      	cmp	r2, #48	; 0x30
 80088e0:	d0fa      	beq.n	80088d8 <_dtoa_r+0xb98>
 80088e2:	e6dd      	b.n	80086a0 <_dtoa_r+0x960>
 80088e4:	9a00      	ldr	r2, [sp, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d189      	bne.n	80087fe <_dtoa_r+0xabe>
 80088ea:	f10b 0b01 	add.w	fp, fp, #1
 80088ee:	2331      	movs	r3, #49	; 0x31
 80088f0:	e796      	b.n	8008820 <_dtoa_r+0xae0>
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <_dtoa_r+0xbdc>)
 80088f4:	f7ff ba99 	b.w	8007e2a <_dtoa_r+0xea>
 80088f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f47f aa6d 	bne.w	8007dda <_dtoa_r+0x9a>
 8008900:	4b07      	ldr	r3, [pc, #28]	; (8008920 <_dtoa_r+0xbe0>)
 8008902:	f7ff ba92 	b.w	8007e2a <_dtoa_r+0xea>
 8008906:	9b01      	ldr	r3, [sp, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dcb5      	bgt.n	8008878 <_dtoa_r+0xb38>
 800890c:	9b07      	ldr	r3, [sp, #28]
 800890e:	2b02      	cmp	r3, #2
 8008910:	f73f aeb1 	bgt.w	8008676 <_dtoa_r+0x936>
 8008914:	e7b0      	b.n	8008878 <_dtoa_r+0xb38>
 8008916:	bf00      	nop
 8008918:	08009e68 	.word	0x08009e68
 800891c:	08009dc8 	.word	0x08009dc8
 8008920:	08009dec 	.word	0x08009dec

08008924 <_free_r>:
 8008924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008926:	2900      	cmp	r1, #0
 8008928:	d044      	beq.n	80089b4 <_free_r+0x90>
 800892a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800892e:	9001      	str	r0, [sp, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f1a1 0404 	sub.w	r4, r1, #4
 8008936:	bfb8      	it	lt
 8008938:	18e4      	addlt	r4, r4, r3
 800893a:	f000 f8e7 	bl	8008b0c <__malloc_lock>
 800893e:	4a1e      	ldr	r2, [pc, #120]	; (80089b8 <_free_r+0x94>)
 8008940:	9801      	ldr	r0, [sp, #4]
 8008942:	6813      	ldr	r3, [r2, #0]
 8008944:	b933      	cbnz	r3, 8008954 <_free_r+0x30>
 8008946:	6063      	str	r3, [r4, #4]
 8008948:	6014      	str	r4, [r2, #0]
 800894a:	b003      	add	sp, #12
 800894c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008950:	f000 b8e2 	b.w	8008b18 <__malloc_unlock>
 8008954:	42a3      	cmp	r3, r4
 8008956:	d908      	bls.n	800896a <_free_r+0x46>
 8008958:	6825      	ldr	r5, [r4, #0]
 800895a:	1961      	adds	r1, r4, r5
 800895c:	428b      	cmp	r3, r1
 800895e:	bf01      	itttt	eq
 8008960:	6819      	ldreq	r1, [r3, #0]
 8008962:	685b      	ldreq	r3, [r3, #4]
 8008964:	1949      	addeq	r1, r1, r5
 8008966:	6021      	streq	r1, [r4, #0]
 8008968:	e7ed      	b.n	8008946 <_free_r+0x22>
 800896a:	461a      	mov	r2, r3
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	b10b      	cbz	r3, 8008974 <_free_r+0x50>
 8008970:	42a3      	cmp	r3, r4
 8008972:	d9fa      	bls.n	800896a <_free_r+0x46>
 8008974:	6811      	ldr	r1, [r2, #0]
 8008976:	1855      	adds	r5, r2, r1
 8008978:	42a5      	cmp	r5, r4
 800897a:	d10b      	bne.n	8008994 <_free_r+0x70>
 800897c:	6824      	ldr	r4, [r4, #0]
 800897e:	4421      	add	r1, r4
 8008980:	1854      	adds	r4, r2, r1
 8008982:	42a3      	cmp	r3, r4
 8008984:	6011      	str	r1, [r2, #0]
 8008986:	d1e0      	bne.n	800894a <_free_r+0x26>
 8008988:	681c      	ldr	r4, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	6053      	str	r3, [r2, #4]
 800898e:	440c      	add	r4, r1
 8008990:	6014      	str	r4, [r2, #0]
 8008992:	e7da      	b.n	800894a <_free_r+0x26>
 8008994:	d902      	bls.n	800899c <_free_r+0x78>
 8008996:	230c      	movs	r3, #12
 8008998:	6003      	str	r3, [r0, #0]
 800899a:	e7d6      	b.n	800894a <_free_r+0x26>
 800899c:	6825      	ldr	r5, [r4, #0]
 800899e:	1961      	adds	r1, r4, r5
 80089a0:	428b      	cmp	r3, r1
 80089a2:	bf04      	itt	eq
 80089a4:	6819      	ldreq	r1, [r3, #0]
 80089a6:	685b      	ldreq	r3, [r3, #4]
 80089a8:	6063      	str	r3, [r4, #4]
 80089aa:	bf04      	itt	eq
 80089ac:	1949      	addeq	r1, r1, r5
 80089ae:	6021      	streq	r1, [r4, #0]
 80089b0:	6054      	str	r4, [r2, #4]
 80089b2:	e7ca      	b.n	800894a <_free_r+0x26>
 80089b4:	b003      	add	sp, #12
 80089b6:	bd30      	pop	{r4, r5, pc}
 80089b8:	20000558 	.word	0x20000558

080089bc <malloc>:
 80089bc:	4b02      	ldr	r3, [pc, #8]	; (80089c8 <malloc+0xc>)
 80089be:	4601      	mov	r1, r0
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f000 b823 	b.w	8008a0c <_malloc_r>
 80089c6:	bf00      	nop
 80089c8:	20000074 	.word	0x20000074

080089cc <sbrk_aligned>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	4e0e      	ldr	r6, [pc, #56]	; (8008a08 <sbrk_aligned+0x3c>)
 80089d0:	460c      	mov	r4, r1
 80089d2:	6831      	ldr	r1, [r6, #0]
 80089d4:	4605      	mov	r5, r0
 80089d6:	b911      	cbnz	r1, 80089de <sbrk_aligned+0x12>
 80089d8:	f000 fe40 	bl	800965c <_sbrk_r>
 80089dc:	6030      	str	r0, [r6, #0]
 80089de:	4621      	mov	r1, r4
 80089e0:	4628      	mov	r0, r5
 80089e2:	f000 fe3b 	bl	800965c <_sbrk_r>
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	d00a      	beq.n	8008a00 <sbrk_aligned+0x34>
 80089ea:	1cc4      	adds	r4, r0, #3
 80089ec:	f024 0403 	bic.w	r4, r4, #3
 80089f0:	42a0      	cmp	r0, r4
 80089f2:	d007      	beq.n	8008a04 <sbrk_aligned+0x38>
 80089f4:	1a21      	subs	r1, r4, r0
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 fe30 	bl	800965c <_sbrk_r>
 80089fc:	3001      	adds	r0, #1
 80089fe:	d101      	bne.n	8008a04 <sbrk_aligned+0x38>
 8008a00:	f04f 34ff 	mov.w	r4, #4294967295
 8008a04:	4620      	mov	r0, r4
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	2000055c 	.word	0x2000055c

08008a0c <_malloc_r>:
 8008a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a10:	1ccd      	adds	r5, r1, #3
 8008a12:	f025 0503 	bic.w	r5, r5, #3
 8008a16:	3508      	adds	r5, #8
 8008a18:	2d0c      	cmp	r5, #12
 8008a1a:	bf38      	it	cc
 8008a1c:	250c      	movcc	r5, #12
 8008a1e:	2d00      	cmp	r5, #0
 8008a20:	4607      	mov	r7, r0
 8008a22:	db01      	blt.n	8008a28 <_malloc_r+0x1c>
 8008a24:	42a9      	cmp	r1, r5
 8008a26:	d905      	bls.n	8008a34 <_malloc_r+0x28>
 8008a28:	230c      	movs	r3, #12
 8008a2a:	603b      	str	r3, [r7, #0]
 8008a2c:	2600      	movs	r6, #0
 8008a2e:	4630      	mov	r0, r6
 8008a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b08 <_malloc_r+0xfc>
 8008a38:	f000 f868 	bl	8008b0c <__malloc_lock>
 8008a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a40:	461c      	mov	r4, r3
 8008a42:	bb5c      	cbnz	r4, 8008a9c <_malloc_r+0x90>
 8008a44:	4629      	mov	r1, r5
 8008a46:	4638      	mov	r0, r7
 8008a48:	f7ff ffc0 	bl	80089cc <sbrk_aligned>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	4604      	mov	r4, r0
 8008a50:	d155      	bne.n	8008afe <_malloc_r+0xf2>
 8008a52:	f8d8 4000 	ldr.w	r4, [r8]
 8008a56:	4626      	mov	r6, r4
 8008a58:	2e00      	cmp	r6, #0
 8008a5a:	d145      	bne.n	8008ae8 <_malloc_r+0xdc>
 8008a5c:	2c00      	cmp	r4, #0
 8008a5e:	d048      	beq.n	8008af2 <_malloc_r+0xe6>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	4631      	mov	r1, r6
 8008a64:	4638      	mov	r0, r7
 8008a66:	eb04 0903 	add.w	r9, r4, r3
 8008a6a:	f000 fdf7 	bl	800965c <_sbrk_r>
 8008a6e:	4581      	cmp	r9, r0
 8008a70:	d13f      	bne.n	8008af2 <_malloc_r+0xe6>
 8008a72:	6821      	ldr	r1, [r4, #0]
 8008a74:	1a6d      	subs	r5, r5, r1
 8008a76:	4629      	mov	r1, r5
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f7ff ffa7 	bl	80089cc <sbrk_aligned>
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d037      	beq.n	8008af2 <_malloc_r+0xe6>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	442b      	add	r3, r5
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	f8d8 3000 	ldr.w	r3, [r8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d038      	beq.n	8008b02 <_malloc_r+0xf6>
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	42a2      	cmp	r2, r4
 8008a94:	d12b      	bne.n	8008aee <_malloc_r+0xe2>
 8008a96:	2200      	movs	r2, #0
 8008a98:	605a      	str	r2, [r3, #4]
 8008a9a:	e00f      	b.n	8008abc <_malloc_r+0xb0>
 8008a9c:	6822      	ldr	r2, [r4, #0]
 8008a9e:	1b52      	subs	r2, r2, r5
 8008aa0:	d41f      	bmi.n	8008ae2 <_malloc_r+0xd6>
 8008aa2:	2a0b      	cmp	r2, #11
 8008aa4:	d917      	bls.n	8008ad6 <_malloc_r+0xca>
 8008aa6:	1961      	adds	r1, r4, r5
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	6025      	str	r5, [r4, #0]
 8008aac:	bf18      	it	ne
 8008aae:	6059      	strne	r1, [r3, #4]
 8008ab0:	6863      	ldr	r3, [r4, #4]
 8008ab2:	bf08      	it	eq
 8008ab4:	f8c8 1000 	streq.w	r1, [r8]
 8008ab8:	5162      	str	r2, [r4, r5]
 8008aba:	604b      	str	r3, [r1, #4]
 8008abc:	4638      	mov	r0, r7
 8008abe:	f104 060b 	add.w	r6, r4, #11
 8008ac2:	f000 f829 	bl	8008b18 <__malloc_unlock>
 8008ac6:	f026 0607 	bic.w	r6, r6, #7
 8008aca:	1d23      	adds	r3, r4, #4
 8008acc:	1af2      	subs	r2, r6, r3
 8008ace:	d0ae      	beq.n	8008a2e <_malloc_r+0x22>
 8008ad0:	1b9b      	subs	r3, r3, r6
 8008ad2:	50a3      	str	r3, [r4, r2]
 8008ad4:	e7ab      	b.n	8008a2e <_malloc_r+0x22>
 8008ad6:	42a3      	cmp	r3, r4
 8008ad8:	6862      	ldr	r2, [r4, #4]
 8008ada:	d1dd      	bne.n	8008a98 <_malloc_r+0x8c>
 8008adc:	f8c8 2000 	str.w	r2, [r8]
 8008ae0:	e7ec      	b.n	8008abc <_malloc_r+0xb0>
 8008ae2:	4623      	mov	r3, r4
 8008ae4:	6864      	ldr	r4, [r4, #4]
 8008ae6:	e7ac      	b.n	8008a42 <_malloc_r+0x36>
 8008ae8:	4634      	mov	r4, r6
 8008aea:	6876      	ldr	r6, [r6, #4]
 8008aec:	e7b4      	b.n	8008a58 <_malloc_r+0x4c>
 8008aee:	4613      	mov	r3, r2
 8008af0:	e7cc      	b.n	8008a8c <_malloc_r+0x80>
 8008af2:	230c      	movs	r3, #12
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	4638      	mov	r0, r7
 8008af8:	f000 f80e 	bl	8008b18 <__malloc_unlock>
 8008afc:	e797      	b.n	8008a2e <_malloc_r+0x22>
 8008afe:	6025      	str	r5, [r4, #0]
 8008b00:	e7dc      	b.n	8008abc <_malloc_r+0xb0>
 8008b02:	605b      	str	r3, [r3, #4]
 8008b04:	deff      	udf	#255	; 0xff
 8008b06:	bf00      	nop
 8008b08:	20000558 	.word	0x20000558

08008b0c <__malloc_lock>:
 8008b0c:	4801      	ldr	r0, [pc, #4]	; (8008b14 <__malloc_lock+0x8>)
 8008b0e:	f7ff b88a 	b.w	8007c26 <__retarget_lock_acquire_recursive>
 8008b12:	bf00      	nop
 8008b14:	20000554 	.word	0x20000554

08008b18 <__malloc_unlock>:
 8008b18:	4801      	ldr	r0, [pc, #4]	; (8008b20 <__malloc_unlock+0x8>)
 8008b1a:	f7ff b885 	b.w	8007c28 <__retarget_lock_release_recursive>
 8008b1e:	bf00      	nop
 8008b20:	20000554 	.word	0x20000554

08008b24 <_Balloc>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	69c6      	ldr	r6, [r0, #28]
 8008b28:	4604      	mov	r4, r0
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	b976      	cbnz	r6, 8008b4c <_Balloc+0x28>
 8008b2e:	2010      	movs	r0, #16
 8008b30:	f7ff ff44 	bl	80089bc <malloc>
 8008b34:	4602      	mov	r2, r0
 8008b36:	61e0      	str	r0, [r4, #28]
 8008b38:	b920      	cbnz	r0, 8008b44 <_Balloc+0x20>
 8008b3a:	4b18      	ldr	r3, [pc, #96]	; (8008b9c <_Balloc+0x78>)
 8008b3c:	4818      	ldr	r0, [pc, #96]	; (8008ba0 <_Balloc+0x7c>)
 8008b3e:	216b      	movs	r1, #107	; 0x6b
 8008b40:	f000 fdaa 	bl	8009698 <__assert_func>
 8008b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b48:	6006      	str	r6, [r0, #0]
 8008b4a:	60c6      	str	r6, [r0, #12]
 8008b4c:	69e6      	ldr	r6, [r4, #28]
 8008b4e:	68f3      	ldr	r3, [r6, #12]
 8008b50:	b183      	cbz	r3, 8008b74 <_Balloc+0x50>
 8008b52:	69e3      	ldr	r3, [r4, #28]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b5a:	b9b8      	cbnz	r0, 8008b8c <_Balloc+0x68>
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b62:	1d72      	adds	r2, r6, #5
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 fdb4 	bl	80096d4 <_calloc_r>
 8008b6c:	b160      	cbz	r0, 8008b88 <_Balloc+0x64>
 8008b6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b72:	e00e      	b.n	8008b92 <_Balloc+0x6e>
 8008b74:	2221      	movs	r2, #33	; 0x21
 8008b76:	2104      	movs	r1, #4
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 fdab 	bl	80096d4 <_calloc_r>
 8008b7e:	69e3      	ldr	r3, [r4, #28]
 8008b80:	60f0      	str	r0, [r6, #12]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e4      	bne.n	8008b52 <_Balloc+0x2e>
 8008b88:	2000      	movs	r0, #0
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}
 8008b8c:	6802      	ldr	r2, [r0, #0]
 8008b8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b92:	2300      	movs	r3, #0
 8008b94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b98:	e7f7      	b.n	8008b8a <_Balloc+0x66>
 8008b9a:	bf00      	nop
 8008b9c:	08009df9 	.word	0x08009df9
 8008ba0:	08009e79 	.word	0x08009e79

08008ba4 <_Bfree>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	69c6      	ldr	r6, [r0, #28]
 8008ba8:	4605      	mov	r5, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	b976      	cbnz	r6, 8008bcc <_Bfree+0x28>
 8008bae:	2010      	movs	r0, #16
 8008bb0:	f7ff ff04 	bl	80089bc <malloc>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	61e8      	str	r0, [r5, #28]
 8008bb8:	b920      	cbnz	r0, 8008bc4 <_Bfree+0x20>
 8008bba:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <_Bfree+0x3c>)
 8008bbc:	4809      	ldr	r0, [pc, #36]	; (8008be4 <_Bfree+0x40>)
 8008bbe:	218f      	movs	r1, #143	; 0x8f
 8008bc0:	f000 fd6a 	bl	8009698 <__assert_func>
 8008bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bc8:	6006      	str	r6, [r0, #0]
 8008bca:	60c6      	str	r6, [r0, #12]
 8008bcc:	b13c      	cbz	r4, 8008bde <_Bfree+0x3a>
 8008bce:	69eb      	ldr	r3, [r5, #28]
 8008bd0:	6862      	ldr	r2, [r4, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bd8:	6021      	str	r1, [r4, #0]
 8008bda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	08009df9 	.word	0x08009df9
 8008be4:	08009e79 	.word	0x08009e79

08008be8 <__multadd>:
 8008be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bec:	690d      	ldr	r5, [r1, #16]
 8008bee:	4607      	mov	r7, r0
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	461e      	mov	r6, r3
 8008bf4:	f101 0c14 	add.w	ip, r1, #20
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	f8dc 3000 	ldr.w	r3, [ip]
 8008bfe:	b299      	uxth	r1, r3
 8008c00:	fb02 6101 	mla	r1, r2, r1, r6
 8008c04:	0c1e      	lsrs	r6, r3, #16
 8008c06:	0c0b      	lsrs	r3, r1, #16
 8008c08:	fb02 3306 	mla	r3, r2, r6, r3
 8008c0c:	b289      	uxth	r1, r1
 8008c0e:	3001      	adds	r0, #1
 8008c10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c14:	4285      	cmp	r5, r0
 8008c16:	f84c 1b04 	str.w	r1, [ip], #4
 8008c1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c1e:	dcec      	bgt.n	8008bfa <__multadd+0x12>
 8008c20:	b30e      	cbz	r6, 8008c66 <__multadd+0x7e>
 8008c22:	68a3      	ldr	r3, [r4, #8]
 8008c24:	42ab      	cmp	r3, r5
 8008c26:	dc19      	bgt.n	8008c5c <__multadd+0x74>
 8008c28:	6861      	ldr	r1, [r4, #4]
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	3101      	adds	r1, #1
 8008c2e:	f7ff ff79 	bl	8008b24 <_Balloc>
 8008c32:	4680      	mov	r8, r0
 8008c34:	b928      	cbnz	r0, 8008c42 <__multadd+0x5a>
 8008c36:	4602      	mov	r2, r0
 8008c38:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <__multadd+0x84>)
 8008c3a:	480d      	ldr	r0, [pc, #52]	; (8008c70 <__multadd+0x88>)
 8008c3c:	21ba      	movs	r1, #186	; 0xba
 8008c3e:	f000 fd2b 	bl	8009698 <__assert_func>
 8008c42:	6922      	ldr	r2, [r4, #16]
 8008c44:	3202      	adds	r2, #2
 8008c46:	f104 010c 	add.w	r1, r4, #12
 8008c4a:	0092      	lsls	r2, r2, #2
 8008c4c:	300c      	adds	r0, #12
 8008c4e:	f000 fd15 	bl	800967c <memcpy>
 8008c52:	4621      	mov	r1, r4
 8008c54:	4638      	mov	r0, r7
 8008c56:	f7ff ffa5 	bl	8008ba4 <_Bfree>
 8008c5a:	4644      	mov	r4, r8
 8008c5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c60:	3501      	adds	r5, #1
 8008c62:	615e      	str	r6, [r3, #20]
 8008c64:	6125      	str	r5, [r4, #16]
 8008c66:	4620      	mov	r0, r4
 8008c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c6c:	08009e68 	.word	0x08009e68
 8008c70:	08009e79 	.word	0x08009e79

08008c74 <__hi0bits>:
 8008c74:	0c03      	lsrs	r3, r0, #16
 8008c76:	041b      	lsls	r3, r3, #16
 8008c78:	b9d3      	cbnz	r3, 8008cb0 <__hi0bits+0x3c>
 8008c7a:	0400      	lsls	r0, r0, #16
 8008c7c:	2310      	movs	r3, #16
 8008c7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c82:	bf04      	itt	eq
 8008c84:	0200      	lsleq	r0, r0, #8
 8008c86:	3308      	addeq	r3, #8
 8008c88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c8c:	bf04      	itt	eq
 8008c8e:	0100      	lsleq	r0, r0, #4
 8008c90:	3304      	addeq	r3, #4
 8008c92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c96:	bf04      	itt	eq
 8008c98:	0080      	lsleq	r0, r0, #2
 8008c9a:	3302      	addeq	r3, #2
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	db05      	blt.n	8008cac <__hi0bits+0x38>
 8008ca0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ca4:	f103 0301 	add.w	r3, r3, #1
 8008ca8:	bf08      	it	eq
 8008caa:	2320      	moveq	r3, #32
 8008cac:	4618      	mov	r0, r3
 8008cae:	4770      	bx	lr
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e7e4      	b.n	8008c7e <__hi0bits+0xa>

08008cb4 <__lo0bits>:
 8008cb4:	6803      	ldr	r3, [r0, #0]
 8008cb6:	f013 0207 	ands.w	r2, r3, #7
 8008cba:	d00c      	beq.n	8008cd6 <__lo0bits+0x22>
 8008cbc:	07d9      	lsls	r1, r3, #31
 8008cbe:	d422      	bmi.n	8008d06 <__lo0bits+0x52>
 8008cc0:	079a      	lsls	r2, r3, #30
 8008cc2:	bf49      	itett	mi
 8008cc4:	085b      	lsrmi	r3, r3, #1
 8008cc6:	089b      	lsrpl	r3, r3, #2
 8008cc8:	6003      	strmi	r3, [r0, #0]
 8008cca:	2201      	movmi	r2, #1
 8008ccc:	bf5c      	itt	pl
 8008cce:	6003      	strpl	r3, [r0, #0]
 8008cd0:	2202      	movpl	r2, #2
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4770      	bx	lr
 8008cd6:	b299      	uxth	r1, r3
 8008cd8:	b909      	cbnz	r1, 8008cde <__lo0bits+0x2a>
 8008cda:	0c1b      	lsrs	r3, r3, #16
 8008cdc:	2210      	movs	r2, #16
 8008cde:	b2d9      	uxtb	r1, r3
 8008ce0:	b909      	cbnz	r1, 8008ce6 <__lo0bits+0x32>
 8008ce2:	3208      	adds	r2, #8
 8008ce4:	0a1b      	lsrs	r3, r3, #8
 8008ce6:	0719      	lsls	r1, r3, #28
 8008ce8:	bf04      	itt	eq
 8008cea:	091b      	lsreq	r3, r3, #4
 8008cec:	3204      	addeq	r2, #4
 8008cee:	0799      	lsls	r1, r3, #30
 8008cf0:	bf04      	itt	eq
 8008cf2:	089b      	lsreq	r3, r3, #2
 8008cf4:	3202      	addeq	r2, #2
 8008cf6:	07d9      	lsls	r1, r3, #31
 8008cf8:	d403      	bmi.n	8008d02 <__lo0bits+0x4e>
 8008cfa:	085b      	lsrs	r3, r3, #1
 8008cfc:	f102 0201 	add.w	r2, r2, #1
 8008d00:	d003      	beq.n	8008d0a <__lo0bits+0x56>
 8008d02:	6003      	str	r3, [r0, #0]
 8008d04:	e7e5      	b.n	8008cd2 <__lo0bits+0x1e>
 8008d06:	2200      	movs	r2, #0
 8008d08:	e7e3      	b.n	8008cd2 <__lo0bits+0x1e>
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	e7e1      	b.n	8008cd2 <__lo0bits+0x1e>
	...

08008d10 <__i2b>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	460c      	mov	r4, r1
 8008d14:	2101      	movs	r1, #1
 8008d16:	f7ff ff05 	bl	8008b24 <_Balloc>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	b928      	cbnz	r0, 8008d2a <__i2b+0x1a>
 8008d1e:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <__i2b+0x24>)
 8008d20:	4805      	ldr	r0, [pc, #20]	; (8008d38 <__i2b+0x28>)
 8008d22:	f240 1145 	movw	r1, #325	; 0x145
 8008d26:	f000 fcb7 	bl	8009698 <__assert_func>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	6144      	str	r4, [r0, #20]
 8008d2e:	6103      	str	r3, [r0, #16]
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	bf00      	nop
 8008d34:	08009e68 	.word	0x08009e68
 8008d38:	08009e79 	.word	0x08009e79

08008d3c <__multiply>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	4691      	mov	r9, r2
 8008d42:	690a      	ldr	r2, [r1, #16]
 8008d44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	bfb8      	it	lt
 8008d4c:	460b      	movlt	r3, r1
 8008d4e:	460c      	mov	r4, r1
 8008d50:	bfbc      	itt	lt
 8008d52:	464c      	movlt	r4, r9
 8008d54:	4699      	movlt	r9, r3
 8008d56:	6927      	ldr	r7, [r4, #16]
 8008d58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d5c:	68a3      	ldr	r3, [r4, #8]
 8008d5e:	6861      	ldr	r1, [r4, #4]
 8008d60:	eb07 060a 	add.w	r6, r7, sl
 8008d64:	42b3      	cmp	r3, r6
 8008d66:	b085      	sub	sp, #20
 8008d68:	bfb8      	it	lt
 8008d6a:	3101      	addlt	r1, #1
 8008d6c:	f7ff feda 	bl	8008b24 <_Balloc>
 8008d70:	b930      	cbnz	r0, 8008d80 <__multiply+0x44>
 8008d72:	4602      	mov	r2, r0
 8008d74:	4b44      	ldr	r3, [pc, #272]	; (8008e88 <__multiply+0x14c>)
 8008d76:	4845      	ldr	r0, [pc, #276]	; (8008e8c <__multiply+0x150>)
 8008d78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008d7c:	f000 fc8c 	bl	8009698 <__assert_func>
 8008d80:	f100 0514 	add.w	r5, r0, #20
 8008d84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d88:	462b      	mov	r3, r5
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	4543      	cmp	r3, r8
 8008d8e:	d321      	bcc.n	8008dd4 <__multiply+0x98>
 8008d90:	f104 0314 	add.w	r3, r4, #20
 8008d94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d98:	f109 0314 	add.w	r3, r9, #20
 8008d9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008da0:	9202      	str	r2, [sp, #8]
 8008da2:	1b3a      	subs	r2, r7, r4
 8008da4:	3a15      	subs	r2, #21
 8008da6:	f022 0203 	bic.w	r2, r2, #3
 8008daa:	3204      	adds	r2, #4
 8008dac:	f104 0115 	add.w	r1, r4, #21
 8008db0:	428f      	cmp	r7, r1
 8008db2:	bf38      	it	cc
 8008db4:	2204      	movcc	r2, #4
 8008db6:	9201      	str	r2, [sp, #4]
 8008db8:	9a02      	ldr	r2, [sp, #8]
 8008dba:	9303      	str	r3, [sp, #12]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d80c      	bhi.n	8008dda <__multiply+0x9e>
 8008dc0:	2e00      	cmp	r6, #0
 8008dc2:	dd03      	ble.n	8008dcc <__multiply+0x90>
 8008dc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d05b      	beq.n	8008e84 <__multiply+0x148>
 8008dcc:	6106      	str	r6, [r0, #16]
 8008dce:	b005      	add	sp, #20
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd4:	f843 2b04 	str.w	r2, [r3], #4
 8008dd8:	e7d8      	b.n	8008d8c <__multiply+0x50>
 8008dda:	f8b3 a000 	ldrh.w	sl, [r3]
 8008dde:	f1ba 0f00 	cmp.w	sl, #0
 8008de2:	d024      	beq.n	8008e2e <__multiply+0xf2>
 8008de4:	f104 0e14 	add.w	lr, r4, #20
 8008de8:	46a9      	mov	r9, r5
 8008dea:	f04f 0c00 	mov.w	ip, #0
 8008dee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008df2:	f8d9 1000 	ldr.w	r1, [r9]
 8008df6:	fa1f fb82 	uxth.w	fp, r2
 8008dfa:	b289      	uxth	r1, r1
 8008dfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e04:	f8d9 2000 	ldr.w	r2, [r9]
 8008e08:	4461      	add	r1, ip
 8008e0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008e12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e16:	b289      	uxth	r1, r1
 8008e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e1c:	4577      	cmp	r7, lr
 8008e1e:	f849 1b04 	str.w	r1, [r9], #4
 8008e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e26:	d8e2      	bhi.n	8008dee <__multiply+0xb2>
 8008e28:	9a01      	ldr	r2, [sp, #4]
 8008e2a:	f845 c002 	str.w	ip, [r5, r2]
 8008e2e:	9a03      	ldr	r2, [sp, #12]
 8008e30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e34:	3304      	adds	r3, #4
 8008e36:	f1b9 0f00 	cmp.w	r9, #0
 8008e3a:	d021      	beq.n	8008e80 <__multiply+0x144>
 8008e3c:	6829      	ldr	r1, [r5, #0]
 8008e3e:	f104 0c14 	add.w	ip, r4, #20
 8008e42:	46ae      	mov	lr, r5
 8008e44:	f04f 0a00 	mov.w	sl, #0
 8008e48:	f8bc b000 	ldrh.w	fp, [ip]
 8008e4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e50:	fb09 220b 	mla	r2, r9, fp, r2
 8008e54:	4452      	add	r2, sl
 8008e56:	b289      	uxth	r1, r1
 8008e58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e5c:	f84e 1b04 	str.w	r1, [lr], #4
 8008e60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e68:	f8be 1000 	ldrh.w	r1, [lr]
 8008e6c:	fb09 110a 	mla	r1, r9, sl, r1
 8008e70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008e74:	4567      	cmp	r7, ip
 8008e76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e7a:	d8e5      	bhi.n	8008e48 <__multiply+0x10c>
 8008e7c:	9a01      	ldr	r2, [sp, #4]
 8008e7e:	50a9      	str	r1, [r5, r2]
 8008e80:	3504      	adds	r5, #4
 8008e82:	e799      	b.n	8008db8 <__multiply+0x7c>
 8008e84:	3e01      	subs	r6, #1
 8008e86:	e79b      	b.n	8008dc0 <__multiply+0x84>
 8008e88:	08009e68 	.word	0x08009e68
 8008e8c:	08009e79 	.word	0x08009e79

08008e90 <__pow5mult>:
 8008e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e94:	4615      	mov	r5, r2
 8008e96:	f012 0203 	ands.w	r2, r2, #3
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	460f      	mov	r7, r1
 8008e9e:	d007      	beq.n	8008eb0 <__pow5mult+0x20>
 8008ea0:	4c25      	ldr	r4, [pc, #148]	; (8008f38 <__pow5mult+0xa8>)
 8008ea2:	3a01      	subs	r2, #1
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008eaa:	f7ff fe9d 	bl	8008be8 <__multadd>
 8008eae:	4607      	mov	r7, r0
 8008eb0:	10ad      	asrs	r5, r5, #2
 8008eb2:	d03d      	beq.n	8008f30 <__pow5mult+0xa0>
 8008eb4:	69f4      	ldr	r4, [r6, #28]
 8008eb6:	b97c      	cbnz	r4, 8008ed8 <__pow5mult+0x48>
 8008eb8:	2010      	movs	r0, #16
 8008eba:	f7ff fd7f 	bl	80089bc <malloc>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	61f0      	str	r0, [r6, #28]
 8008ec2:	b928      	cbnz	r0, 8008ed0 <__pow5mult+0x40>
 8008ec4:	4b1d      	ldr	r3, [pc, #116]	; (8008f3c <__pow5mult+0xac>)
 8008ec6:	481e      	ldr	r0, [pc, #120]	; (8008f40 <__pow5mult+0xb0>)
 8008ec8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008ecc:	f000 fbe4 	bl	8009698 <__assert_func>
 8008ed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ed4:	6004      	str	r4, [r0, #0]
 8008ed6:	60c4      	str	r4, [r0, #12]
 8008ed8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008edc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ee0:	b94c      	cbnz	r4, 8008ef6 <__pow5mult+0x66>
 8008ee2:	f240 2171 	movw	r1, #625	; 0x271
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff ff12 	bl	8008d10 <__i2b>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	f04f 0900 	mov.w	r9, #0
 8008efa:	07eb      	lsls	r3, r5, #31
 8008efc:	d50a      	bpl.n	8008f14 <__pow5mult+0x84>
 8008efe:	4639      	mov	r1, r7
 8008f00:	4622      	mov	r2, r4
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7ff ff1a 	bl	8008d3c <__multiply>
 8008f08:	4639      	mov	r1, r7
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff fe49 	bl	8008ba4 <_Bfree>
 8008f12:	4647      	mov	r7, r8
 8008f14:	106d      	asrs	r5, r5, #1
 8008f16:	d00b      	beq.n	8008f30 <__pow5mult+0xa0>
 8008f18:	6820      	ldr	r0, [r4, #0]
 8008f1a:	b938      	cbnz	r0, 8008f2c <__pow5mult+0x9c>
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7ff ff0b 	bl	8008d3c <__multiply>
 8008f26:	6020      	str	r0, [r4, #0]
 8008f28:	f8c0 9000 	str.w	r9, [r0]
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	e7e4      	b.n	8008efa <__pow5mult+0x6a>
 8008f30:	4638      	mov	r0, r7
 8008f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f36:	bf00      	nop
 8008f38:	08009fc8 	.word	0x08009fc8
 8008f3c:	08009df9 	.word	0x08009df9
 8008f40:	08009e79 	.word	0x08009e79

08008f44 <__lshift>:
 8008f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f48:	460c      	mov	r4, r1
 8008f4a:	6849      	ldr	r1, [r1, #4]
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f52:	68a3      	ldr	r3, [r4, #8]
 8008f54:	4607      	mov	r7, r0
 8008f56:	4691      	mov	r9, r2
 8008f58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f5c:	f108 0601 	add.w	r6, r8, #1
 8008f60:	42b3      	cmp	r3, r6
 8008f62:	db0b      	blt.n	8008f7c <__lshift+0x38>
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff fddd 	bl	8008b24 <_Balloc>
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	b948      	cbnz	r0, 8008f82 <__lshift+0x3e>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4b28      	ldr	r3, [pc, #160]	; (8009014 <__lshift+0xd0>)
 8008f72:	4829      	ldr	r0, [pc, #164]	; (8009018 <__lshift+0xd4>)
 8008f74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008f78:	f000 fb8e 	bl	8009698 <__assert_func>
 8008f7c:	3101      	adds	r1, #1
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	e7ee      	b.n	8008f60 <__lshift+0x1c>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f100 0114 	add.w	r1, r0, #20
 8008f88:	f100 0210 	add.w	r2, r0, #16
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	4553      	cmp	r3, sl
 8008f90:	db33      	blt.n	8008ffa <__lshift+0xb6>
 8008f92:	6920      	ldr	r0, [r4, #16]
 8008f94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f98:	f104 0314 	add.w	r3, r4, #20
 8008f9c:	f019 091f 	ands.w	r9, r9, #31
 8008fa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fa8:	d02b      	beq.n	8009002 <__lshift+0xbe>
 8008faa:	f1c9 0e20 	rsb	lr, r9, #32
 8008fae:	468a      	mov	sl, r1
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	fa00 f009 	lsl.w	r0, r0, r9
 8008fb8:	4310      	orrs	r0, r2
 8008fba:	f84a 0b04 	str.w	r0, [sl], #4
 8008fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc2:	459c      	cmp	ip, r3
 8008fc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008fc8:	d8f3      	bhi.n	8008fb2 <__lshift+0x6e>
 8008fca:	ebac 0304 	sub.w	r3, ip, r4
 8008fce:	3b15      	subs	r3, #21
 8008fd0:	f023 0303 	bic.w	r3, r3, #3
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	f104 0015 	add.w	r0, r4, #21
 8008fda:	4584      	cmp	ip, r0
 8008fdc:	bf38      	it	cc
 8008fde:	2304      	movcc	r3, #4
 8008fe0:	50ca      	str	r2, [r1, r3]
 8008fe2:	b10a      	cbz	r2, 8008fe8 <__lshift+0xa4>
 8008fe4:	f108 0602 	add.w	r6, r8, #2
 8008fe8:	3e01      	subs	r6, #1
 8008fea:	4638      	mov	r0, r7
 8008fec:	612e      	str	r6, [r5, #16]
 8008fee:	4621      	mov	r1, r4
 8008ff0:	f7ff fdd8 	bl	8008ba4 <_Bfree>
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ffe:	3301      	adds	r3, #1
 8009000:	e7c5      	b.n	8008f8e <__lshift+0x4a>
 8009002:	3904      	subs	r1, #4
 8009004:	f853 2b04 	ldr.w	r2, [r3], #4
 8009008:	f841 2f04 	str.w	r2, [r1, #4]!
 800900c:	459c      	cmp	ip, r3
 800900e:	d8f9      	bhi.n	8009004 <__lshift+0xc0>
 8009010:	e7ea      	b.n	8008fe8 <__lshift+0xa4>
 8009012:	bf00      	nop
 8009014:	08009e68 	.word	0x08009e68
 8009018:	08009e79 	.word	0x08009e79

0800901c <__mcmp>:
 800901c:	b530      	push	{r4, r5, lr}
 800901e:	6902      	ldr	r2, [r0, #16]
 8009020:	690c      	ldr	r4, [r1, #16]
 8009022:	1b12      	subs	r2, r2, r4
 8009024:	d10e      	bne.n	8009044 <__mcmp+0x28>
 8009026:	f100 0314 	add.w	r3, r0, #20
 800902a:	3114      	adds	r1, #20
 800902c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009030:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009034:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009038:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800903c:	42a5      	cmp	r5, r4
 800903e:	d003      	beq.n	8009048 <__mcmp+0x2c>
 8009040:	d305      	bcc.n	800904e <__mcmp+0x32>
 8009042:	2201      	movs	r2, #1
 8009044:	4610      	mov	r0, r2
 8009046:	bd30      	pop	{r4, r5, pc}
 8009048:	4283      	cmp	r3, r0
 800904a:	d3f3      	bcc.n	8009034 <__mcmp+0x18>
 800904c:	e7fa      	b.n	8009044 <__mcmp+0x28>
 800904e:	f04f 32ff 	mov.w	r2, #4294967295
 8009052:	e7f7      	b.n	8009044 <__mcmp+0x28>

08009054 <__mdiff>:
 8009054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	460c      	mov	r4, r1
 800905a:	4606      	mov	r6, r0
 800905c:	4611      	mov	r1, r2
 800905e:	4620      	mov	r0, r4
 8009060:	4690      	mov	r8, r2
 8009062:	f7ff ffdb 	bl	800901c <__mcmp>
 8009066:	1e05      	subs	r5, r0, #0
 8009068:	d110      	bne.n	800908c <__mdiff+0x38>
 800906a:	4629      	mov	r1, r5
 800906c:	4630      	mov	r0, r6
 800906e:	f7ff fd59 	bl	8008b24 <_Balloc>
 8009072:	b930      	cbnz	r0, 8009082 <__mdiff+0x2e>
 8009074:	4b3a      	ldr	r3, [pc, #232]	; (8009160 <__mdiff+0x10c>)
 8009076:	4602      	mov	r2, r0
 8009078:	f240 2137 	movw	r1, #567	; 0x237
 800907c:	4839      	ldr	r0, [pc, #228]	; (8009164 <__mdiff+0x110>)
 800907e:	f000 fb0b 	bl	8009698 <__assert_func>
 8009082:	2301      	movs	r3, #1
 8009084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908c:	bfa4      	itt	ge
 800908e:	4643      	movge	r3, r8
 8009090:	46a0      	movge	r8, r4
 8009092:	4630      	mov	r0, r6
 8009094:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009098:	bfa6      	itte	ge
 800909a:	461c      	movge	r4, r3
 800909c:	2500      	movge	r5, #0
 800909e:	2501      	movlt	r5, #1
 80090a0:	f7ff fd40 	bl	8008b24 <_Balloc>
 80090a4:	b920      	cbnz	r0, 80090b0 <__mdiff+0x5c>
 80090a6:	4b2e      	ldr	r3, [pc, #184]	; (8009160 <__mdiff+0x10c>)
 80090a8:	4602      	mov	r2, r0
 80090aa:	f240 2145 	movw	r1, #581	; 0x245
 80090ae:	e7e5      	b.n	800907c <__mdiff+0x28>
 80090b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090b4:	6926      	ldr	r6, [r4, #16]
 80090b6:	60c5      	str	r5, [r0, #12]
 80090b8:	f104 0914 	add.w	r9, r4, #20
 80090bc:	f108 0514 	add.w	r5, r8, #20
 80090c0:	f100 0e14 	add.w	lr, r0, #20
 80090c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80090c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80090cc:	f108 0210 	add.w	r2, r8, #16
 80090d0:	46f2      	mov	sl, lr
 80090d2:	2100      	movs	r1, #0
 80090d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80090d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80090dc:	fa11 f88b 	uxtah	r8, r1, fp
 80090e0:	b299      	uxth	r1, r3
 80090e2:	0c1b      	lsrs	r3, r3, #16
 80090e4:	eba8 0801 	sub.w	r8, r8, r1
 80090e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090f0:	fa1f f888 	uxth.w	r8, r8
 80090f4:	1419      	asrs	r1, r3, #16
 80090f6:	454e      	cmp	r6, r9
 80090f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090fc:	f84a 3b04 	str.w	r3, [sl], #4
 8009100:	d8e8      	bhi.n	80090d4 <__mdiff+0x80>
 8009102:	1b33      	subs	r3, r6, r4
 8009104:	3b15      	subs	r3, #21
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	3304      	adds	r3, #4
 800910c:	3415      	adds	r4, #21
 800910e:	42a6      	cmp	r6, r4
 8009110:	bf38      	it	cc
 8009112:	2304      	movcc	r3, #4
 8009114:	441d      	add	r5, r3
 8009116:	4473      	add	r3, lr
 8009118:	469e      	mov	lr, r3
 800911a:	462e      	mov	r6, r5
 800911c:	4566      	cmp	r6, ip
 800911e:	d30e      	bcc.n	800913e <__mdiff+0xea>
 8009120:	f10c 0203 	add.w	r2, ip, #3
 8009124:	1b52      	subs	r2, r2, r5
 8009126:	f022 0203 	bic.w	r2, r2, #3
 800912a:	3d03      	subs	r5, #3
 800912c:	45ac      	cmp	ip, r5
 800912e:	bf38      	it	cc
 8009130:	2200      	movcc	r2, #0
 8009132:	4413      	add	r3, r2
 8009134:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009138:	b17a      	cbz	r2, 800915a <__mdiff+0x106>
 800913a:	6107      	str	r7, [r0, #16]
 800913c:	e7a4      	b.n	8009088 <__mdiff+0x34>
 800913e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009142:	fa11 f288 	uxtah	r2, r1, r8
 8009146:	1414      	asrs	r4, r2, #16
 8009148:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800914c:	b292      	uxth	r2, r2
 800914e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009152:	f84e 2b04 	str.w	r2, [lr], #4
 8009156:	1421      	asrs	r1, r4, #16
 8009158:	e7e0      	b.n	800911c <__mdiff+0xc8>
 800915a:	3f01      	subs	r7, #1
 800915c:	e7ea      	b.n	8009134 <__mdiff+0xe0>
 800915e:	bf00      	nop
 8009160:	08009e68 	.word	0x08009e68
 8009164:	08009e79 	.word	0x08009e79

08009168 <__d2b>:
 8009168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800916c:	460f      	mov	r7, r1
 800916e:	2101      	movs	r1, #1
 8009170:	ec59 8b10 	vmov	r8, r9, d0
 8009174:	4616      	mov	r6, r2
 8009176:	f7ff fcd5 	bl	8008b24 <_Balloc>
 800917a:	4604      	mov	r4, r0
 800917c:	b930      	cbnz	r0, 800918c <__d2b+0x24>
 800917e:	4602      	mov	r2, r0
 8009180:	4b24      	ldr	r3, [pc, #144]	; (8009214 <__d2b+0xac>)
 8009182:	4825      	ldr	r0, [pc, #148]	; (8009218 <__d2b+0xb0>)
 8009184:	f240 310f 	movw	r1, #783	; 0x30f
 8009188:	f000 fa86 	bl	8009698 <__assert_func>
 800918c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009194:	bb2d      	cbnz	r5, 80091e2 <__d2b+0x7a>
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	f1b8 0300 	subs.w	r3, r8, #0
 800919c:	d026      	beq.n	80091ec <__d2b+0x84>
 800919e:	4668      	mov	r0, sp
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	f7ff fd87 	bl	8008cb4 <__lo0bits>
 80091a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091aa:	b1e8      	cbz	r0, 80091e8 <__d2b+0x80>
 80091ac:	f1c0 0320 	rsb	r3, r0, #32
 80091b0:	fa02 f303 	lsl.w	r3, r2, r3
 80091b4:	430b      	orrs	r3, r1
 80091b6:	40c2      	lsrs	r2, r0
 80091b8:	6163      	str	r3, [r4, #20]
 80091ba:	9201      	str	r2, [sp, #4]
 80091bc:	9b01      	ldr	r3, [sp, #4]
 80091be:	61a3      	str	r3, [r4, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bf14      	ite	ne
 80091c4:	2202      	movne	r2, #2
 80091c6:	2201      	moveq	r2, #1
 80091c8:	6122      	str	r2, [r4, #16]
 80091ca:	b1bd      	cbz	r5, 80091fc <__d2b+0x94>
 80091cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091d0:	4405      	add	r5, r0
 80091d2:	603d      	str	r5, [r7, #0]
 80091d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091d8:	6030      	str	r0, [r6, #0]
 80091da:	4620      	mov	r0, r4
 80091dc:	b003      	add	sp, #12
 80091de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091e6:	e7d6      	b.n	8009196 <__d2b+0x2e>
 80091e8:	6161      	str	r1, [r4, #20]
 80091ea:	e7e7      	b.n	80091bc <__d2b+0x54>
 80091ec:	a801      	add	r0, sp, #4
 80091ee:	f7ff fd61 	bl	8008cb4 <__lo0bits>
 80091f2:	9b01      	ldr	r3, [sp, #4]
 80091f4:	6163      	str	r3, [r4, #20]
 80091f6:	3020      	adds	r0, #32
 80091f8:	2201      	movs	r2, #1
 80091fa:	e7e5      	b.n	80091c8 <__d2b+0x60>
 80091fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009200:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009204:	6038      	str	r0, [r7, #0]
 8009206:	6918      	ldr	r0, [r3, #16]
 8009208:	f7ff fd34 	bl	8008c74 <__hi0bits>
 800920c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009210:	e7e2      	b.n	80091d8 <__d2b+0x70>
 8009212:	bf00      	nop
 8009214:	08009e68 	.word	0x08009e68
 8009218:	08009e79 	.word	0x08009e79

0800921c <__ssputs_r>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	688e      	ldr	r6, [r1, #8]
 8009222:	461f      	mov	r7, r3
 8009224:	42be      	cmp	r6, r7
 8009226:	680b      	ldr	r3, [r1, #0]
 8009228:	4682      	mov	sl, r0
 800922a:	460c      	mov	r4, r1
 800922c:	4690      	mov	r8, r2
 800922e:	d82c      	bhi.n	800928a <__ssputs_r+0x6e>
 8009230:	898a      	ldrh	r2, [r1, #12]
 8009232:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009236:	d026      	beq.n	8009286 <__ssputs_r+0x6a>
 8009238:	6965      	ldr	r5, [r4, #20]
 800923a:	6909      	ldr	r1, [r1, #16]
 800923c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009240:	eba3 0901 	sub.w	r9, r3, r1
 8009244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009248:	1c7b      	adds	r3, r7, #1
 800924a:	444b      	add	r3, r9
 800924c:	106d      	asrs	r5, r5, #1
 800924e:	429d      	cmp	r5, r3
 8009250:	bf38      	it	cc
 8009252:	461d      	movcc	r5, r3
 8009254:	0553      	lsls	r3, r2, #21
 8009256:	d527      	bpl.n	80092a8 <__ssputs_r+0x8c>
 8009258:	4629      	mov	r1, r5
 800925a:	f7ff fbd7 	bl	8008a0c <_malloc_r>
 800925e:	4606      	mov	r6, r0
 8009260:	b360      	cbz	r0, 80092bc <__ssputs_r+0xa0>
 8009262:	6921      	ldr	r1, [r4, #16]
 8009264:	464a      	mov	r2, r9
 8009266:	f000 fa09 	bl	800967c <memcpy>
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	6126      	str	r6, [r4, #16]
 8009278:	6165      	str	r5, [r4, #20]
 800927a:	444e      	add	r6, r9
 800927c:	eba5 0509 	sub.w	r5, r5, r9
 8009280:	6026      	str	r6, [r4, #0]
 8009282:	60a5      	str	r5, [r4, #8]
 8009284:	463e      	mov	r6, r7
 8009286:	42be      	cmp	r6, r7
 8009288:	d900      	bls.n	800928c <__ssputs_r+0x70>
 800928a:	463e      	mov	r6, r7
 800928c:	6820      	ldr	r0, [r4, #0]
 800928e:	4632      	mov	r2, r6
 8009290:	4641      	mov	r1, r8
 8009292:	f000 f9c9 	bl	8009628 <memmove>
 8009296:	68a3      	ldr	r3, [r4, #8]
 8009298:	1b9b      	subs	r3, r3, r6
 800929a:	60a3      	str	r3, [r4, #8]
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	4433      	add	r3, r6
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	2000      	movs	r0, #0
 80092a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a8:	462a      	mov	r2, r5
 80092aa:	f000 fa3b 	bl	8009724 <_realloc_r>
 80092ae:	4606      	mov	r6, r0
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d1e0      	bne.n	8009276 <__ssputs_r+0x5a>
 80092b4:	6921      	ldr	r1, [r4, #16]
 80092b6:	4650      	mov	r0, sl
 80092b8:	f7ff fb34 	bl	8008924 <_free_r>
 80092bc:	230c      	movs	r3, #12
 80092be:	f8ca 3000 	str.w	r3, [sl]
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c8:	81a3      	strh	r3, [r4, #12]
 80092ca:	f04f 30ff 	mov.w	r0, #4294967295
 80092ce:	e7e9      	b.n	80092a4 <__ssputs_r+0x88>

080092d0 <_svfiprintf_r>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	4698      	mov	r8, r3
 80092d6:	898b      	ldrh	r3, [r1, #12]
 80092d8:	061b      	lsls	r3, r3, #24
 80092da:	b09d      	sub	sp, #116	; 0x74
 80092dc:	4607      	mov	r7, r0
 80092de:	460d      	mov	r5, r1
 80092e0:	4614      	mov	r4, r2
 80092e2:	d50e      	bpl.n	8009302 <_svfiprintf_r+0x32>
 80092e4:	690b      	ldr	r3, [r1, #16]
 80092e6:	b963      	cbnz	r3, 8009302 <_svfiprintf_r+0x32>
 80092e8:	2140      	movs	r1, #64	; 0x40
 80092ea:	f7ff fb8f 	bl	8008a0c <_malloc_r>
 80092ee:	6028      	str	r0, [r5, #0]
 80092f0:	6128      	str	r0, [r5, #16]
 80092f2:	b920      	cbnz	r0, 80092fe <_svfiprintf_r+0x2e>
 80092f4:	230c      	movs	r3, #12
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	e0d0      	b.n	80094a0 <_svfiprintf_r+0x1d0>
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	616b      	str	r3, [r5, #20]
 8009302:	2300      	movs	r3, #0
 8009304:	9309      	str	r3, [sp, #36]	; 0x24
 8009306:	2320      	movs	r3, #32
 8009308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800930c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009310:	2330      	movs	r3, #48	; 0x30
 8009312:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80094b8 <_svfiprintf_r+0x1e8>
 8009316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800931a:	f04f 0901 	mov.w	r9, #1
 800931e:	4623      	mov	r3, r4
 8009320:	469a      	mov	sl, r3
 8009322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009326:	b10a      	cbz	r2, 800932c <_svfiprintf_r+0x5c>
 8009328:	2a25      	cmp	r2, #37	; 0x25
 800932a:	d1f9      	bne.n	8009320 <_svfiprintf_r+0x50>
 800932c:	ebba 0b04 	subs.w	fp, sl, r4
 8009330:	d00b      	beq.n	800934a <_svfiprintf_r+0x7a>
 8009332:	465b      	mov	r3, fp
 8009334:	4622      	mov	r2, r4
 8009336:	4629      	mov	r1, r5
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ff6f 	bl	800921c <__ssputs_r>
 800933e:	3001      	adds	r0, #1
 8009340:	f000 80a9 	beq.w	8009496 <_svfiprintf_r+0x1c6>
 8009344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009346:	445a      	add	r2, fp
 8009348:	9209      	str	r2, [sp, #36]	; 0x24
 800934a:	f89a 3000 	ldrb.w	r3, [sl]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 80a1 	beq.w	8009496 <_svfiprintf_r+0x1c6>
 8009354:	2300      	movs	r3, #0
 8009356:	f04f 32ff 	mov.w	r2, #4294967295
 800935a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800935e:	f10a 0a01 	add.w	sl, sl, #1
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	9307      	str	r3, [sp, #28]
 8009366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800936a:	931a      	str	r3, [sp, #104]	; 0x68
 800936c:	4654      	mov	r4, sl
 800936e:	2205      	movs	r2, #5
 8009370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009374:	4850      	ldr	r0, [pc, #320]	; (80094b8 <_svfiprintf_r+0x1e8>)
 8009376:	f7f6 ff33 	bl	80001e0 <memchr>
 800937a:	9a04      	ldr	r2, [sp, #16]
 800937c:	b9d8      	cbnz	r0, 80093b6 <_svfiprintf_r+0xe6>
 800937e:	06d0      	lsls	r0, r2, #27
 8009380:	bf44      	itt	mi
 8009382:	2320      	movmi	r3, #32
 8009384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009388:	0711      	lsls	r1, r2, #28
 800938a:	bf44      	itt	mi
 800938c:	232b      	movmi	r3, #43	; 0x2b
 800938e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009392:	f89a 3000 	ldrb.w	r3, [sl]
 8009396:	2b2a      	cmp	r3, #42	; 0x2a
 8009398:	d015      	beq.n	80093c6 <_svfiprintf_r+0xf6>
 800939a:	9a07      	ldr	r2, [sp, #28]
 800939c:	4654      	mov	r4, sl
 800939e:	2000      	movs	r0, #0
 80093a0:	f04f 0c0a 	mov.w	ip, #10
 80093a4:	4621      	mov	r1, r4
 80093a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093aa:	3b30      	subs	r3, #48	; 0x30
 80093ac:	2b09      	cmp	r3, #9
 80093ae:	d94d      	bls.n	800944c <_svfiprintf_r+0x17c>
 80093b0:	b1b0      	cbz	r0, 80093e0 <_svfiprintf_r+0x110>
 80093b2:	9207      	str	r2, [sp, #28]
 80093b4:	e014      	b.n	80093e0 <_svfiprintf_r+0x110>
 80093b6:	eba0 0308 	sub.w	r3, r0, r8
 80093ba:	fa09 f303 	lsl.w	r3, r9, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	46a2      	mov	sl, r4
 80093c4:	e7d2      	b.n	800936c <_svfiprintf_r+0x9c>
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	1d19      	adds	r1, r3, #4
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	9103      	str	r1, [sp, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfbb      	ittet	lt
 80093d2:	425b      	neglt	r3, r3
 80093d4:	f042 0202 	orrlt.w	r2, r2, #2
 80093d8:	9307      	strge	r3, [sp, #28]
 80093da:	9307      	strlt	r3, [sp, #28]
 80093dc:	bfb8      	it	lt
 80093de:	9204      	strlt	r2, [sp, #16]
 80093e0:	7823      	ldrb	r3, [r4, #0]
 80093e2:	2b2e      	cmp	r3, #46	; 0x2e
 80093e4:	d10c      	bne.n	8009400 <_svfiprintf_r+0x130>
 80093e6:	7863      	ldrb	r3, [r4, #1]
 80093e8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ea:	d134      	bne.n	8009456 <_svfiprintf_r+0x186>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	1d1a      	adds	r2, r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	9203      	str	r2, [sp, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bfb8      	it	lt
 80093f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80093fc:	3402      	adds	r4, #2
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80094c8 <_svfiprintf_r+0x1f8>
 8009404:	7821      	ldrb	r1, [r4, #0]
 8009406:	2203      	movs	r2, #3
 8009408:	4650      	mov	r0, sl
 800940a:	f7f6 fee9 	bl	80001e0 <memchr>
 800940e:	b138      	cbz	r0, 8009420 <_svfiprintf_r+0x150>
 8009410:	9b04      	ldr	r3, [sp, #16]
 8009412:	eba0 000a 	sub.w	r0, r0, sl
 8009416:	2240      	movs	r2, #64	; 0x40
 8009418:	4082      	lsls	r2, r0
 800941a:	4313      	orrs	r3, r2
 800941c:	3401      	adds	r4, #1
 800941e:	9304      	str	r3, [sp, #16]
 8009420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009424:	4825      	ldr	r0, [pc, #148]	; (80094bc <_svfiprintf_r+0x1ec>)
 8009426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800942a:	2206      	movs	r2, #6
 800942c:	f7f6 fed8 	bl	80001e0 <memchr>
 8009430:	2800      	cmp	r0, #0
 8009432:	d038      	beq.n	80094a6 <_svfiprintf_r+0x1d6>
 8009434:	4b22      	ldr	r3, [pc, #136]	; (80094c0 <_svfiprintf_r+0x1f0>)
 8009436:	bb1b      	cbnz	r3, 8009480 <_svfiprintf_r+0x1b0>
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	3307      	adds	r3, #7
 800943c:	f023 0307 	bic.w	r3, r3, #7
 8009440:	3308      	adds	r3, #8
 8009442:	9303      	str	r3, [sp, #12]
 8009444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009446:	4433      	add	r3, r6
 8009448:	9309      	str	r3, [sp, #36]	; 0x24
 800944a:	e768      	b.n	800931e <_svfiprintf_r+0x4e>
 800944c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009450:	460c      	mov	r4, r1
 8009452:	2001      	movs	r0, #1
 8009454:	e7a6      	b.n	80093a4 <_svfiprintf_r+0xd4>
 8009456:	2300      	movs	r3, #0
 8009458:	3401      	adds	r4, #1
 800945a:	9305      	str	r3, [sp, #20]
 800945c:	4619      	mov	r1, r3
 800945e:	f04f 0c0a 	mov.w	ip, #10
 8009462:	4620      	mov	r0, r4
 8009464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009468:	3a30      	subs	r2, #48	; 0x30
 800946a:	2a09      	cmp	r2, #9
 800946c:	d903      	bls.n	8009476 <_svfiprintf_r+0x1a6>
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0c6      	beq.n	8009400 <_svfiprintf_r+0x130>
 8009472:	9105      	str	r1, [sp, #20]
 8009474:	e7c4      	b.n	8009400 <_svfiprintf_r+0x130>
 8009476:	fb0c 2101 	mla	r1, ip, r1, r2
 800947a:	4604      	mov	r4, r0
 800947c:	2301      	movs	r3, #1
 800947e:	e7f0      	b.n	8009462 <_svfiprintf_r+0x192>
 8009480:	ab03      	add	r3, sp, #12
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	462a      	mov	r2, r5
 8009486:	4b0f      	ldr	r3, [pc, #60]	; (80094c4 <_svfiprintf_r+0x1f4>)
 8009488:	a904      	add	r1, sp, #16
 800948a:	4638      	mov	r0, r7
 800948c:	f7fd fe4e 	bl	800712c <_printf_float>
 8009490:	1c42      	adds	r2, r0, #1
 8009492:	4606      	mov	r6, r0
 8009494:	d1d6      	bne.n	8009444 <_svfiprintf_r+0x174>
 8009496:	89ab      	ldrh	r3, [r5, #12]
 8009498:	065b      	lsls	r3, r3, #25
 800949a:	f53f af2d 	bmi.w	80092f8 <_svfiprintf_r+0x28>
 800949e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094a0:	b01d      	add	sp, #116	; 0x74
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	462a      	mov	r2, r5
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <_svfiprintf_r+0x1f4>)
 80094ae:	a904      	add	r1, sp, #16
 80094b0:	4638      	mov	r0, r7
 80094b2:	f7fe f8df 	bl	8007674 <_printf_i>
 80094b6:	e7eb      	b.n	8009490 <_svfiprintf_r+0x1c0>
 80094b8:	08009fd4 	.word	0x08009fd4
 80094bc:	08009fde 	.word	0x08009fde
 80094c0:	0800712d 	.word	0x0800712d
 80094c4:	0800921d 	.word	0x0800921d
 80094c8:	08009fda 	.word	0x08009fda

080094cc <__sflush_r>:
 80094cc:	898a      	ldrh	r2, [r1, #12]
 80094ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	4605      	mov	r5, r0
 80094d4:	0710      	lsls	r0, r2, #28
 80094d6:	460c      	mov	r4, r1
 80094d8:	d458      	bmi.n	800958c <__sflush_r+0xc0>
 80094da:	684b      	ldr	r3, [r1, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dc05      	bgt.n	80094ec <__sflush_r+0x20>
 80094e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	dc02      	bgt.n	80094ec <__sflush_r+0x20>
 80094e6:	2000      	movs	r0, #0
 80094e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	d0f9      	beq.n	80094e6 <__sflush_r+0x1a>
 80094f2:	2300      	movs	r3, #0
 80094f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094f8:	682f      	ldr	r7, [r5, #0]
 80094fa:	6a21      	ldr	r1, [r4, #32]
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	d032      	beq.n	8009566 <__sflush_r+0x9a>
 8009500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	075a      	lsls	r2, r3, #29
 8009506:	d505      	bpl.n	8009514 <__sflush_r+0x48>
 8009508:	6863      	ldr	r3, [r4, #4]
 800950a:	1ac0      	subs	r0, r0, r3
 800950c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800950e:	b10b      	cbz	r3, 8009514 <__sflush_r+0x48>
 8009510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009512:	1ac0      	subs	r0, r0, r3
 8009514:	2300      	movs	r3, #0
 8009516:	4602      	mov	r2, r0
 8009518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800951a:	6a21      	ldr	r1, [r4, #32]
 800951c:	4628      	mov	r0, r5
 800951e:	47b0      	blx	r6
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	d106      	bne.n	8009534 <__sflush_r+0x68>
 8009526:	6829      	ldr	r1, [r5, #0]
 8009528:	291d      	cmp	r1, #29
 800952a:	d82b      	bhi.n	8009584 <__sflush_r+0xb8>
 800952c:	4a29      	ldr	r2, [pc, #164]	; (80095d4 <__sflush_r+0x108>)
 800952e:	410a      	asrs	r2, r1
 8009530:	07d6      	lsls	r6, r2, #31
 8009532:	d427      	bmi.n	8009584 <__sflush_r+0xb8>
 8009534:	2200      	movs	r2, #0
 8009536:	6062      	str	r2, [r4, #4]
 8009538:	04d9      	lsls	r1, r3, #19
 800953a:	6922      	ldr	r2, [r4, #16]
 800953c:	6022      	str	r2, [r4, #0]
 800953e:	d504      	bpl.n	800954a <__sflush_r+0x7e>
 8009540:	1c42      	adds	r2, r0, #1
 8009542:	d101      	bne.n	8009548 <__sflush_r+0x7c>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b903      	cbnz	r3, 800954a <__sflush_r+0x7e>
 8009548:	6560      	str	r0, [r4, #84]	; 0x54
 800954a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800954c:	602f      	str	r7, [r5, #0]
 800954e:	2900      	cmp	r1, #0
 8009550:	d0c9      	beq.n	80094e6 <__sflush_r+0x1a>
 8009552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009556:	4299      	cmp	r1, r3
 8009558:	d002      	beq.n	8009560 <__sflush_r+0x94>
 800955a:	4628      	mov	r0, r5
 800955c:	f7ff f9e2 	bl	8008924 <_free_r>
 8009560:	2000      	movs	r0, #0
 8009562:	6360      	str	r0, [r4, #52]	; 0x34
 8009564:	e7c0      	b.n	80094e8 <__sflush_r+0x1c>
 8009566:	2301      	movs	r3, #1
 8009568:	4628      	mov	r0, r5
 800956a:	47b0      	blx	r6
 800956c:	1c41      	adds	r1, r0, #1
 800956e:	d1c8      	bne.n	8009502 <__sflush_r+0x36>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0c5      	beq.n	8009502 <__sflush_r+0x36>
 8009576:	2b1d      	cmp	r3, #29
 8009578:	d001      	beq.n	800957e <__sflush_r+0xb2>
 800957a:	2b16      	cmp	r3, #22
 800957c:	d101      	bne.n	8009582 <__sflush_r+0xb6>
 800957e:	602f      	str	r7, [r5, #0]
 8009580:	e7b1      	b.n	80094e6 <__sflush_r+0x1a>
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	e7ad      	b.n	80094e8 <__sflush_r+0x1c>
 800958c:	690f      	ldr	r7, [r1, #16]
 800958e:	2f00      	cmp	r7, #0
 8009590:	d0a9      	beq.n	80094e6 <__sflush_r+0x1a>
 8009592:	0793      	lsls	r3, r2, #30
 8009594:	680e      	ldr	r6, [r1, #0]
 8009596:	bf08      	it	eq
 8009598:	694b      	ldreq	r3, [r1, #20]
 800959a:	600f      	str	r7, [r1, #0]
 800959c:	bf18      	it	ne
 800959e:	2300      	movne	r3, #0
 80095a0:	eba6 0807 	sub.w	r8, r6, r7
 80095a4:	608b      	str	r3, [r1, #8]
 80095a6:	f1b8 0f00 	cmp.w	r8, #0
 80095aa:	dd9c      	ble.n	80094e6 <__sflush_r+0x1a>
 80095ac:	6a21      	ldr	r1, [r4, #32]
 80095ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095b0:	4643      	mov	r3, r8
 80095b2:	463a      	mov	r2, r7
 80095b4:	4628      	mov	r0, r5
 80095b6:	47b0      	blx	r6
 80095b8:	2800      	cmp	r0, #0
 80095ba:	dc06      	bgt.n	80095ca <__sflush_r+0xfe>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c2:	81a3      	strh	r3, [r4, #12]
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	e78e      	b.n	80094e8 <__sflush_r+0x1c>
 80095ca:	4407      	add	r7, r0
 80095cc:	eba8 0800 	sub.w	r8, r8, r0
 80095d0:	e7e9      	b.n	80095a6 <__sflush_r+0xda>
 80095d2:	bf00      	nop
 80095d4:	dfbffffe 	.word	0xdfbffffe

080095d8 <_fflush_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	690b      	ldr	r3, [r1, #16]
 80095dc:	4605      	mov	r5, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	b913      	cbnz	r3, 80095e8 <_fflush_r+0x10>
 80095e2:	2500      	movs	r5, #0
 80095e4:	4628      	mov	r0, r5
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	b118      	cbz	r0, 80095f2 <_fflush_r+0x1a>
 80095ea:	6a03      	ldr	r3, [r0, #32]
 80095ec:	b90b      	cbnz	r3, 80095f2 <_fflush_r+0x1a>
 80095ee:	f7fe f9ef 	bl	80079d0 <__sinit>
 80095f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0f3      	beq.n	80095e2 <_fflush_r+0xa>
 80095fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095fc:	07d0      	lsls	r0, r2, #31
 80095fe:	d404      	bmi.n	800960a <_fflush_r+0x32>
 8009600:	0599      	lsls	r1, r3, #22
 8009602:	d402      	bmi.n	800960a <_fflush_r+0x32>
 8009604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009606:	f7fe fb0e 	bl	8007c26 <__retarget_lock_acquire_recursive>
 800960a:	4628      	mov	r0, r5
 800960c:	4621      	mov	r1, r4
 800960e:	f7ff ff5d 	bl	80094cc <__sflush_r>
 8009612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009614:	07da      	lsls	r2, r3, #31
 8009616:	4605      	mov	r5, r0
 8009618:	d4e4      	bmi.n	80095e4 <_fflush_r+0xc>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	059b      	lsls	r3, r3, #22
 800961e:	d4e1      	bmi.n	80095e4 <_fflush_r+0xc>
 8009620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009622:	f7fe fb01 	bl	8007c28 <__retarget_lock_release_recursive>
 8009626:	e7dd      	b.n	80095e4 <_fflush_r+0xc>

08009628 <memmove>:
 8009628:	4288      	cmp	r0, r1
 800962a:	b510      	push	{r4, lr}
 800962c:	eb01 0402 	add.w	r4, r1, r2
 8009630:	d902      	bls.n	8009638 <memmove+0x10>
 8009632:	4284      	cmp	r4, r0
 8009634:	4623      	mov	r3, r4
 8009636:	d807      	bhi.n	8009648 <memmove+0x20>
 8009638:	1e43      	subs	r3, r0, #1
 800963a:	42a1      	cmp	r1, r4
 800963c:	d008      	beq.n	8009650 <memmove+0x28>
 800963e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009646:	e7f8      	b.n	800963a <memmove+0x12>
 8009648:	4402      	add	r2, r0
 800964a:	4601      	mov	r1, r0
 800964c:	428a      	cmp	r2, r1
 800964e:	d100      	bne.n	8009652 <memmove+0x2a>
 8009650:	bd10      	pop	{r4, pc}
 8009652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800965a:	e7f7      	b.n	800964c <memmove+0x24>

0800965c <_sbrk_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d06      	ldr	r5, [pc, #24]	; (8009678 <_sbrk_r+0x1c>)
 8009660:	2300      	movs	r3, #0
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	602b      	str	r3, [r5, #0]
 8009668:	f7f8 f9a0 	bl	80019ac <_sbrk>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_sbrk_r+0x1a>
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	b103      	cbz	r3, 8009676 <_sbrk_r+0x1a>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	20000550 	.word	0x20000550

0800967c <memcpy>:
 800967c:	440a      	add	r2, r1
 800967e:	4291      	cmp	r1, r2
 8009680:	f100 33ff 	add.w	r3, r0, #4294967295
 8009684:	d100      	bne.n	8009688 <memcpy+0xc>
 8009686:	4770      	bx	lr
 8009688:	b510      	push	{r4, lr}
 800968a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800968e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009692:	4291      	cmp	r1, r2
 8009694:	d1f9      	bne.n	800968a <memcpy+0xe>
 8009696:	bd10      	pop	{r4, pc}

08009698 <__assert_func>:
 8009698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800969a:	4614      	mov	r4, r2
 800969c:	461a      	mov	r2, r3
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <__assert_func+0x2c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4605      	mov	r5, r0
 80096a4:	68d8      	ldr	r0, [r3, #12]
 80096a6:	b14c      	cbz	r4, 80096bc <__assert_func+0x24>
 80096a8:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <__assert_func+0x30>)
 80096aa:	9100      	str	r1, [sp, #0]
 80096ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096b0:	4906      	ldr	r1, [pc, #24]	; (80096cc <__assert_func+0x34>)
 80096b2:	462b      	mov	r3, r5
 80096b4:	f000 f872 	bl	800979c <fiprintf>
 80096b8:	f000 f882 	bl	80097c0 <abort>
 80096bc:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <__assert_func+0x38>)
 80096be:	461c      	mov	r4, r3
 80096c0:	e7f3      	b.n	80096aa <__assert_func+0x12>
 80096c2:	bf00      	nop
 80096c4:	20000074 	.word	0x20000074
 80096c8:	08009fef 	.word	0x08009fef
 80096cc:	08009ffc 	.word	0x08009ffc
 80096d0:	0800a02a 	.word	0x0800a02a

080096d4 <_calloc_r>:
 80096d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096d6:	fba1 2402 	umull	r2, r4, r1, r2
 80096da:	b94c      	cbnz	r4, 80096f0 <_calloc_r+0x1c>
 80096dc:	4611      	mov	r1, r2
 80096de:	9201      	str	r2, [sp, #4]
 80096e0:	f7ff f994 	bl	8008a0c <_malloc_r>
 80096e4:	9a01      	ldr	r2, [sp, #4]
 80096e6:	4605      	mov	r5, r0
 80096e8:	b930      	cbnz	r0, 80096f8 <_calloc_r+0x24>
 80096ea:	4628      	mov	r0, r5
 80096ec:	b003      	add	sp, #12
 80096ee:	bd30      	pop	{r4, r5, pc}
 80096f0:	220c      	movs	r2, #12
 80096f2:	6002      	str	r2, [r0, #0]
 80096f4:	2500      	movs	r5, #0
 80096f6:	e7f8      	b.n	80096ea <_calloc_r+0x16>
 80096f8:	4621      	mov	r1, r4
 80096fa:	f7fe fa16 	bl	8007b2a <memset>
 80096fe:	e7f4      	b.n	80096ea <_calloc_r+0x16>

08009700 <__ascii_mbtowc>:
 8009700:	b082      	sub	sp, #8
 8009702:	b901      	cbnz	r1, 8009706 <__ascii_mbtowc+0x6>
 8009704:	a901      	add	r1, sp, #4
 8009706:	b142      	cbz	r2, 800971a <__ascii_mbtowc+0x1a>
 8009708:	b14b      	cbz	r3, 800971e <__ascii_mbtowc+0x1e>
 800970a:	7813      	ldrb	r3, [r2, #0]
 800970c:	600b      	str	r3, [r1, #0]
 800970e:	7812      	ldrb	r2, [r2, #0]
 8009710:	1e10      	subs	r0, r2, #0
 8009712:	bf18      	it	ne
 8009714:	2001      	movne	r0, #1
 8009716:	b002      	add	sp, #8
 8009718:	4770      	bx	lr
 800971a:	4610      	mov	r0, r2
 800971c:	e7fb      	b.n	8009716 <__ascii_mbtowc+0x16>
 800971e:	f06f 0001 	mvn.w	r0, #1
 8009722:	e7f8      	b.n	8009716 <__ascii_mbtowc+0x16>

08009724 <_realloc_r>:
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	4680      	mov	r8, r0
 800972a:	4614      	mov	r4, r2
 800972c:	460e      	mov	r6, r1
 800972e:	b921      	cbnz	r1, 800973a <_realloc_r+0x16>
 8009730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	4611      	mov	r1, r2
 8009736:	f7ff b969 	b.w	8008a0c <_malloc_r>
 800973a:	b92a      	cbnz	r2, 8009748 <_realloc_r+0x24>
 800973c:	f7ff f8f2 	bl	8008924 <_free_r>
 8009740:	4625      	mov	r5, r4
 8009742:	4628      	mov	r0, r5
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009748:	f000 f841 	bl	80097ce <_malloc_usable_size_r>
 800974c:	4284      	cmp	r4, r0
 800974e:	4607      	mov	r7, r0
 8009750:	d802      	bhi.n	8009758 <_realloc_r+0x34>
 8009752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009756:	d812      	bhi.n	800977e <_realloc_r+0x5a>
 8009758:	4621      	mov	r1, r4
 800975a:	4640      	mov	r0, r8
 800975c:	f7ff f956 	bl	8008a0c <_malloc_r>
 8009760:	4605      	mov	r5, r0
 8009762:	2800      	cmp	r0, #0
 8009764:	d0ed      	beq.n	8009742 <_realloc_r+0x1e>
 8009766:	42bc      	cmp	r4, r7
 8009768:	4622      	mov	r2, r4
 800976a:	4631      	mov	r1, r6
 800976c:	bf28      	it	cs
 800976e:	463a      	movcs	r2, r7
 8009770:	f7ff ff84 	bl	800967c <memcpy>
 8009774:	4631      	mov	r1, r6
 8009776:	4640      	mov	r0, r8
 8009778:	f7ff f8d4 	bl	8008924 <_free_r>
 800977c:	e7e1      	b.n	8009742 <_realloc_r+0x1e>
 800977e:	4635      	mov	r5, r6
 8009780:	e7df      	b.n	8009742 <_realloc_r+0x1e>

08009782 <__ascii_wctomb>:
 8009782:	b149      	cbz	r1, 8009798 <__ascii_wctomb+0x16>
 8009784:	2aff      	cmp	r2, #255	; 0xff
 8009786:	bf85      	ittet	hi
 8009788:	238a      	movhi	r3, #138	; 0x8a
 800978a:	6003      	strhi	r3, [r0, #0]
 800978c:	700a      	strbls	r2, [r1, #0]
 800978e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009792:	bf98      	it	ls
 8009794:	2001      	movls	r0, #1
 8009796:	4770      	bx	lr
 8009798:	4608      	mov	r0, r1
 800979a:	4770      	bx	lr

0800979c <fiprintf>:
 800979c:	b40e      	push	{r1, r2, r3}
 800979e:	b503      	push	{r0, r1, lr}
 80097a0:	4601      	mov	r1, r0
 80097a2:	ab03      	add	r3, sp, #12
 80097a4:	4805      	ldr	r0, [pc, #20]	; (80097bc <fiprintf+0x20>)
 80097a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097aa:	6800      	ldr	r0, [r0, #0]
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	f000 f83f 	bl	8009830 <_vfiprintf_r>
 80097b2:	b002      	add	sp, #8
 80097b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097b8:	b003      	add	sp, #12
 80097ba:	4770      	bx	lr
 80097bc:	20000074 	.word	0x20000074

080097c0 <abort>:
 80097c0:	b508      	push	{r3, lr}
 80097c2:	2006      	movs	r0, #6
 80097c4:	f000 fa0c 	bl	8009be0 <raise>
 80097c8:	2001      	movs	r0, #1
 80097ca:	f7f8 f877 	bl	80018bc <_exit>

080097ce <_malloc_usable_size_r>:
 80097ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097d2:	1f18      	subs	r0, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bfbc      	itt	lt
 80097d8:	580b      	ldrlt	r3, [r1, r0]
 80097da:	18c0      	addlt	r0, r0, r3
 80097dc:	4770      	bx	lr

080097de <__sfputc_r>:
 80097de:	6893      	ldr	r3, [r2, #8]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	b410      	push	{r4}
 80097e6:	6093      	str	r3, [r2, #8]
 80097e8:	da08      	bge.n	80097fc <__sfputc_r+0x1e>
 80097ea:	6994      	ldr	r4, [r2, #24]
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	db01      	blt.n	80097f4 <__sfputc_r+0x16>
 80097f0:	290a      	cmp	r1, #10
 80097f2:	d103      	bne.n	80097fc <__sfputc_r+0x1e>
 80097f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f8:	f000 b934 	b.w	8009a64 <__swbuf_r>
 80097fc:	6813      	ldr	r3, [r2, #0]
 80097fe:	1c58      	adds	r0, r3, #1
 8009800:	6010      	str	r0, [r2, #0]
 8009802:	7019      	strb	r1, [r3, #0]
 8009804:	4608      	mov	r0, r1
 8009806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800980a:	4770      	bx	lr

0800980c <__sfputs_r>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	4606      	mov	r6, r0
 8009810:	460f      	mov	r7, r1
 8009812:	4614      	mov	r4, r2
 8009814:	18d5      	adds	r5, r2, r3
 8009816:	42ac      	cmp	r4, r5
 8009818:	d101      	bne.n	800981e <__sfputs_r+0x12>
 800981a:	2000      	movs	r0, #0
 800981c:	e007      	b.n	800982e <__sfputs_r+0x22>
 800981e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009822:	463a      	mov	r2, r7
 8009824:	4630      	mov	r0, r6
 8009826:	f7ff ffda 	bl	80097de <__sfputc_r>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d1f3      	bne.n	8009816 <__sfputs_r+0xa>
 800982e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009830 <_vfiprintf_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	460d      	mov	r5, r1
 8009836:	b09d      	sub	sp, #116	; 0x74
 8009838:	4614      	mov	r4, r2
 800983a:	4698      	mov	r8, r3
 800983c:	4606      	mov	r6, r0
 800983e:	b118      	cbz	r0, 8009848 <_vfiprintf_r+0x18>
 8009840:	6a03      	ldr	r3, [r0, #32]
 8009842:	b90b      	cbnz	r3, 8009848 <_vfiprintf_r+0x18>
 8009844:	f7fe f8c4 	bl	80079d0 <__sinit>
 8009848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800984a:	07d9      	lsls	r1, r3, #31
 800984c:	d405      	bmi.n	800985a <_vfiprintf_r+0x2a>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	059a      	lsls	r2, r3, #22
 8009852:	d402      	bmi.n	800985a <_vfiprintf_r+0x2a>
 8009854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009856:	f7fe f9e6 	bl	8007c26 <__retarget_lock_acquire_recursive>
 800985a:	89ab      	ldrh	r3, [r5, #12]
 800985c:	071b      	lsls	r3, r3, #28
 800985e:	d501      	bpl.n	8009864 <_vfiprintf_r+0x34>
 8009860:	692b      	ldr	r3, [r5, #16]
 8009862:	b99b      	cbnz	r3, 800988c <_vfiprintf_r+0x5c>
 8009864:	4629      	mov	r1, r5
 8009866:	4630      	mov	r0, r6
 8009868:	f000 f93a 	bl	8009ae0 <__swsetup_r>
 800986c:	b170      	cbz	r0, 800988c <_vfiprintf_r+0x5c>
 800986e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009870:	07dc      	lsls	r4, r3, #31
 8009872:	d504      	bpl.n	800987e <_vfiprintf_r+0x4e>
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	b01d      	add	sp, #116	; 0x74
 800987a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987e:	89ab      	ldrh	r3, [r5, #12]
 8009880:	0598      	lsls	r0, r3, #22
 8009882:	d4f7      	bmi.n	8009874 <_vfiprintf_r+0x44>
 8009884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009886:	f7fe f9cf 	bl	8007c28 <__retarget_lock_release_recursive>
 800988a:	e7f3      	b.n	8009874 <_vfiprintf_r+0x44>
 800988c:	2300      	movs	r3, #0
 800988e:	9309      	str	r3, [sp, #36]	; 0x24
 8009890:	2320      	movs	r3, #32
 8009892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009896:	f8cd 800c 	str.w	r8, [sp, #12]
 800989a:	2330      	movs	r3, #48	; 0x30
 800989c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009a50 <_vfiprintf_r+0x220>
 80098a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098a4:	f04f 0901 	mov.w	r9, #1
 80098a8:	4623      	mov	r3, r4
 80098aa:	469a      	mov	sl, r3
 80098ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098b0:	b10a      	cbz	r2, 80098b6 <_vfiprintf_r+0x86>
 80098b2:	2a25      	cmp	r2, #37	; 0x25
 80098b4:	d1f9      	bne.n	80098aa <_vfiprintf_r+0x7a>
 80098b6:	ebba 0b04 	subs.w	fp, sl, r4
 80098ba:	d00b      	beq.n	80098d4 <_vfiprintf_r+0xa4>
 80098bc:	465b      	mov	r3, fp
 80098be:	4622      	mov	r2, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff ffa2 	bl	800980c <__sfputs_r>
 80098c8:	3001      	adds	r0, #1
 80098ca:	f000 80a9 	beq.w	8009a20 <_vfiprintf_r+0x1f0>
 80098ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d0:	445a      	add	r2, fp
 80098d2:	9209      	str	r2, [sp, #36]	; 0x24
 80098d4:	f89a 3000 	ldrb.w	r3, [sl]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80a1 	beq.w	8009a20 <_vfiprintf_r+0x1f0>
 80098de:	2300      	movs	r3, #0
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295
 80098e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e8:	f10a 0a01 	add.w	sl, sl, #1
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	9307      	str	r3, [sp, #28]
 80098f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098f4:	931a      	str	r3, [sp, #104]	; 0x68
 80098f6:	4654      	mov	r4, sl
 80098f8:	2205      	movs	r2, #5
 80098fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fe:	4854      	ldr	r0, [pc, #336]	; (8009a50 <_vfiprintf_r+0x220>)
 8009900:	f7f6 fc6e 	bl	80001e0 <memchr>
 8009904:	9a04      	ldr	r2, [sp, #16]
 8009906:	b9d8      	cbnz	r0, 8009940 <_vfiprintf_r+0x110>
 8009908:	06d1      	lsls	r1, r2, #27
 800990a:	bf44      	itt	mi
 800990c:	2320      	movmi	r3, #32
 800990e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009912:	0713      	lsls	r3, r2, #28
 8009914:	bf44      	itt	mi
 8009916:	232b      	movmi	r3, #43	; 0x2b
 8009918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800991c:	f89a 3000 	ldrb.w	r3, [sl]
 8009920:	2b2a      	cmp	r3, #42	; 0x2a
 8009922:	d015      	beq.n	8009950 <_vfiprintf_r+0x120>
 8009924:	9a07      	ldr	r2, [sp, #28]
 8009926:	4654      	mov	r4, sl
 8009928:	2000      	movs	r0, #0
 800992a:	f04f 0c0a 	mov.w	ip, #10
 800992e:	4621      	mov	r1, r4
 8009930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009934:	3b30      	subs	r3, #48	; 0x30
 8009936:	2b09      	cmp	r3, #9
 8009938:	d94d      	bls.n	80099d6 <_vfiprintf_r+0x1a6>
 800993a:	b1b0      	cbz	r0, 800996a <_vfiprintf_r+0x13a>
 800993c:	9207      	str	r2, [sp, #28]
 800993e:	e014      	b.n	800996a <_vfiprintf_r+0x13a>
 8009940:	eba0 0308 	sub.w	r3, r0, r8
 8009944:	fa09 f303 	lsl.w	r3, r9, r3
 8009948:	4313      	orrs	r3, r2
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	46a2      	mov	sl, r4
 800994e:	e7d2      	b.n	80098f6 <_vfiprintf_r+0xc6>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	1d19      	adds	r1, r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9103      	str	r1, [sp, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfbb      	ittet	lt
 800995c:	425b      	neglt	r3, r3
 800995e:	f042 0202 	orrlt.w	r2, r2, #2
 8009962:	9307      	strge	r3, [sp, #28]
 8009964:	9307      	strlt	r3, [sp, #28]
 8009966:	bfb8      	it	lt
 8009968:	9204      	strlt	r2, [sp, #16]
 800996a:	7823      	ldrb	r3, [r4, #0]
 800996c:	2b2e      	cmp	r3, #46	; 0x2e
 800996e:	d10c      	bne.n	800998a <_vfiprintf_r+0x15a>
 8009970:	7863      	ldrb	r3, [r4, #1]
 8009972:	2b2a      	cmp	r3, #42	; 0x2a
 8009974:	d134      	bne.n	80099e0 <_vfiprintf_r+0x1b0>
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	1d1a      	adds	r2, r3, #4
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	9203      	str	r2, [sp, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	bfb8      	it	lt
 8009982:	f04f 33ff 	movlt.w	r3, #4294967295
 8009986:	3402      	adds	r4, #2
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009a60 <_vfiprintf_r+0x230>
 800998e:	7821      	ldrb	r1, [r4, #0]
 8009990:	2203      	movs	r2, #3
 8009992:	4650      	mov	r0, sl
 8009994:	f7f6 fc24 	bl	80001e0 <memchr>
 8009998:	b138      	cbz	r0, 80099aa <_vfiprintf_r+0x17a>
 800999a:	9b04      	ldr	r3, [sp, #16]
 800999c:	eba0 000a 	sub.w	r0, r0, sl
 80099a0:	2240      	movs	r2, #64	; 0x40
 80099a2:	4082      	lsls	r2, r0
 80099a4:	4313      	orrs	r3, r2
 80099a6:	3401      	adds	r4, #1
 80099a8:	9304      	str	r3, [sp, #16]
 80099aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ae:	4829      	ldr	r0, [pc, #164]	; (8009a54 <_vfiprintf_r+0x224>)
 80099b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099b4:	2206      	movs	r2, #6
 80099b6:	f7f6 fc13 	bl	80001e0 <memchr>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d03f      	beq.n	8009a3e <_vfiprintf_r+0x20e>
 80099be:	4b26      	ldr	r3, [pc, #152]	; (8009a58 <_vfiprintf_r+0x228>)
 80099c0:	bb1b      	cbnz	r3, 8009a0a <_vfiprintf_r+0x1da>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	3307      	adds	r3, #7
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	3308      	adds	r3, #8
 80099cc:	9303      	str	r3, [sp, #12]
 80099ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d0:	443b      	add	r3, r7
 80099d2:	9309      	str	r3, [sp, #36]	; 0x24
 80099d4:	e768      	b.n	80098a8 <_vfiprintf_r+0x78>
 80099d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80099da:	460c      	mov	r4, r1
 80099dc:	2001      	movs	r0, #1
 80099de:	e7a6      	b.n	800992e <_vfiprintf_r+0xfe>
 80099e0:	2300      	movs	r3, #0
 80099e2:	3401      	adds	r4, #1
 80099e4:	9305      	str	r3, [sp, #20]
 80099e6:	4619      	mov	r1, r3
 80099e8:	f04f 0c0a 	mov.w	ip, #10
 80099ec:	4620      	mov	r0, r4
 80099ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099f2:	3a30      	subs	r2, #48	; 0x30
 80099f4:	2a09      	cmp	r2, #9
 80099f6:	d903      	bls.n	8009a00 <_vfiprintf_r+0x1d0>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0c6      	beq.n	800998a <_vfiprintf_r+0x15a>
 80099fc:	9105      	str	r1, [sp, #20]
 80099fe:	e7c4      	b.n	800998a <_vfiprintf_r+0x15a>
 8009a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a04:	4604      	mov	r4, r0
 8009a06:	2301      	movs	r3, #1
 8009a08:	e7f0      	b.n	80099ec <_vfiprintf_r+0x1bc>
 8009a0a:	ab03      	add	r3, sp, #12
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	462a      	mov	r2, r5
 8009a10:	4b12      	ldr	r3, [pc, #72]	; (8009a5c <_vfiprintf_r+0x22c>)
 8009a12:	a904      	add	r1, sp, #16
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7fd fb89 	bl	800712c <_printf_float>
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	1c78      	adds	r0, r7, #1
 8009a1e:	d1d6      	bne.n	80099ce <_vfiprintf_r+0x19e>
 8009a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a22:	07d9      	lsls	r1, r3, #31
 8009a24:	d405      	bmi.n	8009a32 <_vfiprintf_r+0x202>
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	059a      	lsls	r2, r3, #22
 8009a2a:	d402      	bmi.n	8009a32 <_vfiprintf_r+0x202>
 8009a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a2e:	f7fe f8fb 	bl	8007c28 <__retarget_lock_release_recursive>
 8009a32:	89ab      	ldrh	r3, [r5, #12]
 8009a34:	065b      	lsls	r3, r3, #25
 8009a36:	f53f af1d 	bmi.w	8009874 <_vfiprintf_r+0x44>
 8009a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a3c:	e71c      	b.n	8009878 <_vfiprintf_r+0x48>
 8009a3e:	ab03      	add	r3, sp, #12
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	462a      	mov	r2, r5
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <_vfiprintf_r+0x22c>)
 8009a46:	a904      	add	r1, sp, #16
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f7fd fe13 	bl	8007674 <_printf_i>
 8009a4e:	e7e4      	b.n	8009a1a <_vfiprintf_r+0x1ea>
 8009a50:	08009fd4 	.word	0x08009fd4
 8009a54:	08009fde 	.word	0x08009fde
 8009a58:	0800712d 	.word	0x0800712d
 8009a5c:	0800980d 	.word	0x0800980d
 8009a60:	08009fda 	.word	0x08009fda

08009a64 <__swbuf_r>:
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	460e      	mov	r6, r1
 8009a68:	4614      	mov	r4, r2
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	b118      	cbz	r0, 8009a76 <__swbuf_r+0x12>
 8009a6e:	6a03      	ldr	r3, [r0, #32]
 8009a70:	b90b      	cbnz	r3, 8009a76 <__swbuf_r+0x12>
 8009a72:	f7fd ffad 	bl	80079d0 <__sinit>
 8009a76:	69a3      	ldr	r3, [r4, #24]
 8009a78:	60a3      	str	r3, [r4, #8]
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	071a      	lsls	r2, r3, #28
 8009a7e:	d525      	bpl.n	8009acc <__swbuf_r+0x68>
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	b31b      	cbz	r3, 8009acc <__swbuf_r+0x68>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	6922      	ldr	r2, [r4, #16]
 8009a88:	1a98      	subs	r0, r3, r2
 8009a8a:	6963      	ldr	r3, [r4, #20]
 8009a8c:	b2f6      	uxtb	r6, r6
 8009a8e:	4283      	cmp	r3, r0
 8009a90:	4637      	mov	r7, r6
 8009a92:	dc04      	bgt.n	8009a9e <__swbuf_r+0x3a>
 8009a94:	4621      	mov	r1, r4
 8009a96:	4628      	mov	r0, r5
 8009a98:	f7ff fd9e 	bl	80095d8 <_fflush_r>
 8009a9c:	b9e0      	cbnz	r0, 8009ad8 <__swbuf_r+0x74>
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	6022      	str	r2, [r4, #0]
 8009aaa:	701e      	strb	r6, [r3, #0]
 8009aac:	6962      	ldr	r2, [r4, #20]
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d004      	beq.n	8009abe <__swbuf_r+0x5a>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	07db      	lsls	r3, r3, #31
 8009ab8:	d506      	bpl.n	8009ac8 <__swbuf_r+0x64>
 8009aba:	2e0a      	cmp	r6, #10
 8009abc:	d104      	bne.n	8009ac8 <__swbuf_r+0x64>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f7ff fd89 	bl	80095d8 <_fflush_r>
 8009ac6:	b938      	cbnz	r0, 8009ad8 <__swbuf_r+0x74>
 8009ac8:	4638      	mov	r0, r7
 8009aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009acc:	4621      	mov	r1, r4
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f000 f806 	bl	8009ae0 <__swsetup_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d0d5      	beq.n	8009a84 <__swbuf_r+0x20>
 8009ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8009adc:	e7f4      	b.n	8009ac8 <__swbuf_r+0x64>
	...

08009ae0 <__swsetup_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4b2a      	ldr	r3, [pc, #168]	; (8009b8c <__swsetup_r+0xac>)
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	460c      	mov	r4, r1
 8009aea:	b118      	cbz	r0, 8009af4 <__swsetup_r+0x14>
 8009aec:	6a03      	ldr	r3, [r0, #32]
 8009aee:	b90b      	cbnz	r3, 8009af4 <__swsetup_r+0x14>
 8009af0:	f7fd ff6e 	bl	80079d0 <__sinit>
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009afa:	0718      	lsls	r0, r3, #28
 8009afc:	d422      	bmi.n	8009b44 <__swsetup_r+0x64>
 8009afe:	06d9      	lsls	r1, r3, #27
 8009b00:	d407      	bmi.n	8009b12 <__swsetup_r+0x32>
 8009b02:	2309      	movs	r3, #9
 8009b04:	602b      	str	r3, [r5, #0]
 8009b06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e034      	b.n	8009b7c <__swsetup_r+0x9c>
 8009b12:	0758      	lsls	r0, r3, #29
 8009b14:	d512      	bpl.n	8009b3c <__swsetup_r+0x5c>
 8009b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b18:	b141      	cbz	r1, 8009b2c <__swsetup_r+0x4c>
 8009b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b1e:	4299      	cmp	r1, r3
 8009b20:	d002      	beq.n	8009b28 <__swsetup_r+0x48>
 8009b22:	4628      	mov	r0, r5
 8009b24:	f7fe fefe 	bl	8008924 <_free_r>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	6363      	str	r3, [r4, #52]	; 0x34
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	2300      	movs	r3, #0
 8009b36:	6063      	str	r3, [r4, #4]
 8009b38:	6923      	ldr	r3, [r4, #16]
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	f043 0308 	orr.w	r3, r3, #8
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	6923      	ldr	r3, [r4, #16]
 8009b46:	b94b      	cbnz	r3, 8009b5c <__swsetup_r+0x7c>
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b52:	d003      	beq.n	8009b5c <__swsetup_r+0x7c>
 8009b54:	4621      	mov	r1, r4
 8009b56:	4628      	mov	r0, r5
 8009b58:	f000 f884 	bl	8009c64 <__smakebuf_r>
 8009b5c:	89a0      	ldrh	r0, [r4, #12]
 8009b5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b62:	f010 0301 	ands.w	r3, r0, #1
 8009b66:	d00a      	beq.n	8009b7e <__swsetup_r+0x9e>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60a3      	str	r3, [r4, #8]
 8009b6c:	6963      	ldr	r3, [r4, #20]
 8009b6e:	425b      	negs	r3, r3
 8009b70:	61a3      	str	r3, [r4, #24]
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	b943      	cbnz	r3, 8009b88 <__swsetup_r+0xa8>
 8009b76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b7a:	d1c4      	bne.n	8009b06 <__swsetup_r+0x26>
 8009b7c:	bd38      	pop	{r3, r4, r5, pc}
 8009b7e:	0781      	lsls	r1, r0, #30
 8009b80:	bf58      	it	pl
 8009b82:	6963      	ldrpl	r3, [r4, #20]
 8009b84:	60a3      	str	r3, [r4, #8]
 8009b86:	e7f4      	b.n	8009b72 <__swsetup_r+0x92>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	e7f7      	b.n	8009b7c <__swsetup_r+0x9c>
 8009b8c:	20000074 	.word	0x20000074

08009b90 <_raise_r>:
 8009b90:	291f      	cmp	r1, #31
 8009b92:	b538      	push	{r3, r4, r5, lr}
 8009b94:	4604      	mov	r4, r0
 8009b96:	460d      	mov	r5, r1
 8009b98:	d904      	bls.n	8009ba4 <_raise_r+0x14>
 8009b9a:	2316      	movs	r3, #22
 8009b9c:	6003      	str	r3, [r0, #0]
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ba6:	b112      	cbz	r2, 8009bae <_raise_r+0x1e>
 8009ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bac:	b94b      	cbnz	r3, 8009bc2 <_raise_r+0x32>
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 f830 	bl	8009c14 <_getpid_r>
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4601      	mov	r1, r0
 8009bb8:	4620      	mov	r0, r4
 8009bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bbe:	f000 b817 	b.w	8009bf0 <_kill_r>
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d00a      	beq.n	8009bdc <_raise_r+0x4c>
 8009bc6:	1c59      	adds	r1, r3, #1
 8009bc8:	d103      	bne.n	8009bd2 <_raise_r+0x42>
 8009bca:	2316      	movs	r3, #22
 8009bcc:	6003      	str	r3, [r0, #0]
 8009bce:	2001      	movs	r0, #1
 8009bd0:	e7e7      	b.n	8009ba2 <_raise_r+0x12>
 8009bd2:	2400      	movs	r4, #0
 8009bd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bd8:	4628      	mov	r0, r5
 8009bda:	4798      	blx	r3
 8009bdc:	2000      	movs	r0, #0
 8009bde:	e7e0      	b.n	8009ba2 <_raise_r+0x12>

08009be0 <raise>:
 8009be0:	4b02      	ldr	r3, [pc, #8]	; (8009bec <raise+0xc>)
 8009be2:	4601      	mov	r1, r0
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	f7ff bfd3 	b.w	8009b90 <_raise_r>
 8009bea:	bf00      	nop
 8009bec:	20000074 	.word	0x20000074

08009bf0 <_kill_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d07      	ldr	r5, [pc, #28]	; (8009c10 <_kill_r+0x20>)
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	602b      	str	r3, [r5, #0]
 8009bfe:	f7f7 fe4d 	bl	800189c <_kill>
 8009c02:	1c43      	adds	r3, r0, #1
 8009c04:	d102      	bne.n	8009c0c <_kill_r+0x1c>
 8009c06:	682b      	ldr	r3, [r5, #0]
 8009c08:	b103      	cbz	r3, 8009c0c <_kill_r+0x1c>
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	bd38      	pop	{r3, r4, r5, pc}
 8009c0e:	bf00      	nop
 8009c10:	20000550 	.word	0x20000550

08009c14 <_getpid_r>:
 8009c14:	f7f7 be3a 	b.w	800188c <_getpid>

08009c18 <__swhatbuf_r>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c20:	2900      	cmp	r1, #0
 8009c22:	b096      	sub	sp, #88	; 0x58
 8009c24:	4615      	mov	r5, r2
 8009c26:	461e      	mov	r6, r3
 8009c28:	da0d      	bge.n	8009c46 <__swhatbuf_r+0x2e>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c30:	f04f 0100 	mov.w	r1, #0
 8009c34:	bf0c      	ite	eq
 8009c36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c3a:	2340      	movne	r3, #64	; 0x40
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	6031      	str	r1, [r6, #0]
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	b016      	add	sp, #88	; 0x58
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
 8009c46:	466a      	mov	r2, sp
 8009c48:	f000 f848 	bl	8009cdc <_fstat_r>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	dbec      	blt.n	8009c2a <__swhatbuf_r+0x12>
 8009c50:	9901      	ldr	r1, [sp, #4]
 8009c52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c5a:	4259      	negs	r1, r3
 8009c5c:	4159      	adcs	r1, r3
 8009c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c62:	e7eb      	b.n	8009c3c <__swhatbuf_r+0x24>

08009c64 <__smakebuf_r>:
 8009c64:	898b      	ldrh	r3, [r1, #12]
 8009c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c68:	079d      	lsls	r5, r3, #30
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	d507      	bpl.n	8009c80 <__smakebuf_r+0x1c>
 8009c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	2301      	movs	r3, #1
 8009c7a:	6163      	str	r3, [r4, #20]
 8009c7c:	b002      	add	sp, #8
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}
 8009c80:	ab01      	add	r3, sp, #4
 8009c82:	466a      	mov	r2, sp
 8009c84:	f7ff ffc8 	bl	8009c18 <__swhatbuf_r>
 8009c88:	9900      	ldr	r1, [sp, #0]
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7fe febd 	bl	8008a0c <_malloc_r>
 8009c92:	b948      	cbnz	r0, 8009ca8 <__smakebuf_r+0x44>
 8009c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c98:	059a      	lsls	r2, r3, #22
 8009c9a:	d4ef      	bmi.n	8009c7c <__smakebuf_r+0x18>
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	f043 0302 	orr.w	r3, r3, #2
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	e7e3      	b.n	8009c70 <__smakebuf_r+0xc>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	6020      	str	r0, [r4, #0]
 8009cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	9b00      	ldr	r3, [sp, #0]
 8009cb4:	6163      	str	r3, [r4, #20]
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	6120      	str	r0, [r4, #16]
 8009cba:	b15b      	cbz	r3, 8009cd4 <__smakebuf_r+0x70>
 8009cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 f81d 	bl	8009d00 <_isatty_r>
 8009cc6:	b128      	cbz	r0, 8009cd4 <__smakebuf_r+0x70>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	431d      	orrs	r5, r3
 8009cd8:	81a5      	strh	r5, [r4, #12]
 8009cda:	e7cf      	b.n	8009c7c <__smakebuf_r+0x18>

08009cdc <_fstat_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d07      	ldr	r5, [pc, #28]	; (8009cfc <_fstat_r+0x20>)
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	f7f7 fe36 	bl	800195a <_fstat>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	d102      	bne.n	8009cf8 <_fstat_r+0x1c>
 8009cf2:	682b      	ldr	r3, [r5, #0]
 8009cf4:	b103      	cbz	r3, 8009cf8 <_fstat_r+0x1c>
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000550 	.word	0x20000550

08009d00 <_isatty_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d06      	ldr	r5, [pc, #24]	; (8009d1c <_isatty_r+0x1c>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	602b      	str	r3, [r5, #0]
 8009d0c:	f7f7 fe35 	bl	800197a <_isatty>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_isatty_r+0x1a>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_isatty_r+0x1a>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	20000550 	.word	0x20000550

08009d20 <_init>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	bf00      	nop
 8009d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d26:	bc08      	pop	{r3}
 8009d28:	469e      	mov	lr, r3
 8009d2a:	4770      	bx	lr

08009d2c <_fini>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr
